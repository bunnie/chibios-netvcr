ARM GAS  /tmp/ccFpKrXf.s 			page 1


   1              	# 1 "run_app.s"
   1              	/*
   0              	
   0              	
   1              	/* Copyright (C) 1991-2014 Free Software Foundation, Inc.
   2              	    ChibiOS - Copyright (C) 2006..2015 Giovanni Di Sirio.
   3              	
   4              	    This file is part of ChibiOS.
   5              	
   6              	    ChibiOS is free software; you can redistribute it and/or modify
   7              	    it under the terms of the GNU General Public License as published by
   8              	    the Free Software Foundation; either version 3 of the License, or
   9              	    (at your option) any later version.
  10              	
  11              	    ChibiOS is distributed in the hope that it will be useful,
  12              	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  13              	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14              	    GNU General Public License for more details.
  15              	
  16              	    You should have received a copy of the GNU General Public License
  17              	    along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18              	*/
  19              	
  20              	/**
  21              	 * @file    crt0_v6m.s
  22              	 * @brief   Generic ARMv6-M (Cortex-M0/M1) startup file for ChibiOS.
  23              	 *
  24              	 * @addtogroup ARMCMx_GCC_STARTUP_V6M
  25              	 * @{
  26              	 */
  27              	
  28              	/*===========================================================================*/
  29              	/* Module constants.                                                         */
  30              	/*===========================================================================*/
  31              	
  32              	#if !defined(FALSE) || defined(__DOXYGEN__)
  33              	#define FALSE                               0
  34              	#endif
  35              	
  36              	#if !defined(TRUE) || defined(__DOXYGEN__)
  37              	#define TRUE                                1
  38              	#endif
  39              	
  40              	#define CONTROL_MODE_PRIVILEGED             0
  41              	#define CONTROL_MODE_UNPRIVILEGED           1
  42              	#define CONTROL_USE_MSP                     0
  43              	#define CONTROL_USE_PSP                     2
  44              	
  45              	/*===========================================================================*/
  46              	/* Module pre-compile time settings.                                         */
  47              	/*===========================================================================*/
  48              	
  49              	/**
  50              	 * @brief   Control special register initialization value.
  51              	 * @details The system is setup to run in privileged mode using the PSP
  52              	 *          stack (dual stack mode).
  53              	 */
ARM GAS  /tmp/ccFpKrXf.s 			page 2


  54              	#define CRT0_CONTROL_INIT                   (CONTROL_USE_PSP |              \
  55              	                                             CONTROL_MODE_PRIVILEGED)
  56              	
  57              	/**
  58              	 * @brief   Constructors invocation switch.
  59              	 */
  60              	#define CRT0_CALL_CONSTRUCTORS              TRUE
  61              	
  62              	
  63              	/*===========================================================================*/
  64              	/* app_struct offsets                                                        */
  65              	/*===========================================================================*/
  66              	        .equ data_load_start,0x00   /* Start of data in ROM */
  67              	        .equ data_start,0x04        /* Start of data load address in RAM */
  68              	        .equ data_end,0x08          /* End of data load address in RAM */
  69              	        .equ bss_start,0x0c         /* Start of BSS in RAM */
  70              	        .equ bss_end,0x10           /* End of BSS in RAM */
  71              	        .equ entry,0x14             /* Address to jump to */
  72              	        .equ magic,0x18             /* 32-bit signature, defined below */
  73              	        .equ reserved1,0x1c
  74              	        .equ init_array_start,0x20  /* C++ constructor start */
  75              	        .equ init_array_end,0x24    /* C++ constructor end */
  76              	        .equ reserved2,0x28
  77              	        .equ reserved3,0x2c
  78              	
  79              	
  80              	/*===========================================================================*/
  81              	/* Code section.                                                             */
  82              	/*===========================================================================*/
  83              	
  84              	                .cpu    cortex-m0
  85              	                .fpu    softvfp
  86              	
  87              	                .thumb
  88              	                .text
  89              	
  90              	                .align  2
  91              	                .thumb_func
  92              	                .func Run_App
  93              	                .global Run_App
  94              	Run_App:
  95              	                /* Interrupts are globally masked initially.*/
  96 0000 72B6     	                cpsid   i
  97              	
  98              	                /* PSP stack pointers initialization.*/
  99 0002 1349     	                ldr     r1, =__ram0_end__
 100 0004 0439     	                sub     r1, #4
 101 0006 81F30988 	                msr     PSP, r1
 102              	
 103              	                /* CPU mode initialization as configured.*/
 104 000a 0221     	                movs    r1, #CRT0_CONTROL_INIT
 105 000c 81F31488 	                msr     CONTROL, r1
 106 0010 BFF36F8F 	                isb
 107              	
 108              	                /* Data initialization. Note, it assumes that the DATA size
 109              	                  is a multiple of 4 so the linker file must ensure this.*/
 110 0014 0168     	                ldr     r1, [r0, #data_load_start]
ARM GAS  /tmp/ccFpKrXf.s 			page 3


 111 0016 4268     	                ldr     r2, [r0, #data_start]
 112 0018 8368     	                ldr     r3, [r0, #data_end]
 113              	dloop:
 114 001a 9A42     	                cmp     r2, r3
 115 001c 04DA     	                bge     enddloop
 116 001e 0C68     	                ldr     r4, [r1]
 117 0020 1460     	                str     r4, [r2]
 118 0022 0431     	                add     r1, r1, #4
 119 0024 0432     	                add     r2, r2, #4
 120 0026 F8E7     	                b       dloop
 121              	enddloop:
 122              	
 123              	                /* BSS initialization. Note, it assumes that the DATA size
 124              	                  is a multiple of 4 so the linker file must ensure this.*/
 125 0028 0023     	                movs    r3, #0
 126 002a C168     	                ldr     r1, [r0, #bss_start]
 127 002c 0269     	                ldr     r2, [r0, #bss_end]
 128              	bloop:
 129 002e 9142     	                cmp     r1, r2
 130 0030 02DA     	                bge     endbloop
 131 0032 0B60     	                str     r3, [r1]
 132 0034 0431     	                add     r1, r1, #4
 133 0036 FAE7     	                b       bloop
 134              	endbloop:
 135              	
 136              	                /* Constructors invocation.*/
 137 0038 046A     	                ldr     r4, [r0, #init_array_start]
 138 003a 456A     	                ldr     r5, [r0, #init_array_end]
 139              	initloop:
 140 003c AC42     	                cmp     r4, r5
 141 003e 03DA     	                bge     endinitloop
 142 0040 2168     	                ldr     r1, [r4]
 143 0042 8847     	                blx     r1
 144 0044 0434     	                add     r4, r4, #4
 145 0046 F9E7     	                b       initloop
 146              	endinitloop:
 147              	
 148              	                /* Interrupts must be enabled for SVC to work */
 149 0048 62B6     	                cpsie i
 150              	
 151              	                /* Main program invocation, r0 contains the returned value.*/
 152 004a 4069     	                ldr     r0, [r0, #entry]
 153 004c 0047     	                bx      r0
 154              	                .endfunc
 155              	                .type Run_App, %function
 156 004e 00000000 	                .size Run_App, .-Run_App
 156      0000
ARM GAS  /tmp/ccFpKrXf.s 			page 4


DEFINED SYMBOLS
           run_app.s:66     *ABS*:00000000 data_load_start
           run_app.s:67     *ABS*:00000004 data_start
           run_app.s:68     *ABS*:00000008 data_end
           run_app.s:69     *ABS*:0000000c bss_start
           run_app.s:70     *ABS*:00000010 bss_end
           run_app.s:71     *ABS*:00000014 entry
           run_app.s:72     *ABS*:00000018 magic
           run_app.s:73     *ABS*:0000001c reserved1
           run_app.s:74     *ABS*:00000020 init_array_start
           run_app.s:75     *ABS*:00000024 init_array_end
           run_app.s:76     *ABS*:00000028 reserved2
           run_app.s:77     *ABS*:0000002c reserved3
           run_app.s:90     .text:00000000 $t
           run_app.s:94     .text:00000000 Run_App
           run_app.s:113    .text:0000001a dloop
           run_app.s:121    .text:00000028 enddloop
           run_app.s:128    .text:0000002e bloop
           run_app.s:134    .text:00000038 endbloop
           run_app.s:139    .text:0000003c initloop
           run_app.s:146    .text:00000048 endinitloop
           run_app.s:156    .text:0000004e $d
           run_app.s:156    .text:00000050 $d

UNDEFINED SYMBOLS
__ram0_end__
