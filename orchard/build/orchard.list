
build/orchard.elf:     file format elf32-littlearm


Disassembly of section .text:

00000410 <Reset_Handler>:
     410:	b672      	cpsid	i
     412:	4822      	ldr	r0, [pc, #136]	; (49c <endfiniloop+0x4>)
     414:	f380 8809 	msr	PSP, r0
     418:	2002      	movs	r0, #2
     41a:	f380 8814 	msr	CONTROL, r0
     41e:	f3bf 8f6f 	isb	sy
     422:	f001 fd05 	bl	1e30 <__core_init>
     426:	f002 fc23 	bl	2c70 <__early_init>
     42a:	481d      	ldr	r0, [pc, #116]	; (4a0 <endfiniloop+0x8>)
     42c:	491d      	ldr	r1, [pc, #116]	; (4a4 <endfiniloop+0xc>)
     42e:	4a1e      	ldr	r2, [pc, #120]	; (4a8 <endfiniloop+0x10>)

00000430 <msloop>:
     430:	4291      	cmp	r1, r2
     432:	da02      	bge.n	43a <endmsloop>
     434:	6008      	str	r0, [r1, #0]
     436:	3104      	adds	r1, #4
     438:	e7fa      	b.n	430 <msloop>

0000043a <endmsloop>:
     43a:	491c      	ldr	r1, [pc, #112]	; (4ac <endfiniloop+0x14>)
     43c:	4a17      	ldr	r2, [pc, #92]	; (49c <endfiniloop+0x4>)

0000043e <psloop>:
     43e:	4291      	cmp	r1, r2
     440:	da02      	bge.n	448 <endpsloop>
     442:	6008      	str	r0, [r1, #0]
     444:	3104      	adds	r1, #4
     446:	e7fa      	b.n	43e <psloop>

00000448 <endpsloop>:
     448:	4919      	ldr	r1, [pc, #100]	; (4b0 <endfiniloop+0x18>)
     44a:	4a1a      	ldr	r2, [pc, #104]	; (4b4 <endfiniloop+0x1c>)
     44c:	4b1a      	ldr	r3, [pc, #104]	; (4b8 <endfiniloop+0x20>)

0000044e <dloop>:
     44e:	429a      	cmp	r2, r3
     450:	da04      	bge.n	45c <enddloop>
     452:	6808      	ldr	r0, [r1, #0]
     454:	6010      	str	r0, [r2, #0]
     456:	3104      	adds	r1, #4
     458:	3204      	adds	r2, #4
     45a:	e7f8      	b.n	44e <dloop>

0000045c <enddloop>:
     45c:	2000      	movs	r0, #0
     45e:	4917      	ldr	r1, [pc, #92]	; (4bc <endfiniloop+0x24>)
     460:	4a17      	ldr	r2, [pc, #92]	; (4c0 <endfiniloop+0x28>)

00000462 <bloop>:
     462:	4291      	cmp	r1, r2
     464:	da02      	bge.n	46c <endbloop>
     466:	6008      	str	r0, [r1, #0]
     468:	3104      	adds	r1, #4
     46a:	e7fa      	b.n	462 <bloop>

0000046c <endbloop>:
     46c:	f001 fcf8 	bl	1e60 <__init_ram_areas>
     470:	f001 fce6 	bl	1e40 <__late_init>
     474:	4c13      	ldr	r4, [pc, #76]	; (4c4 <endfiniloop+0x2c>)
     476:	4d14      	ldr	r5, [pc, #80]	; (4c8 <endfiniloop+0x30>)

00000478 <initloop>:
     478:	42ac      	cmp	r4, r5
     47a:	da03      	bge.n	484 <endinitloop>
     47c:	6821      	ldr	r1, [r4, #0]
     47e:	4788      	blx	r1
     480:	3404      	adds	r4, #4
     482:	e7f9      	b.n	478 <initloop>

00000484 <endinitloop>:
     484:	f000 ff84 	bl	1390 <main>
     488:	4c10      	ldr	r4, [pc, #64]	; (4cc <endfiniloop+0x34>)
     48a:	4d11      	ldr	r5, [pc, #68]	; (4d0 <endfiniloop+0x38>)

0000048c <finiloop>:
     48c:	42ac      	cmp	r4, r5
     48e:	da03      	bge.n	498 <endfiniloop>
     490:	6821      	ldr	r1, [r4, #0]
     492:	4788      	blx	r1
     494:	3404      	adds	r4, #4
     496:	e7f9      	b.n	48c <finiloop>

00000498 <endfiniloop>:
     498:	490e      	ldr	r1, [pc, #56]	; (4d4 <endfiniloop+0x3c>)
     49a:	4708      	bx	r1
     49c:	1ffffd80 	.word	0x1ffffd80
     4a0:	55555555 	.word	0x55555555
     4a4:	1ffffc00 	.word	0x1ffffc00
     4a8:	1ffffc80 	.word	0x1ffffc80
     4ac:	1ffffc80 	.word	0x1ffffc80
     4b0:	00003d90 	.word	0x00003d90
     4b4:	1ffffd80 	.word	0x1ffffd80
     4b8:	1ffffe94 	.word	0x1ffffe94
     4bc:	1ffffe98 	.word	0x1ffffe98
     4c0:	20000b18 	.word	0x20000b18
     4c4:	00000410 	.word	0x00000410
     4c8:	00000410 	.word	0x00000410
     4cc:	00000410 	.word	0x00000410
     4d0:	00000410 	.word	0x00000410
     4d4:	00001e51 	.word	0x00001e51
	...

000004e0 <_port_switch>:
     4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
     4e2:	4644      	mov	r4, r8
     4e4:	464d      	mov	r5, r9
     4e6:	4656      	mov	r6, sl
     4e8:	465f      	mov	r7, fp
     4ea:	b4f0      	push	{r4, r5, r6, r7}
     4ec:	466b      	mov	r3, sp
     4ee:	600b      	str	r3, [r1, #0]
     4f0:	6803      	ldr	r3, [r0, #0]
     4f2:	469d      	mov	sp, r3
     4f4:	bcf0      	pop	{r4, r5, r6, r7}
     4f6:	46a0      	mov	r8, r4
     4f8:	46a9      	mov	r9, r5
     4fa:	46b2      	mov	sl, r6
     4fc:	46bb      	mov	fp, r7
     4fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000500 <_port_thread_start>:
     500:	b662      	cpsie	i
     502:	1c28      	adds	r0, r5, #0
     504:	47a0      	blx	r4
     506:	2300      	movs	r3, #0
     508:	f001 fd3a 	bl	1f80 <chSysHalt>

0000050c <_port_switch_from_isr>:
     50c:	f001 fd80 	bl	2010 <chSchRescheduleS>

00000510 <_port_exit_from_isr>:
     510:	4a01      	ldr	r2, [pc, #4]	; (518 <_port_exit_from_isr+0x8>)
     512:	4b02      	ldr	r3, [pc, #8]	; (51c <_port_exit_from_isr+0xc>)
     514:	6013      	str	r3, [r2, #0]
     516:	e7fe      	b.n	516 <_port_exit_from_isr+0x6>
     518:	e000ed04 	.word	0xe000ed04
     51c:	80000000 	.word	0x80000000

00000520 <Run_App>:
     520:	b672      	cpsid	i
     522:	4913      	ldr	r1, [pc, #76]	; (570 <endinitloop+0x8>)
     524:	3904      	subs	r1, #4
     526:	f381 8809 	msr	PSP, r1
     52a:	2102      	movs	r1, #2
     52c:	f381 8814 	msr	CONTROL, r1
     530:	f3bf 8f6f 	isb	sy
     534:	6801      	ldr	r1, [r0, #0]
     536:	6842      	ldr	r2, [r0, #4]
     538:	6883      	ldr	r3, [r0, #8]

0000053a <dloop>:
     53a:	429a      	cmp	r2, r3
     53c:	da04      	bge.n	548 <enddloop>
     53e:	680c      	ldr	r4, [r1, #0]
     540:	6014      	str	r4, [r2, #0]
     542:	3104      	adds	r1, #4
     544:	3204      	adds	r2, #4
     546:	e7f8      	b.n	53a <dloop>

00000548 <enddloop>:
     548:	2300      	movs	r3, #0
     54a:	68c1      	ldr	r1, [r0, #12]
     54c:	6902      	ldr	r2, [r0, #16]

0000054e <bloop>:
     54e:	4291      	cmp	r1, r2
     550:	da02      	bge.n	558 <endbloop>
     552:	600b      	str	r3, [r1, #0]
     554:	3104      	adds	r1, #4
     556:	e7fa      	b.n	54e <bloop>

00000558 <endbloop>:
     558:	6a04      	ldr	r4, [r0, #32]
     55a:	6a45      	ldr	r5, [r0, #36]	; 0x24

0000055c <initloop>:
     55c:	42ac      	cmp	r4, r5
     55e:	da03      	bge.n	568 <endinitloop>
     560:	6821      	ldr	r1, [r4, #0]
     562:	4788      	blx	r1
     564:	3404      	adds	r4, #4
     566:	e7f9      	b.n	55c <initloop>

00000568 <endinitloop>:
     568:	b662      	cpsie	i
     56a:	6940      	ldr	r0, [r0, #20]
     56c:	4700      	bx	r0
     56e:	0000      	.short	0x0000
     570:	20000c00 	.word	0x20000c00
	...

00000580 <SVC_Handler>:
     580:	4677      	mov	r7, lr
     582:	2604      	movs	r6, #4
     584:	4237      	tst	r7, r6
     586:	d000      	beq.n	58a <svc_handler_msp>
     588:	d102      	bne.n	590 <svc_handler_psp>

0000058a <svc_handler_msp>:
     58a:	f3ef 8708 	mrs	r7, MSP
     58e:	e002      	b.n	596 <svc_handler_dispatch>

00000590 <svc_handler_psp>:
     590:	f3ef 8709 	mrs	r7, PSP
     594:	e7ff      	b.n	596 <svc_handler_dispatch>

00000596 <svc_handler_dispatch>:
     596:	2618      	movs	r6, #24
     598:	59bf      	ldr	r7, [r7, r6]
     59a:	2600      	movs	r6, #0
     59c:	3e02      	subs	r6, #2
     59e:	5dbf      	ldrb	r7, [r7, r6]
     5a0:	4e02      	ldr	r6, [pc, #8]	; (5ac <svc_handler_dispatch+0x16>)
     5a2:	00bf      	lsls	r7, r7, #2
     5a4:	19be      	adds	r6, r7, r6
     5a6:	6836      	ldr	r6, [r6, #0]
     5a8:	4730      	bx	r6
     5aa:	0000      	.short	0x0000
     5ac:	1ffffdb8 	.word	0x1ffffdb8

000005b0 <__aeabi_uidiv>:
     5b0:	2200      	movs	r2, #0
     5b2:	0843      	lsrs	r3, r0, #1
     5b4:	428b      	cmp	r3, r1
     5b6:	d374      	bcc.n	6a2 <__aeabi_uidiv+0xf2>
     5b8:	0903      	lsrs	r3, r0, #4
     5ba:	428b      	cmp	r3, r1
     5bc:	d35f      	bcc.n	67e <__aeabi_uidiv+0xce>
     5be:	0a03      	lsrs	r3, r0, #8
     5c0:	428b      	cmp	r3, r1
     5c2:	d344      	bcc.n	64e <__aeabi_uidiv+0x9e>
     5c4:	0b03      	lsrs	r3, r0, #12
     5c6:	428b      	cmp	r3, r1
     5c8:	d328      	bcc.n	61c <__aeabi_uidiv+0x6c>
     5ca:	0c03      	lsrs	r3, r0, #16
     5cc:	428b      	cmp	r3, r1
     5ce:	d30d      	bcc.n	5ec <__aeabi_uidiv+0x3c>
     5d0:	22ff      	movs	r2, #255	; 0xff
     5d2:	0209      	lsls	r1, r1, #8
     5d4:	ba12      	rev	r2, r2
     5d6:	0c03      	lsrs	r3, r0, #16
     5d8:	428b      	cmp	r3, r1
     5da:	d302      	bcc.n	5e2 <__aeabi_uidiv+0x32>
     5dc:	1212      	asrs	r2, r2, #8
     5de:	0209      	lsls	r1, r1, #8
     5e0:	d065      	beq.n	6ae <__aeabi_uidiv+0xfe>
     5e2:	0b03      	lsrs	r3, r0, #12
     5e4:	428b      	cmp	r3, r1
     5e6:	d319      	bcc.n	61c <__aeabi_uidiv+0x6c>
     5e8:	e000      	b.n	5ec <__aeabi_uidiv+0x3c>
     5ea:	0a09      	lsrs	r1, r1, #8
     5ec:	0bc3      	lsrs	r3, r0, #15
     5ee:	428b      	cmp	r3, r1
     5f0:	d301      	bcc.n	5f6 <__aeabi_uidiv+0x46>
     5f2:	03cb      	lsls	r3, r1, #15
     5f4:	1ac0      	subs	r0, r0, r3
     5f6:	4152      	adcs	r2, r2
     5f8:	0b83      	lsrs	r3, r0, #14
     5fa:	428b      	cmp	r3, r1
     5fc:	d301      	bcc.n	602 <__aeabi_uidiv+0x52>
     5fe:	038b      	lsls	r3, r1, #14
     600:	1ac0      	subs	r0, r0, r3
     602:	4152      	adcs	r2, r2
     604:	0b43      	lsrs	r3, r0, #13
     606:	428b      	cmp	r3, r1
     608:	d301      	bcc.n	60e <__aeabi_uidiv+0x5e>
     60a:	034b      	lsls	r3, r1, #13
     60c:	1ac0      	subs	r0, r0, r3
     60e:	4152      	adcs	r2, r2
     610:	0b03      	lsrs	r3, r0, #12
     612:	428b      	cmp	r3, r1
     614:	d301      	bcc.n	61a <__aeabi_uidiv+0x6a>
     616:	030b      	lsls	r3, r1, #12
     618:	1ac0      	subs	r0, r0, r3
     61a:	4152      	adcs	r2, r2
     61c:	0ac3      	lsrs	r3, r0, #11
     61e:	428b      	cmp	r3, r1
     620:	d301      	bcc.n	626 <__aeabi_uidiv+0x76>
     622:	02cb      	lsls	r3, r1, #11
     624:	1ac0      	subs	r0, r0, r3
     626:	4152      	adcs	r2, r2
     628:	0a83      	lsrs	r3, r0, #10
     62a:	428b      	cmp	r3, r1
     62c:	d301      	bcc.n	632 <__aeabi_uidiv+0x82>
     62e:	028b      	lsls	r3, r1, #10
     630:	1ac0      	subs	r0, r0, r3
     632:	4152      	adcs	r2, r2
     634:	0a43      	lsrs	r3, r0, #9
     636:	428b      	cmp	r3, r1
     638:	d301      	bcc.n	63e <__aeabi_uidiv+0x8e>
     63a:	024b      	lsls	r3, r1, #9
     63c:	1ac0      	subs	r0, r0, r3
     63e:	4152      	adcs	r2, r2
     640:	0a03      	lsrs	r3, r0, #8
     642:	428b      	cmp	r3, r1
     644:	d301      	bcc.n	64a <__aeabi_uidiv+0x9a>
     646:	020b      	lsls	r3, r1, #8
     648:	1ac0      	subs	r0, r0, r3
     64a:	4152      	adcs	r2, r2
     64c:	d2cd      	bcs.n	5ea <__aeabi_uidiv+0x3a>
     64e:	09c3      	lsrs	r3, r0, #7
     650:	428b      	cmp	r3, r1
     652:	d301      	bcc.n	658 <__aeabi_uidiv+0xa8>
     654:	01cb      	lsls	r3, r1, #7
     656:	1ac0      	subs	r0, r0, r3
     658:	4152      	adcs	r2, r2
     65a:	0983      	lsrs	r3, r0, #6
     65c:	428b      	cmp	r3, r1
     65e:	d301      	bcc.n	664 <__aeabi_uidiv+0xb4>
     660:	018b      	lsls	r3, r1, #6
     662:	1ac0      	subs	r0, r0, r3
     664:	4152      	adcs	r2, r2
     666:	0943      	lsrs	r3, r0, #5
     668:	428b      	cmp	r3, r1
     66a:	d301      	bcc.n	670 <__aeabi_uidiv+0xc0>
     66c:	014b      	lsls	r3, r1, #5
     66e:	1ac0      	subs	r0, r0, r3
     670:	4152      	adcs	r2, r2
     672:	0903      	lsrs	r3, r0, #4
     674:	428b      	cmp	r3, r1
     676:	d301      	bcc.n	67c <__aeabi_uidiv+0xcc>
     678:	010b      	lsls	r3, r1, #4
     67a:	1ac0      	subs	r0, r0, r3
     67c:	4152      	adcs	r2, r2
     67e:	08c3      	lsrs	r3, r0, #3
     680:	428b      	cmp	r3, r1
     682:	d301      	bcc.n	688 <__aeabi_uidiv+0xd8>
     684:	00cb      	lsls	r3, r1, #3
     686:	1ac0      	subs	r0, r0, r3
     688:	4152      	adcs	r2, r2
     68a:	0883      	lsrs	r3, r0, #2
     68c:	428b      	cmp	r3, r1
     68e:	d301      	bcc.n	694 <__aeabi_uidiv+0xe4>
     690:	008b      	lsls	r3, r1, #2
     692:	1ac0      	subs	r0, r0, r3
     694:	4152      	adcs	r2, r2
     696:	0843      	lsrs	r3, r0, #1
     698:	428b      	cmp	r3, r1
     69a:	d301      	bcc.n	6a0 <__aeabi_uidiv+0xf0>
     69c:	004b      	lsls	r3, r1, #1
     69e:	1ac0      	subs	r0, r0, r3
     6a0:	4152      	adcs	r2, r2
     6a2:	1a41      	subs	r1, r0, r1
     6a4:	d200      	bcs.n	6a8 <__aeabi_uidiv+0xf8>
     6a6:	4601      	mov	r1, r0
     6a8:	4152      	adcs	r2, r2
     6aa:	4610      	mov	r0, r2
     6ac:	4770      	bx	lr
     6ae:	e7ff      	b.n	6b0 <__aeabi_uidiv+0x100>
     6b0:	b501      	push	{r0, lr}
     6b2:	2000      	movs	r0, #0
     6b4:	f000 f8fc 	bl	8b0 <__aeabi_idiv0>
     6b8:	bd02      	pop	{r1, pc}
     6ba:	46c0      	nop			; (mov r8, r8)

000006bc <__aeabi_uidivmod>:
     6bc:	2900      	cmp	r1, #0
     6be:	d0f7      	beq.n	6b0 <__aeabi_uidiv+0x100>
     6c0:	b503      	push	{r0, r1, lr}
     6c2:	f7ff ff75 	bl	5b0 <__aeabi_uidiv>
     6c6:	bc0e      	pop	{r1, r2, r3}
     6c8:	4342      	muls	r2, r0
     6ca:	1a89      	subs	r1, r1, r2
     6cc:	4718      	bx	r3
     6ce:	46c0      	nop			; (mov r8, r8)

000006d0 <__aeabi_idiv>:
     6d0:	4603      	mov	r3, r0
     6d2:	430b      	orrs	r3, r1
     6d4:	d47f      	bmi.n	7d6 <__aeabi_idiv+0x106>
     6d6:	2200      	movs	r2, #0
     6d8:	0843      	lsrs	r3, r0, #1
     6da:	428b      	cmp	r3, r1
     6dc:	d374      	bcc.n	7c8 <__aeabi_idiv+0xf8>
     6de:	0903      	lsrs	r3, r0, #4
     6e0:	428b      	cmp	r3, r1
     6e2:	d35f      	bcc.n	7a4 <__aeabi_idiv+0xd4>
     6e4:	0a03      	lsrs	r3, r0, #8
     6e6:	428b      	cmp	r3, r1
     6e8:	d344      	bcc.n	774 <__aeabi_idiv+0xa4>
     6ea:	0b03      	lsrs	r3, r0, #12
     6ec:	428b      	cmp	r3, r1
     6ee:	d328      	bcc.n	742 <__aeabi_idiv+0x72>
     6f0:	0c03      	lsrs	r3, r0, #16
     6f2:	428b      	cmp	r3, r1
     6f4:	d30d      	bcc.n	712 <__aeabi_idiv+0x42>
     6f6:	22ff      	movs	r2, #255	; 0xff
     6f8:	0209      	lsls	r1, r1, #8
     6fa:	ba12      	rev	r2, r2
     6fc:	0c03      	lsrs	r3, r0, #16
     6fe:	428b      	cmp	r3, r1
     700:	d302      	bcc.n	708 <__aeabi_idiv+0x38>
     702:	1212      	asrs	r2, r2, #8
     704:	0209      	lsls	r1, r1, #8
     706:	d065      	beq.n	7d4 <__aeabi_idiv+0x104>
     708:	0b03      	lsrs	r3, r0, #12
     70a:	428b      	cmp	r3, r1
     70c:	d319      	bcc.n	742 <__aeabi_idiv+0x72>
     70e:	e000      	b.n	712 <__aeabi_idiv+0x42>
     710:	0a09      	lsrs	r1, r1, #8
     712:	0bc3      	lsrs	r3, r0, #15
     714:	428b      	cmp	r3, r1
     716:	d301      	bcc.n	71c <__aeabi_idiv+0x4c>
     718:	03cb      	lsls	r3, r1, #15
     71a:	1ac0      	subs	r0, r0, r3
     71c:	4152      	adcs	r2, r2
     71e:	0b83      	lsrs	r3, r0, #14
     720:	428b      	cmp	r3, r1
     722:	d301      	bcc.n	728 <__aeabi_idiv+0x58>
     724:	038b      	lsls	r3, r1, #14
     726:	1ac0      	subs	r0, r0, r3
     728:	4152      	adcs	r2, r2
     72a:	0b43      	lsrs	r3, r0, #13
     72c:	428b      	cmp	r3, r1
     72e:	d301      	bcc.n	734 <__aeabi_idiv+0x64>
     730:	034b      	lsls	r3, r1, #13
     732:	1ac0      	subs	r0, r0, r3
     734:	4152      	adcs	r2, r2
     736:	0b03      	lsrs	r3, r0, #12
     738:	428b      	cmp	r3, r1
     73a:	d301      	bcc.n	740 <__aeabi_idiv+0x70>
     73c:	030b      	lsls	r3, r1, #12
     73e:	1ac0      	subs	r0, r0, r3
     740:	4152      	adcs	r2, r2
     742:	0ac3      	lsrs	r3, r0, #11
     744:	428b      	cmp	r3, r1
     746:	d301      	bcc.n	74c <__aeabi_idiv+0x7c>
     748:	02cb      	lsls	r3, r1, #11
     74a:	1ac0      	subs	r0, r0, r3
     74c:	4152      	adcs	r2, r2
     74e:	0a83      	lsrs	r3, r0, #10
     750:	428b      	cmp	r3, r1
     752:	d301      	bcc.n	758 <__aeabi_idiv+0x88>
     754:	028b      	lsls	r3, r1, #10
     756:	1ac0      	subs	r0, r0, r3
     758:	4152      	adcs	r2, r2
     75a:	0a43      	lsrs	r3, r0, #9
     75c:	428b      	cmp	r3, r1
     75e:	d301      	bcc.n	764 <__aeabi_idiv+0x94>
     760:	024b      	lsls	r3, r1, #9
     762:	1ac0      	subs	r0, r0, r3
     764:	4152      	adcs	r2, r2
     766:	0a03      	lsrs	r3, r0, #8
     768:	428b      	cmp	r3, r1
     76a:	d301      	bcc.n	770 <__aeabi_idiv+0xa0>
     76c:	020b      	lsls	r3, r1, #8
     76e:	1ac0      	subs	r0, r0, r3
     770:	4152      	adcs	r2, r2
     772:	d2cd      	bcs.n	710 <__aeabi_idiv+0x40>
     774:	09c3      	lsrs	r3, r0, #7
     776:	428b      	cmp	r3, r1
     778:	d301      	bcc.n	77e <__aeabi_idiv+0xae>
     77a:	01cb      	lsls	r3, r1, #7
     77c:	1ac0      	subs	r0, r0, r3
     77e:	4152      	adcs	r2, r2
     780:	0983      	lsrs	r3, r0, #6
     782:	428b      	cmp	r3, r1
     784:	d301      	bcc.n	78a <__aeabi_idiv+0xba>
     786:	018b      	lsls	r3, r1, #6
     788:	1ac0      	subs	r0, r0, r3
     78a:	4152      	adcs	r2, r2
     78c:	0943      	lsrs	r3, r0, #5
     78e:	428b      	cmp	r3, r1
     790:	d301      	bcc.n	796 <__aeabi_idiv+0xc6>
     792:	014b      	lsls	r3, r1, #5
     794:	1ac0      	subs	r0, r0, r3
     796:	4152      	adcs	r2, r2
     798:	0903      	lsrs	r3, r0, #4
     79a:	428b      	cmp	r3, r1
     79c:	d301      	bcc.n	7a2 <__aeabi_idiv+0xd2>
     79e:	010b      	lsls	r3, r1, #4
     7a0:	1ac0      	subs	r0, r0, r3
     7a2:	4152      	adcs	r2, r2
     7a4:	08c3      	lsrs	r3, r0, #3
     7a6:	428b      	cmp	r3, r1
     7a8:	d301      	bcc.n	7ae <__aeabi_idiv+0xde>
     7aa:	00cb      	lsls	r3, r1, #3
     7ac:	1ac0      	subs	r0, r0, r3
     7ae:	4152      	adcs	r2, r2
     7b0:	0883      	lsrs	r3, r0, #2
     7b2:	428b      	cmp	r3, r1
     7b4:	d301      	bcc.n	7ba <__aeabi_idiv+0xea>
     7b6:	008b      	lsls	r3, r1, #2
     7b8:	1ac0      	subs	r0, r0, r3
     7ba:	4152      	adcs	r2, r2
     7bc:	0843      	lsrs	r3, r0, #1
     7be:	428b      	cmp	r3, r1
     7c0:	d301      	bcc.n	7c6 <__aeabi_idiv+0xf6>
     7c2:	004b      	lsls	r3, r1, #1
     7c4:	1ac0      	subs	r0, r0, r3
     7c6:	4152      	adcs	r2, r2
     7c8:	1a41      	subs	r1, r0, r1
     7ca:	d200      	bcs.n	7ce <__aeabi_idiv+0xfe>
     7cc:	4601      	mov	r1, r0
     7ce:	4152      	adcs	r2, r2
     7d0:	4610      	mov	r0, r2
     7d2:	4770      	bx	lr
     7d4:	e05d      	b.n	892 <__aeabi_idiv+0x1c2>
     7d6:	0fca      	lsrs	r2, r1, #31
     7d8:	d000      	beq.n	7dc <__aeabi_idiv+0x10c>
     7da:	4249      	negs	r1, r1
     7dc:	1003      	asrs	r3, r0, #32
     7de:	d300      	bcc.n	7e2 <__aeabi_idiv+0x112>
     7e0:	4240      	negs	r0, r0
     7e2:	4053      	eors	r3, r2
     7e4:	2200      	movs	r2, #0
     7e6:	469c      	mov	ip, r3
     7e8:	0903      	lsrs	r3, r0, #4
     7ea:	428b      	cmp	r3, r1
     7ec:	d32d      	bcc.n	84a <__aeabi_idiv+0x17a>
     7ee:	0a03      	lsrs	r3, r0, #8
     7f0:	428b      	cmp	r3, r1
     7f2:	d312      	bcc.n	81a <__aeabi_idiv+0x14a>
     7f4:	22fc      	movs	r2, #252	; 0xfc
     7f6:	0189      	lsls	r1, r1, #6
     7f8:	ba12      	rev	r2, r2
     7fa:	0a03      	lsrs	r3, r0, #8
     7fc:	428b      	cmp	r3, r1
     7fe:	d30c      	bcc.n	81a <__aeabi_idiv+0x14a>
     800:	0189      	lsls	r1, r1, #6
     802:	1192      	asrs	r2, r2, #6
     804:	428b      	cmp	r3, r1
     806:	d308      	bcc.n	81a <__aeabi_idiv+0x14a>
     808:	0189      	lsls	r1, r1, #6
     80a:	1192      	asrs	r2, r2, #6
     80c:	428b      	cmp	r3, r1
     80e:	d304      	bcc.n	81a <__aeabi_idiv+0x14a>
     810:	0189      	lsls	r1, r1, #6
     812:	d03a      	beq.n	88a <__aeabi_idiv+0x1ba>
     814:	1192      	asrs	r2, r2, #6
     816:	e000      	b.n	81a <__aeabi_idiv+0x14a>
     818:	0989      	lsrs	r1, r1, #6
     81a:	09c3      	lsrs	r3, r0, #7
     81c:	428b      	cmp	r3, r1
     81e:	d301      	bcc.n	824 <__aeabi_idiv+0x154>
     820:	01cb      	lsls	r3, r1, #7
     822:	1ac0      	subs	r0, r0, r3
     824:	4152      	adcs	r2, r2
     826:	0983      	lsrs	r3, r0, #6
     828:	428b      	cmp	r3, r1
     82a:	d301      	bcc.n	830 <__aeabi_idiv+0x160>
     82c:	018b      	lsls	r3, r1, #6
     82e:	1ac0      	subs	r0, r0, r3
     830:	4152      	adcs	r2, r2
     832:	0943      	lsrs	r3, r0, #5
     834:	428b      	cmp	r3, r1
     836:	d301      	bcc.n	83c <__aeabi_idiv+0x16c>
     838:	014b      	lsls	r3, r1, #5
     83a:	1ac0      	subs	r0, r0, r3
     83c:	4152      	adcs	r2, r2
     83e:	0903      	lsrs	r3, r0, #4
     840:	428b      	cmp	r3, r1
     842:	d301      	bcc.n	848 <__aeabi_idiv+0x178>
     844:	010b      	lsls	r3, r1, #4
     846:	1ac0      	subs	r0, r0, r3
     848:	4152      	adcs	r2, r2
     84a:	08c3      	lsrs	r3, r0, #3
     84c:	428b      	cmp	r3, r1
     84e:	d301      	bcc.n	854 <__aeabi_idiv+0x184>
     850:	00cb      	lsls	r3, r1, #3
     852:	1ac0      	subs	r0, r0, r3
     854:	4152      	adcs	r2, r2
     856:	0883      	lsrs	r3, r0, #2
     858:	428b      	cmp	r3, r1
     85a:	d301      	bcc.n	860 <__aeabi_idiv+0x190>
     85c:	008b      	lsls	r3, r1, #2
     85e:	1ac0      	subs	r0, r0, r3
     860:	4152      	adcs	r2, r2
     862:	d2d9      	bcs.n	818 <__aeabi_idiv+0x148>
     864:	0843      	lsrs	r3, r0, #1
     866:	428b      	cmp	r3, r1
     868:	d301      	bcc.n	86e <__aeabi_idiv+0x19e>
     86a:	004b      	lsls	r3, r1, #1
     86c:	1ac0      	subs	r0, r0, r3
     86e:	4152      	adcs	r2, r2
     870:	1a41      	subs	r1, r0, r1
     872:	d200      	bcs.n	876 <__aeabi_idiv+0x1a6>
     874:	4601      	mov	r1, r0
     876:	4663      	mov	r3, ip
     878:	4152      	adcs	r2, r2
     87a:	105b      	asrs	r3, r3, #1
     87c:	4610      	mov	r0, r2
     87e:	d301      	bcc.n	884 <__aeabi_idiv+0x1b4>
     880:	4240      	negs	r0, r0
     882:	2b00      	cmp	r3, #0
     884:	d500      	bpl.n	888 <__aeabi_idiv+0x1b8>
     886:	4249      	negs	r1, r1
     888:	4770      	bx	lr
     88a:	4663      	mov	r3, ip
     88c:	105b      	asrs	r3, r3, #1
     88e:	d300      	bcc.n	892 <__aeabi_idiv+0x1c2>
     890:	4240      	negs	r0, r0
     892:	b501      	push	{r0, lr}
     894:	2000      	movs	r0, #0
     896:	f000 f80b 	bl	8b0 <__aeabi_idiv0>
     89a:	bd02      	pop	{r1, pc}

0000089c <__aeabi_idivmod>:
     89c:	2900      	cmp	r1, #0
     89e:	d0f8      	beq.n	892 <__aeabi_idiv+0x1c2>
     8a0:	b503      	push	{r0, r1, lr}
     8a2:	f7ff ff15 	bl	6d0 <__aeabi_idiv>
     8a6:	bc0e      	pop	{r1, r2, r3}
     8a8:	4342      	muls	r2, r0
     8aa:	1a89      	subs	r1, r1, r2
     8ac:	4718      	bx	r3
     8ae:	46c0      	nop			; (mov r8, r8)

000008b0 <__aeabi_idiv0>:
     8b0:	4770      	bx	lr
     8b2:	46c0      	nop			; (mov r8, r8)
	...

000008c0 <__aeabi_llsr>:
     8c0:	40d0      	lsrs	r0, r2
     8c2:	1c0b      	adds	r3, r1, #0
     8c4:	40d1      	lsrs	r1, r2
     8c6:	469c      	mov	ip, r3
     8c8:	3a20      	subs	r2, #32
     8ca:	40d3      	lsrs	r3, r2
     8cc:	4318      	orrs	r0, r3
     8ce:	4252      	negs	r2, r2
     8d0:	4663      	mov	r3, ip
     8d2:	4093      	lsls	r3, r2
     8d4:	4318      	orrs	r0, r3
     8d6:	4770      	bx	lr
	...

000008e0 <__aeabi_lasr>:
     8e0:	40d0      	lsrs	r0, r2
     8e2:	1c0b      	adds	r3, r1, #0
     8e4:	4111      	asrs	r1, r2
     8e6:	3a20      	subs	r2, #32
     8e8:	d403      	bmi.n	8f2 <__aeabi_lasr+0x12>
     8ea:	469c      	mov	ip, r3
     8ec:	4113      	asrs	r3, r2
     8ee:	4318      	orrs	r0, r3
     8f0:	4663      	mov	r3, ip
     8f2:	4252      	negs	r2, r2
     8f4:	4093      	lsls	r3, r2
     8f6:	4318      	orrs	r0, r3
     8f8:	4770      	bx	lr
     8fa:	46c0      	nop			; (mov r8, r8)
     8fc:	0000      	movs	r0, r0
	...

00000900 <__aeabi_llsl>:
     900:	4091      	lsls	r1, r2
     902:	1c03      	adds	r3, r0, #0
     904:	4090      	lsls	r0, r2
     906:	469c      	mov	ip, r3
     908:	3a20      	subs	r2, #32
     90a:	4093      	lsls	r3, r2
     90c:	4319      	orrs	r1, r3
     90e:	4252      	negs	r2, r2
     910:	4663      	mov	r3, ip
     912:	40d3      	lsrs	r3, r2
     914:	4319      	orrs	r1, r3
     916:	4770      	bx	lr
	...

00000920 <__aeabi_cdrcmple>:
     920:	4684      	mov	ip, r0
     922:	1c10      	adds	r0, r2, #0
     924:	4662      	mov	r2, ip
     926:	468c      	mov	ip, r1
     928:	1c19      	adds	r1, r3, #0
     92a:	4663      	mov	r3, ip
     92c:	e000      	b.n	930 <__aeabi_cdcmpeq>
     92e:	46c0      	nop			; (mov r8, r8)

00000930 <__aeabi_cdcmpeq>:
     930:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     932:	f000 f9bd 	bl	cb0 <__ledf2>
     936:	2800      	cmp	r0, #0
     938:	d401      	bmi.n	93e <__aeabi_cdcmpeq+0xe>
     93a:	2100      	movs	r1, #0
     93c:	42c8      	cmn	r0, r1
     93e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00000940 <__aeabi_dcmpeq>:
     940:	b510      	push	{r4, lr}
     942:	f000 f8fd 	bl	b40 <__eqdf2>
     946:	4240      	negs	r0, r0
     948:	3001      	adds	r0, #1
     94a:	bd10      	pop	{r4, pc}

0000094c <__aeabi_dcmplt>:
     94c:	b510      	push	{r4, lr}
     94e:	f000 f9af 	bl	cb0 <__ledf2>
     952:	2800      	cmp	r0, #0
     954:	db01      	blt.n	95a <__aeabi_dcmplt+0xe>
     956:	2000      	movs	r0, #0
     958:	bd10      	pop	{r4, pc}
     95a:	2001      	movs	r0, #1
     95c:	bd10      	pop	{r4, pc}
     95e:	46c0      	nop			; (mov r8, r8)

00000960 <__aeabi_dcmple>:
     960:	b510      	push	{r4, lr}
     962:	f000 f9a5 	bl	cb0 <__ledf2>
     966:	2800      	cmp	r0, #0
     968:	dd01      	ble.n	96e <__aeabi_dcmple+0xe>
     96a:	2000      	movs	r0, #0
     96c:	bd10      	pop	{r4, pc}
     96e:	2001      	movs	r0, #1
     970:	bd10      	pop	{r4, pc}
     972:	46c0      	nop			; (mov r8, r8)

00000974 <__aeabi_dcmpgt>:
     974:	b510      	push	{r4, lr}
     976:	f000 f92b 	bl	bd0 <__gedf2>
     97a:	2800      	cmp	r0, #0
     97c:	dc01      	bgt.n	982 <__aeabi_dcmpgt+0xe>
     97e:	2000      	movs	r0, #0
     980:	bd10      	pop	{r4, pc}
     982:	2001      	movs	r0, #1
     984:	bd10      	pop	{r4, pc}
     986:	46c0      	nop			; (mov r8, r8)

00000988 <__aeabi_dcmpge>:
     988:	b510      	push	{r4, lr}
     98a:	f000 f921 	bl	bd0 <__gedf2>
     98e:	2800      	cmp	r0, #0
     990:	da01      	bge.n	996 <__aeabi_dcmpge+0xe>
     992:	2000      	movs	r0, #0
     994:	bd10      	pop	{r4, pc}
     996:	2001      	movs	r0, #1
     998:	bd10      	pop	{r4, pc}
     99a:	46c0      	nop			; (mov r8, r8)
     99c:	0000      	movs	r0, r0
	...

000009a0 <__aeabi_ldivmod>:
     9a0:	2b00      	cmp	r3, #0
     9a2:	d115      	bne.n	9d0 <__aeabi_ldivmod+0x30>
     9a4:	2a00      	cmp	r2, #0
     9a6:	d113      	bne.n	9d0 <__aeabi_ldivmod+0x30>
     9a8:	2900      	cmp	r1, #0
     9aa:	d100      	bne.n	9ae <__aeabi_ldivmod+0xe>
     9ac:	2800      	cmp	r0, #0
     9ae:	d007      	beq.n	9c0 <__aeabi_ldivmod+0x20>
     9b0:	db03      	blt.n	9ba <__aeabi_ldivmod+0x1a>
     9b2:	2000      	movs	r0, #0
     9b4:	43c0      	mvns	r0, r0
     9b6:	0841      	lsrs	r1, r0, #1
     9b8:	e002      	b.n	9c0 <__aeabi_ldivmod+0x20>
     9ba:	2180      	movs	r1, #128	; 0x80
     9bc:	0609      	lsls	r1, r1, #24
     9be:	2000      	movs	r0, #0
     9c0:	b407      	push	{r0, r1, r2}
     9c2:	4802      	ldr	r0, [pc, #8]	; (9cc <__aeabi_ldivmod+0x2c>)
     9c4:	a101      	add	r1, pc, #4	; (adr r1, 9cc <__aeabi_ldivmod+0x2c>)
     9c6:	1840      	adds	r0, r0, r1
     9c8:	9002      	str	r0, [sp, #8]
     9ca:	bd03      	pop	{r0, r1, pc}
     9cc:	fffffee5 	.word	0xfffffee5
     9d0:	b403      	push	{r0, r1}
     9d2:	4668      	mov	r0, sp
     9d4:	b501      	push	{r0, lr}
     9d6:	9802      	ldr	r0, [sp, #8]
     9d8:	f000 f87a 	bl	ad0 <__gnu_ldivmod_helper>
     9dc:	9b01      	ldr	r3, [sp, #4]
     9de:	469e      	mov	lr, r3
     9e0:	b002      	add	sp, #8
     9e2:	bc0c      	pop	{r2, r3}
     9e4:	4770      	bx	lr
     9e6:	46c0      	nop			; (mov r8, r8)
	...

000009f0 <__aeabi_uldivmod>:
     9f0:	2b00      	cmp	r3, #0
     9f2:	d111      	bne.n	a18 <__aeabi_uldivmod+0x28>
     9f4:	2a00      	cmp	r2, #0
     9f6:	d10f      	bne.n	a18 <__aeabi_uldivmod+0x28>
     9f8:	2900      	cmp	r1, #0
     9fa:	d100      	bne.n	9fe <__aeabi_uldivmod+0xe>
     9fc:	2800      	cmp	r0, #0
     9fe:	d002      	beq.n	a06 <__aeabi_uldivmod+0x16>
     a00:	2100      	movs	r1, #0
     a02:	43c9      	mvns	r1, r1
     a04:	1c08      	adds	r0, r1, #0
     a06:	b407      	push	{r0, r1, r2}
     a08:	4802      	ldr	r0, [pc, #8]	; (a14 <__aeabi_uldivmod+0x24>)
     a0a:	a102      	add	r1, pc, #8	; (adr r1, a14 <__aeabi_uldivmod+0x24>)
     a0c:	1840      	adds	r0, r0, r1
     a0e:	9002      	str	r0, [sp, #8]
     a10:	bd03      	pop	{r0, r1, pc}
     a12:	46c0      	nop			; (mov r8, r8)
     a14:	fffffe9d 	.word	0xfffffe9d
     a18:	b403      	push	{r0, r1}
     a1a:	4668      	mov	r0, sp
     a1c:	b501      	push	{r0, lr}
     a1e:	9802      	ldr	r0, [sp, #8]
     a20:	f000 f872 	bl	b08 <__gnu_uldivmod_helper>
     a24:	9b01      	ldr	r3, [sp, #4]
     a26:	469e      	mov	lr, r3
     a28:	b002      	add	sp, #8
     a2a:	bc0c      	pop	{r2, r3}
     a2c:	4770      	bx	lr
     a2e:	46c0      	nop			; (mov r8, r8)

00000a30 <__aeabi_lmul>:
     a30:	b5f0      	push	{r4, r5, r6, r7, lr}
     a32:	464f      	mov	r7, r9
     a34:	4646      	mov	r6, r8
     a36:	0405      	lsls	r5, r0, #16
     a38:	0c2d      	lsrs	r5, r5, #16
     a3a:	1c2c      	adds	r4, r5, #0
     a3c:	b4c0      	push	{r6, r7}
     a3e:	0417      	lsls	r7, r2, #16
     a40:	0c16      	lsrs	r6, r2, #16
     a42:	0c3f      	lsrs	r7, r7, #16
     a44:	4699      	mov	r9, r3
     a46:	0c03      	lsrs	r3, r0, #16
     a48:	437c      	muls	r4, r7
     a4a:	4375      	muls	r5, r6
     a4c:	435f      	muls	r7, r3
     a4e:	4373      	muls	r3, r6
     a50:	197d      	adds	r5, r7, r5
     a52:	0c26      	lsrs	r6, r4, #16
     a54:	19ad      	adds	r5, r5, r6
     a56:	469c      	mov	ip, r3
     a58:	42af      	cmp	r7, r5
     a5a:	d903      	bls.n	a64 <__aeabi_lmul+0x34>
     a5c:	2380      	movs	r3, #128	; 0x80
     a5e:	025b      	lsls	r3, r3, #9
     a60:	4698      	mov	r8, r3
     a62:	44c4      	add	ip, r8
     a64:	464b      	mov	r3, r9
     a66:	4351      	muls	r1, r2
     a68:	4343      	muls	r3, r0
     a6a:	0424      	lsls	r4, r4, #16
     a6c:	0c2e      	lsrs	r6, r5, #16
     a6e:	0c24      	lsrs	r4, r4, #16
     a70:	042d      	lsls	r5, r5, #16
     a72:	4466      	add	r6, ip
     a74:	192c      	adds	r4, r5, r4
     a76:	1859      	adds	r1, r3, r1
     a78:	1989      	adds	r1, r1, r6
     a7a:	1c20      	adds	r0, r4, #0
     a7c:	bc0c      	pop	{r2, r3}
     a7e:	4690      	mov	r8, r2
     a80:	4699      	mov	r9, r3
     a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00000a90 <__popcountsi2>:
     a90:	4b09      	ldr	r3, [pc, #36]	; (ab8 <__popcountsi2+0x28>)
     a92:	0842      	lsrs	r2, r0, #1
     a94:	4013      	ands	r3, r2
     a96:	1ac0      	subs	r0, r0, r3
     a98:	1c02      	adds	r2, r0, #0
     a9a:	4b08      	ldr	r3, [pc, #32]	; (abc <__popcountsi2+0x2c>)
     a9c:	0880      	lsrs	r0, r0, #2
     a9e:	401a      	ands	r2, r3
     aa0:	4018      	ands	r0, r3
     aa2:	1880      	adds	r0, r0, r2
     aa4:	0903      	lsrs	r3, r0, #4
     aa6:	4a06      	ldr	r2, [pc, #24]	; (ac0 <__popcountsi2+0x30>)
     aa8:	181b      	adds	r3, r3, r0
     aaa:	4013      	ands	r3, r2
     aac:	0218      	lsls	r0, r3, #8
     aae:	18c3      	adds	r3, r0, r3
     ab0:	0418      	lsls	r0, r3, #16
     ab2:	1818      	adds	r0, r3, r0
     ab4:	0e00      	lsrs	r0, r0, #24
     ab6:	4770      	bx	lr
     ab8:	55555555 	.word	0x55555555
     abc:	33333333 	.word	0x33333333
     ac0:	0f0f0f0f 	.word	0x0f0f0f0f
	...

00000ad0 <__gnu_ldivmod_helper>:
     ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ad2:	b083      	sub	sp, #12
     ad4:	1c16      	adds	r6, r2, #0
     ad6:	1c1f      	adds	r7, r3, #0
     ad8:	9000      	str	r0, [sp, #0]
     ada:	9101      	str	r1, [sp, #4]
     adc:	f000 f950 	bl	d80 <__divdi3>
     ae0:	1c04      	adds	r4, r0, #0
     ae2:	1c0d      	adds	r5, r1, #0
     ae4:	1c22      	adds	r2, r4, #0
     ae6:	1c2b      	adds	r3, r5, #0
     ae8:	1c30      	adds	r0, r6, #0
     aea:	1c39      	adds	r1, r7, #0
     aec:	f7ff ffa0 	bl	a30 <__aeabi_lmul>
     af0:	9a00      	ldr	r2, [sp, #0]
     af2:	9b01      	ldr	r3, [sp, #4]
     af4:	1a12      	subs	r2, r2, r0
     af6:	418b      	sbcs	r3, r1
     af8:	9908      	ldr	r1, [sp, #32]
     afa:	1c20      	adds	r0, r4, #0
     afc:	600a      	str	r2, [r1, #0]
     afe:	604b      	str	r3, [r1, #4]
     b00:	1c29      	adds	r1, r5, #0
     b02:	b003      	add	sp, #12
     b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b06:	46c0      	nop			; (mov r8, r8)

00000b08 <__gnu_uldivmod_helper>:
     b08:	b5f0      	push	{r4, r5, r6, r7, lr}
     b0a:	1c14      	adds	r4, r2, #0
     b0c:	b083      	sub	sp, #12
     b0e:	1c1d      	adds	r5, r3, #0
     b10:	9000      	str	r0, [sp, #0]
     b12:	9101      	str	r1, [sp, #4]
     b14:	f000 fa2c 	bl	f70 <__udivdi3>
     b18:	1c22      	adds	r2, r4, #0
     b1a:	1c2b      	adds	r3, r5, #0
     b1c:	1c06      	adds	r6, r0, #0
     b1e:	1c0f      	adds	r7, r1, #0
     b20:	f7ff ff86 	bl	a30 <__aeabi_lmul>
     b24:	9a00      	ldr	r2, [sp, #0]
     b26:	9b01      	ldr	r3, [sp, #4]
     b28:	1a12      	subs	r2, r2, r0
     b2a:	418b      	sbcs	r3, r1
     b2c:	9908      	ldr	r1, [sp, #32]
     b2e:	1c30      	adds	r0, r6, #0
     b30:	600a      	str	r2, [r1, #0]
     b32:	604b      	str	r3, [r1, #4]
     b34:	1c39      	adds	r1, r7, #0
     b36:	b003      	add	sp, #12
     b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b3a:	46c0      	nop			; (mov r8, r8)
     b3c:	0000      	movs	r0, r0
	...

00000b40 <__eqdf2>:
     b40:	b5f0      	push	{r4, r5, r6, r7, lr}
     b42:	465f      	mov	r7, fp
     b44:	464d      	mov	r5, r9
     b46:	4644      	mov	r4, r8
     b48:	4656      	mov	r6, sl
     b4a:	b4f0      	push	{r4, r5, r6, r7}
     b4c:	031f      	lsls	r7, r3, #12
     b4e:	005c      	lsls	r4, r3, #1
     b50:	0fdb      	lsrs	r3, r3, #31
     b52:	4699      	mov	r9, r3
     b54:	4b1b      	ldr	r3, [pc, #108]	; (bc4 <__eqdf2+0x84>)
     b56:	030e      	lsls	r6, r1, #12
     b58:	004d      	lsls	r5, r1, #1
     b5a:	0fc9      	lsrs	r1, r1, #31
     b5c:	4684      	mov	ip, r0
     b5e:	0b36      	lsrs	r6, r6, #12
     b60:	0d6d      	lsrs	r5, r5, #21
     b62:	468b      	mov	fp, r1
     b64:	4690      	mov	r8, r2
     b66:	0b3f      	lsrs	r7, r7, #12
     b68:	0d64      	lsrs	r4, r4, #21
     b6a:	429d      	cmp	r5, r3
     b6c:	d00c      	beq.n	b88 <__eqdf2+0x48>
     b6e:	4b15      	ldr	r3, [pc, #84]	; (bc4 <__eqdf2+0x84>)
     b70:	429c      	cmp	r4, r3
     b72:	d010      	beq.n	b96 <__eqdf2+0x56>
     b74:	2301      	movs	r3, #1
     b76:	42a5      	cmp	r5, r4
     b78:	d014      	beq.n	ba4 <__eqdf2+0x64>
     b7a:	1c18      	adds	r0, r3, #0
     b7c:	bc3c      	pop	{r2, r3, r4, r5}
     b7e:	4690      	mov	r8, r2
     b80:	4699      	mov	r9, r3
     b82:	46a2      	mov	sl, r4
     b84:	46ab      	mov	fp, r5
     b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b88:	1c31      	adds	r1, r6, #0
     b8a:	2301      	movs	r3, #1
     b8c:	4301      	orrs	r1, r0
     b8e:	d1f4      	bne.n	b7a <__eqdf2+0x3a>
     b90:	4b0c      	ldr	r3, [pc, #48]	; (bc4 <__eqdf2+0x84>)
     b92:	429c      	cmp	r4, r3
     b94:	d1ee      	bne.n	b74 <__eqdf2+0x34>
     b96:	433a      	orrs	r2, r7
     b98:	2301      	movs	r3, #1
     b9a:	2a00      	cmp	r2, #0
     b9c:	d1ed      	bne.n	b7a <__eqdf2+0x3a>
     b9e:	2301      	movs	r3, #1
     ba0:	42a5      	cmp	r5, r4
     ba2:	d1ea      	bne.n	b7a <__eqdf2+0x3a>
     ba4:	42be      	cmp	r6, r7
     ba6:	d1e8      	bne.n	b7a <__eqdf2+0x3a>
     ba8:	45c4      	cmp	ip, r8
     baa:	d1e6      	bne.n	b7a <__eqdf2+0x3a>
     bac:	45cb      	cmp	fp, r9
     bae:	d006      	beq.n	bbe <__eqdf2+0x7e>
     bb0:	2d00      	cmp	r5, #0
     bb2:	d1e2      	bne.n	b7a <__eqdf2+0x3a>
     bb4:	4330      	orrs	r0, r6
     bb6:	1c03      	adds	r3, r0, #0
     bb8:	1e58      	subs	r0, r3, #1
     bba:	4183      	sbcs	r3, r0
     bbc:	e7dd      	b.n	b7a <__eqdf2+0x3a>
     bbe:	2300      	movs	r3, #0
     bc0:	e7db      	b.n	b7a <__eqdf2+0x3a>
     bc2:	46c0      	nop			; (mov r8, r8)
     bc4:	000007ff 	.word	0x000007ff
	...

00000bd0 <__gedf2>:
     bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
     bd2:	4657      	mov	r7, sl
     bd4:	4645      	mov	r5, r8
     bd6:	464e      	mov	r6, r9
     bd8:	b4e0      	push	{r5, r6, r7}
     bda:	030f      	lsls	r7, r1, #12
     bdc:	004e      	lsls	r6, r1, #1
     bde:	0fc9      	lsrs	r1, r1, #31
     be0:	468a      	mov	sl, r1
     be2:	4932      	ldr	r1, [pc, #200]	; (cac <__gedf2+0xdc>)
     be4:	031d      	lsls	r5, r3, #12
     be6:	005c      	lsls	r4, r3, #1
     be8:	4684      	mov	ip, r0
     bea:	0b3f      	lsrs	r7, r7, #12
     bec:	0d76      	lsrs	r6, r6, #21
     bee:	4690      	mov	r8, r2
     bf0:	0b2d      	lsrs	r5, r5, #12
     bf2:	0d64      	lsrs	r4, r4, #21
     bf4:	0fdb      	lsrs	r3, r3, #31
     bf6:	428e      	cmp	r6, r1
     bf8:	d00f      	beq.n	c1a <__gedf2+0x4a>
     bfa:	428c      	cmp	r4, r1
     bfc:	d039      	beq.n	c72 <__gedf2+0xa2>
     bfe:	2e00      	cmp	r6, #0
     c00:	d110      	bne.n	c24 <__gedf2+0x54>
     c02:	4338      	orrs	r0, r7
     c04:	4241      	negs	r1, r0
     c06:	4141      	adcs	r1, r0
     c08:	4689      	mov	r9, r1
     c0a:	2c00      	cmp	r4, #0
     c0c:	d127      	bne.n	c5e <__gedf2+0x8e>
     c0e:	432a      	orrs	r2, r5
     c10:	d125      	bne.n	c5e <__gedf2+0x8e>
     c12:	2000      	movs	r0, #0
     c14:	2900      	cmp	r1, #0
     c16:	d10e      	bne.n	c36 <__gedf2+0x66>
     c18:	e008      	b.n	c2c <__gedf2+0x5c>
     c1a:	1c39      	adds	r1, r7, #0
     c1c:	4301      	orrs	r1, r0
     c1e:	d12e      	bne.n	c7e <__gedf2+0xae>
     c20:	42b4      	cmp	r4, r6
     c22:	d026      	beq.n	c72 <__gedf2+0xa2>
     c24:	2c00      	cmp	r4, #0
     c26:	d00b      	beq.n	c40 <__gedf2+0x70>
     c28:	459a      	cmp	sl, r3
     c2a:	d00d      	beq.n	c48 <__gedf2+0x78>
     c2c:	4653      	mov	r3, sl
     c2e:	4259      	negs	r1, r3
     c30:	2301      	movs	r3, #1
     c32:	4319      	orrs	r1, r3
     c34:	1c08      	adds	r0, r1, #0
     c36:	bc1c      	pop	{r2, r3, r4}
     c38:	4690      	mov	r8, r2
     c3a:	4699      	mov	r9, r3
     c3c:	46a2      	mov	sl, r4
     c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c40:	432a      	orrs	r2, r5
     c42:	d0f3      	beq.n	c2c <__gedf2+0x5c>
     c44:	459a      	cmp	sl, r3
     c46:	d1f1      	bne.n	c2c <__gedf2+0x5c>
     c48:	42a6      	cmp	r6, r4
     c4a:	dcef      	bgt.n	c2c <__gedf2+0x5c>
     c4c:	da1a      	bge.n	c84 <__gedf2+0xb4>
     c4e:	4650      	mov	r0, sl
     c50:	4241      	negs	r1, r0
     c52:	4148      	adcs	r0, r1
     c54:	2301      	movs	r3, #1
     c56:	4241      	negs	r1, r0
     c58:	4319      	orrs	r1, r3
     c5a:	1c08      	adds	r0, r1, #0
     c5c:	e7eb      	b.n	c36 <__gedf2+0x66>
     c5e:	464a      	mov	r2, r9
     c60:	2a00      	cmp	r2, #0
     c62:	d0e1      	beq.n	c28 <__gedf2+0x58>
     c64:	4258      	negs	r0, r3
     c66:	4158      	adcs	r0, r3
     c68:	2201      	movs	r2, #1
     c6a:	4241      	negs	r1, r0
     c6c:	4311      	orrs	r1, r2
     c6e:	1c08      	adds	r0, r1, #0
     c70:	e7e1      	b.n	c36 <__gedf2+0x66>
     c72:	1c29      	adds	r1, r5, #0
     c74:	4311      	orrs	r1, r2
     c76:	d102      	bne.n	c7e <__gedf2+0xae>
     c78:	2e00      	cmp	r6, #0
     c7a:	d0c2      	beq.n	c02 <__gedf2+0x32>
     c7c:	e7d4      	b.n	c28 <__gedf2+0x58>
     c7e:	2002      	movs	r0, #2
     c80:	4240      	negs	r0, r0
     c82:	e7d8      	b.n	c36 <__gedf2+0x66>
     c84:	42af      	cmp	r7, r5
     c86:	d8d1      	bhi.n	c2c <__gedf2+0x5c>
     c88:	d009      	beq.n	c9e <__gedf2+0xce>
     c8a:	2000      	movs	r0, #0
     c8c:	42af      	cmp	r7, r5
     c8e:	d2d2      	bcs.n	c36 <__gedf2+0x66>
     c90:	4650      	mov	r0, sl
     c92:	4241      	negs	r1, r0
     c94:	4148      	adcs	r0, r1
     c96:	2301      	movs	r3, #1
     c98:	4240      	negs	r0, r0
     c9a:	4318      	orrs	r0, r3
     c9c:	e7cb      	b.n	c36 <__gedf2+0x66>
     c9e:	45c4      	cmp	ip, r8
     ca0:	d8c4      	bhi.n	c2c <__gedf2+0x5c>
     ca2:	2000      	movs	r0, #0
     ca4:	45c4      	cmp	ip, r8
     ca6:	d3f3      	bcc.n	c90 <__gedf2+0xc0>
     ca8:	e7c5      	b.n	c36 <__gedf2+0x66>
     caa:	46c0      	nop			; (mov r8, r8)
     cac:	000007ff 	.word	0x000007ff

00000cb0 <__ledf2>:
     cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
     cb2:	465f      	mov	r7, fp
     cb4:	464d      	mov	r5, r9
     cb6:	4644      	mov	r4, r8
     cb8:	4656      	mov	r6, sl
     cba:	4680      	mov	r8, r0
     cbc:	b4f0      	push	{r4, r5, r6, r7}
     cbe:	1c06      	adds	r6, r0, #0
     cc0:	0308      	lsls	r0, r1, #12
     cc2:	0b00      	lsrs	r0, r0, #12
     cc4:	4684      	mov	ip, r0
     cc6:	482c      	ldr	r0, [pc, #176]	; (d78 <__ledf2+0xc8>)
     cc8:	004c      	lsls	r4, r1, #1
     cca:	031f      	lsls	r7, r3, #12
     ccc:	005d      	lsls	r5, r3, #1
     cce:	0fc9      	lsrs	r1, r1, #31
     cd0:	0d64      	lsrs	r4, r4, #21
     cd2:	468b      	mov	fp, r1
     cd4:	4691      	mov	r9, r2
     cd6:	0b3f      	lsrs	r7, r7, #12
     cd8:	0d6d      	lsrs	r5, r5, #21
     cda:	0fdb      	lsrs	r3, r3, #31
     cdc:	4284      	cmp	r4, r0
     cde:	d012      	beq.n	d06 <__ledf2+0x56>
     ce0:	4285      	cmp	r5, r0
     ce2:	d025      	beq.n	d30 <__ledf2+0x80>
     ce4:	2c00      	cmp	r4, #0
     ce6:	d114      	bne.n	d12 <__ledf2+0x62>
     ce8:	4661      	mov	r1, ip
     cea:	430e      	orrs	r6, r1
     cec:	4270      	negs	r0, r6
     cee:	4146      	adcs	r6, r0
     cf0:	2d00      	cmp	r5, #0
     cf2:	d035      	beq.n	d60 <__ledf2+0xb0>
     cf4:	2e00      	cmp	r6, #0
     cf6:	d021      	beq.n	d3c <__ledf2+0x8c>
     cf8:	4258      	negs	r0, r3
     cfa:	4158      	adcs	r0, r3
     cfc:	2101      	movs	r1, #1
     cfe:	4243      	negs	r3, r0
     d00:	430b      	orrs	r3, r1
     d02:	1c18      	adds	r0, r3, #0
     d04:	e00e      	b.n	d24 <__ledf2+0x74>
     d06:	4661      	mov	r1, ip
     d08:	2002      	movs	r0, #2
     d0a:	4331      	orrs	r1, r6
     d0c:	d10a      	bne.n	d24 <__ledf2+0x74>
     d0e:	42a5      	cmp	r5, r4
     d10:	d00e      	beq.n	d30 <__ledf2+0x80>
     d12:	2d00      	cmp	r5, #0
     d14:	d112      	bne.n	d3c <__ledf2+0x8c>
     d16:	433a      	orrs	r2, r7
     d18:	d110      	bne.n	d3c <__ledf2+0x8c>
     d1a:	465b      	mov	r3, fp
     d1c:	4259      	negs	r1, r3
     d1e:	2301      	movs	r3, #1
     d20:	4319      	orrs	r1, r3
     d22:	1c08      	adds	r0, r1, #0
     d24:	bc3c      	pop	{r2, r3, r4, r5}
     d26:	4690      	mov	r8, r2
     d28:	4699      	mov	r9, r3
     d2a:	46a2      	mov	sl, r4
     d2c:	46ab      	mov	fp, r5
     d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d30:	1c39      	adds	r1, r7, #0
     d32:	2002      	movs	r0, #2
     d34:	4311      	orrs	r1, r2
     d36:	d1f5      	bne.n	d24 <__ledf2+0x74>
     d38:	2c00      	cmp	r4, #0
     d3a:	d0d5      	beq.n	ce8 <__ledf2+0x38>
     d3c:	459b      	cmp	fp, r3
     d3e:	d1ec      	bne.n	d1a <__ledf2+0x6a>
     d40:	42ac      	cmp	r4, r5
     d42:	dcea      	bgt.n	d1a <__ledf2+0x6a>
     d44:	db05      	blt.n	d52 <__ledf2+0xa2>
     d46:	45bc      	cmp	ip, r7
     d48:	d8e7      	bhi.n	d1a <__ledf2+0x6a>
     d4a:	d00f      	beq.n	d6c <__ledf2+0xbc>
     d4c:	2000      	movs	r0, #0
     d4e:	45bc      	cmp	ip, r7
     d50:	d2e8      	bcs.n	d24 <__ledf2+0x74>
     d52:	4658      	mov	r0, fp
     d54:	4241      	negs	r1, r0
     d56:	4148      	adcs	r0, r1
     d58:	4241      	negs	r1, r0
     d5a:	2001      	movs	r0, #1
     d5c:	4308      	orrs	r0, r1
     d5e:	e7e1      	b.n	d24 <__ledf2+0x74>
     d60:	433a      	orrs	r2, r7
     d62:	d1c7      	bne.n	cf4 <__ledf2+0x44>
     d64:	2000      	movs	r0, #0
     d66:	2e00      	cmp	r6, #0
     d68:	d1dc      	bne.n	d24 <__ledf2+0x74>
     d6a:	e7d6      	b.n	d1a <__ledf2+0x6a>
     d6c:	45c8      	cmp	r8, r9
     d6e:	d8d4      	bhi.n	d1a <__ledf2+0x6a>
     d70:	2000      	movs	r0, #0
     d72:	45c8      	cmp	r8, r9
     d74:	d3ed      	bcc.n	d52 <__ledf2+0xa2>
     d76:	e7d5      	b.n	d24 <__ledf2+0x74>
     d78:	000007ff 	.word	0x000007ff
     d7c:	00000000 	.word	0x00000000

00000d80 <__divdi3>:
     d80:	b5f0      	push	{r4, r5, r6, r7, lr}
     d82:	4644      	mov	r4, r8
     d84:	465f      	mov	r7, fp
     d86:	4656      	mov	r6, sl
     d88:	464d      	mov	r5, r9
     d8a:	b4f0      	push	{r4, r5, r6, r7}
     d8c:	1c1c      	adds	r4, r3, #0
     d8e:	b085      	sub	sp, #20
     d90:	2900      	cmp	r1, #0
     d92:	da00      	bge.n	d96 <__divdi3+0x16>
     d94:	e0a9      	b.n	eea <__divdi3+0x16a>
     d96:	1c0f      	adds	r7, r1, #0
     d98:	2100      	movs	r1, #0
     d9a:	1c06      	adds	r6, r0, #0
     d9c:	4688      	mov	r8, r1
     d9e:	1c10      	adds	r0, r2, #0
     da0:	1c19      	adds	r1, r3, #0
     da2:	2c00      	cmp	r4, #0
     da4:	da00      	bge.n	da8 <__divdi3+0x28>
     da6:	e097      	b.n	ed8 <__divdi3+0x158>
     da8:	1c34      	adds	r4, r6, #0
     daa:	1c3d      	adds	r5, r7, #0
     dac:	4682      	mov	sl, r0
     dae:	4689      	mov	r9, r1
     db0:	42b9      	cmp	r1, r7
     db2:	d873      	bhi.n	e9c <__divdi3+0x11c>
     db4:	d070      	beq.n	e98 <__divdi3+0x118>
     db6:	4649      	mov	r1, r9
     db8:	4650      	mov	r0, sl
     dba:	f000 f989 	bl	10d0 <__clzdi2>
     dbe:	4683      	mov	fp, r0
     dc0:	1c39      	adds	r1, r7, #0
     dc2:	1c30      	adds	r0, r6, #0
     dc4:	f000 f984 	bl	10d0 <__clzdi2>
     dc8:	465b      	mov	r3, fp
     dca:	1a18      	subs	r0, r3, r0
     dcc:	1c03      	adds	r3, r0, #0
     dce:	4683      	mov	fp, r0
     dd0:	3b20      	subs	r3, #32
     dd2:	469c      	mov	ip, r3
     dd4:	d500      	bpl.n	dd8 <__divdi3+0x58>
     dd6:	e09c      	b.n	f12 <__divdi3+0x192>
     dd8:	2300      	movs	r3, #0
     dda:	2200      	movs	r2, #0
     ddc:	4651      	mov	r1, sl
     dde:	9200      	str	r2, [sp, #0]
     de0:	9301      	str	r3, [sp, #4]
     de2:	4663      	mov	r3, ip
     de4:	4099      	lsls	r1, r3
     de6:	9101      	str	r1, [sp, #4]
     de8:	4651      	mov	r1, sl
     dea:	4081      	lsls	r1, r0
     dec:	9b01      	ldr	r3, [sp, #4]
     dee:	9100      	str	r1, [sp, #0]
     df0:	42bb      	cmp	r3, r7
     df2:	d900      	bls.n	df6 <__divdi3+0x76>
     df4:	e083      	b.n	efe <__divdi3+0x17e>
     df6:	d100      	bne.n	dfa <__divdi3+0x7a>
     df8:	e07e      	b.n	ef8 <__divdi3+0x178>
     dfa:	9a00      	ldr	r2, [sp, #0]
     dfc:	9b01      	ldr	r3, [sp, #4]
     dfe:	1c34      	adds	r4, r6, #0
     e00:	1c3d      	adds	r5, r7, #0
     e02:	1aa4      	subs	r4, r4, r2
     e04:	419d      	sbcs	r5, r3
     e06:	4663      	mov	r3, ip
     e08:	2b00      	cmp	r3, #0
     e0a:	da00      	bge.n	e0e <__divdi3+0x8e>
     e0c:	e09a      	b.n	f44 <__divdi3+0x1c4>
     e0e:	2600      	movs	r6, #0
     e10:	2700      	movs	r7, #0
     e12:	9602      	str	r6, [sp, #8]
     e14:	9703      	str	r7, [sp, #12]
     e16:	3601      	adds	r6, #1
     e18:	409e      	lsls	r6, r3
     e1a:	9603      	str	r6, [sp, #12]
     e1c:	2601      	movs	r6, #1
     e1e:	4086      	lsls	r6, r0
     e20:	9602      	str	r6, [sp, #8]
     e22:	2800      	cmp	r0, #0
     e24:	d100      	bne.n	e28 <__divdi3+0xa8>
     e26:	e071      	b.n	f0c <__divdi3+0x18c>
     e28:	9900      	ldr	r1, [sp, #0]
     e2a:	9a01      	ldr	r2, [sp, #4]
     e2c:	07d3      	lsls	r3, r2, #31
     e2e:	4699      	mov	r9, r3
     e30:	464b      	mov	r3, r9
     e32:	084e      	lsrs	r6, r1, #1
     e34:	431e      	orrs	r6, r3
     e36:	0857      	lsrs	r7, r2, #1
     e38:	2300      	movs	r3, #0
     e3a:	2201      	movs	r2, #1
     e3c:	e00c      	b.n	e58 <__divdi3+0xd8>
     e3e:	42af      	cmp	r7, r5
     e40:	d101      	bne.n	e46 <__divdi3+0xc6>
     e42:	42a6      	cmp	r6, r4
     e44:	d80a      	bhi.n	e5c <__divdi3+0xdc>
     e46:	1ba4      	subs	r4, r4, r6
     e48:	41bd      	sbcs	r5, r7
     e4a:	1924      	adds	r4, r4, r4
     e4c:	416d      	adcs	r5, r5
     e4e:	3801      	subs	r0, #1
     e50:	18a4      	adds	r4, r4, r2
     e52:	415d      	adcs	r5, r3
     e54:	2800      	cmp	r0, #0
     e56:	d006      	beq.n	e66 <__divdi3+0xe6>
     e58:	42af      	cmp	r7, r5
     e5a:	d9f0      	bls.n	e3e <__divdi3+0xbe>
     e5c:	3801      	subs	r0, #1
     e5e:	1924      	adds	r4, r4, r4
     e60:	416d      	adcs	r5, r5
     e62:	2800      	cmp	r0, #0
     e64:	d1f8      	bne.n	e58 <__divdi3+0xd8>
     e66:	2220      	movs	r2, #32
     e68:	9e02      	ldr	r6, [sp, #8]
     e6a:	9f03      	ldr	r7, [sp, #12]
     e6c:	465b      	mov	r3, fp
     e6e:	4252      	negs	r2, r2
     e70:	1936      	adds	r6, r6, r4
     e72:	416f      	adcs	r7, r5
     e74:	1899      	adds	r1, r3, r2
     e76:	d45a      	bmi.n	f2e <__divdi3+0x1ae>
     e78:	1c28      	adds	r0, r5, #0
     e7a:	40c8      	lsrs	r0, r1
     e7c:	1c2c      	adds	r4, r5, #0
     e7e:	465b      	mov	r3, fp
     e80:	40dc      	lsrs	r4, r3
     e82:	2900      	cmp	r1, #0
     e84:	db68      	blt.n	f58 <__divdi3+0x1d8>
     e86:	1c04      	adds	r4, r0, #0
     e88:	408c      	lsls	r4, r1
     e8a:	1c23      	adds	r3, r4, #0
     e8c:	4659      	mov	r1, fp
     e8e:	4088      	lsls	r0, r1
     e90:	1c02      	adds	r2, r0, #0
     e92:	1ab6      	subs	r6, r6, r2
     e94:	419f      	sbcs	r7, r3
     e96:	e003      	b.n	ea0 <__divdi3+0x120>
     e98:	42b0      	cmp	r0, r6
     e9a:	d98c      	bls.n	db6 <__divdi3+0x36>
     e9c:	2600      	movs	r6, #0
     e9e:	2700      	movs	r7, #0
     ea0:	4641      	mov	r1, r8
     ea2:	1e4b      	subs	r3, r1, #1
     ea4:	4199      	sbcs	r1, r3
     ea6:	2300      	movs	r3, #0
     ea8:	9100      	str	r1, [sp, #0]
     eaa:	9301      	str	r3, [sp, #4]
     eac:	9a00      	ldr	r2, [sp, #0]
     eae:	9b01      	ldr	r3, [sp, #4]
     eb0:	2500      	movs	r5, #0
     eb2:	4254      	negs	r4, r2
     eb4:	419d      	sbcs	r5, r3
     eb6:	1c33      	adds	r3, r6, #0
     eb8:	4063      	eors	r3, r4
     eba:	1c18      	adds	r0, r3, #0
     ebc:	1c3b      	adds	r3, r7, #0
     ebe:	406b      	eors	r3, r5
     ec0:	1c19      	adds	r1, r3, #0
     ec2:	9b00      	ldr	r3, [sp, #0]
     ec4:	9c01      	ldr	r4, [sp, #4]
     ec6:	18c0      	adds	r0, r0, r3
     ec8:	4161      	adcs	r1, r4
     eca:	b005      	add	sp, #20
     ecc:	bc3c      	pop	{r2, r3, r4, r5}
     ece:	4690      	mov	r8, r2
     ed0:	4699      	mov	r9, r3
     ed2:	46a2      	mov	sl, r4
     ed4:	46ab      	mov	fp, r5
     ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ed8:	4643      	mov	r3, r8
     eda:	43db      	mvns	r3, r3
     edc:	1c0c      	adds	r4, r1, #0
     ede:	4698      	mov	r8, r3
     ee0:	1c13      	adds	r3, r2, #0
     ee2:	2100      	movs	r1, #0
     ee4:	4258      	negs	r0, r3
     ee6:	41a1      	sbcs	r1, r4
     ee8:	e75e      	b.n	da8 <__divdi3+0x28>
     eea:	2700      	movs	r7, #0
     eec:	4246      	negs	r6, r0
     eee:	418f      	sbcs	r7, r1
     ef0:	2101      	movs	r1, #1
     ef2:	4249      	negs	r1, r1
     ef4:	4688      	mov	r8, r1
     ef6:	e752      	b.n	d9e <__divdi3+0x1e>
     ef8:	42b1      	cmp	r1, r6
     efa:	d800      	bhi.n	efe <__divdi3+0x17e>
     efc:	e77d      	b.n	dfa <__divdi3+0x7a>
     efe:	2600      	movs	r6, #0
     f00:	2700      	movs	r7, #0
     f02:	9602      	str	r6, [sp, #8]
     f04:	9703      	str	r7, [sp, #12]
     f06:	2800      	cmp	r0, #0
     f08:	d000      	beq.n	f0c <__divdi3+0x18c>
     f0a:	e78d      	b.n	e28 <__divdi3+0xa8>
     f0c:	9e02      	ldr	r6, [sp, #8]
     f0e:	9f03      	ldr	r7, [sp, #12]
     f10:	e7c6      	b.n	ea0 <__divdi3+0x120>
     f12:	2120      	movs	r1, #32
     f14:	4653      	mov	r3, sl
     f16:	1a09      	subs	r1, r1, r0
     f18:	40cb      	lsrs	r3, r1
     f1a:	2200      	movs	r2, #0
     f1c:	1c19      	adds	r1, r3, #0
     f1e:	2300      	movs	r3, #0
     f20:	9200      	str	r2, [sp, #0]
     f22:	9301      	str	r3, [sp, #4]
     f24:	464b      	mov	r3, r9
     f26:	4083      	lsls	r3, r0
     f28:	430b      	orrs	r3, r1
     f2a:	9301      	str	r3, [sp, #4]
     f2c:	e75c      	b.n	de8 <__divdi3+0x68>
     f2e:	465a      	mov	r2, fp
     f30:	2320      	movs	r3, #32
     f32:	1a9b      	subs	r3, r3, r2
     f34:	1c2a      	adds	r2, r5, #0
     f36:	409a      	lsls	r2, r3
     f38:	1c20      	adds	r0, r4, #0
     f3a:	1c13      	adds	r3, r2, #0
     f3c:	465a      	mov	r2, fp
     f3e:	40d0      	lsrs	r0, r2
     f40:	4318      	orrs	r0, r3
     f42:	e79b      	b.n	e7c <__divdi3+0xfc>
     f44:	2620      	movs	r6, #32
     f46:	2700      	movs	r7, #0
     f48:	1a33      	subs	r3, r6, r0
     f4a:	2600      	movs	r6, #0
     f4c:	9602      	str	r6, [sp, #8]
     f4e:	9703      	str	r7, [sp, #12]
     f50:	2701      	movs	r7, #1
     f52:	40df      	lsrs	r7, r3
     f54:	9703      	str	r7, [sp, #12]
     f56:	e761      	b.n	e1c <__divdi3+0x9c>
     f58:	465b      	mov	r3, fp
     f5a:	2120      	movs	r1, #32
     f5c:	465d      	mov	r5, fp
     f5e:	1ac9      	subs	r1, r1, r3
     f60:	1c03      	adds	r3, r0, #0
     f62:	40ac      	lsls	r4, r5
     f64:	40cb      	lsrs	r3, r1
     f66:	1c19      	adds	r1, r3, #0
     f68:	1c23      	adds	r3, r4, #0
     f6a:	430b      	orrs	r3, r1
     f6c:	e78e      	b.n	e8c <__divdi3+0x10c>
     f6e:	46c0      	nop			; (mov r8, r8)

00000f70 <__udivdi3>:
     f70:	b5f0      	push	{r4, r5, r6, r7, lr}
     f72:	4645      	mov	r5, r8
     f74:	464e      	mov	r6, r9
     f76:	4657      	mov	r7, sl
     f78:	b4e0      	push	{r5, r6, r7}
     f7a:	1c04      	adds	r4, r0, #0
     f7c:	b082      	sub	sp, #8
     f7e:	1c0d      	adds	r5, r1, #0
     f80:	4691      	mov	r9, r2
     f82:	4698      	mov	r8, r3
     f84:	428b      	cmp	r3, r1
     f86:	d862      	bhi.n	104e <__ram0_size__+0x4e>
     f88:	d05f      	beq.n	104a <__ram0_size__+0x4a>
     f8a:	4641      	mov	r1, r8
     f8c:	4648      	mov	r0, r9
     f8e:	f000 f89f 	bl	10d0 <__clzdi2>
     f92:	1c29      	adds	r1, r5, #0
     f94:	1c06      	adds	r6, r0, #0
     f96:	1c20      	adds	r0, r4, #0
     f98:	f000 f89a 	bl	10d0 <__clzdi2>
     f9c:	2320      	movs	r3, #32
     f9e:	1a31      	subs	r1, r6, r0
     fa0:	425b      	negs	r3, r3
     fa2:	468a      	mov	sl, r1
     fa4:	18c8      	adds	r0, r1, r3
     fa6:	d465      	bmi.n	1074 <__ram0_size__+0x74>
     fa8:	464b      	mov	r3, r9
     faa:	4083      	lsls	r3, r0
     fac:	1c1f      	adds	r7, r3, #0
     fae:	464b      	mov	r3, r9
     fb0:	408b      	lsls	r3, r1
     fb2:	1c1e      	adds	r6, r3, #0
     fb4:	42af      	cmp	r7, r5
     fb6:	d858      	bhi.n	106a <__ram0_size__+0x6a>
     fb8:	d055      	beq.n	1066 <__ram0_size__+0x66>
     fba:	1ba4      	subs	r4, r4, r6
     fbc:	41bd      	sbcs	r5, r7
     fbe:	2800      	cmp	r0, #0
     fc0:	da00      	bge.n	fc4 <__udivdi3+0x54>
     fc2:	e077      	b.n	10b4 <__ram0_size__+0xb4>
     fc4:	2200      	movs	r2, #0
     fc6:	2300      	movs	r3, #0
     fc8:	9200      	str	r2, [sp, #0]
     fca:	9301      	str	r3, [sp, #4]
     fcc:	3201      	adds	r2, #1
     fce:	4082      	lsls	r2, r0
     fd0:	9201      	str	r2, [sp, #4]
     fd2:	2301      	movs	r3, #1
     fd4:	408b      	lsls	r3, r1
     fd6:	9300      	str	r3, [sp, #0]
     fd8:	2900      	cmp	r1, #0
     fda:	d03c      	beq.n	1056 <__ram0_size__+0x56>
     fdc:	07fb      	lsls	r3, r7, #31
     fde:	4698      	mov	r8, r3
     fe0:	4640      	mov	r0, r8
     fe2:	0872      	lsrs	r2, r6, #1
     fe4:	087b      	lsrs	r3, r7, #1
     fe6:	4302      	orrs	r2, r0
     fe8:	2601      	movs	r6, #1
     fea:	2700      	movs	r7, #0
     fec:	e00c      	b.n	1008 <__ram0_size__+0x8>
     fee:	42ab      	cmp	r3, r5
     ff0:	d101      	bne.n	ff6 <__udivdi3+0x86>
     ff2:	42a2      	cmp	r2, r4
     ff4:	d80a      	bhi.n	100c <__ram0_size__+0xc>
     ff6:	1aa4      	subs	r4, r4, r2
     ff8:	419d      	sbcs	r5, r3
     ffa:	1924      	adds	r4, r4, r4
     ffc:	416d      	adcs	r5, r5
     ffe:	3901      	subs	r1, #1
    1000:	19a4      	adds	r4, r4, r6
    1002:	417d      	adcs	r5, r7
    1004:	2900      	cmp	r1, #0
    1006:	d006      	beq.n	1016 <__ram0_size__+0x16>
    1008:	42ab      	cmp	r3, r5
    100a:	d9f0      	bls.n	fee <__udivdi3+0x7e>
    100c:	3901      	subs	r1, #1
    100e:	1924      	adds	r4, r4, r4
    1010:	416d      	adcs	r5, r5
    1012:	2900      	cmp	r1, #0
    1014:	d1f8      	bne.n	1008 <__ram0_size__+0x8>
    1016:	2220      	movs	r2, #32
    1018:	9800      	ldr	r0, [sp, #0]
    101a:	9901      	ldr	r1, [sp, #4]
    101c:	4653      	mov	r3, sl
    101e:	4252      	negs	r2, r2
    1020:	1900      	adds	r0, r0, r4
    1022:	4169      	adcs	r1, r5
    1024:	189e      	adds	r6, r3, r2
    1026:	d43a      	bmi.n	109e <__ram0_size__+0x9e>
    1028:	1c2f      	adds	r7, r5, #0
    102a:	40f7      	lsrs	r7, r6
    102c:	4653      	mov	r3, sl
    102e:	40dd      	lsrs	r5, r3
    1030:	2e00      	cmp	r6, #0
    1032:	db29      	blt.n	1088 <__ram0_size__+0x88>
    1034:	1c3c      	adds	r4, r7, #0
    1036:	40b4      	lsls	r4, r6
    1038:	1c23      	adds	r3, r4, #0
    103a:	4654      	mov	r4, sl
    103c:	40a7      	lsls	r7, r4
    103e:	1c3a      	adds	r2, r7, #0
    1040:	1a80      	subs	r0, r0, r2
    1042:	4199      	sbcs	r1, r3
    1044:	9000      	str	r0, [sp, #0]
    1046:	9101      	str	r1, [sp, #4]
    1048:	e005      	b.n	1056 <__ram0_size__+0x56>
    104a:	4282      	cmp	r2, r0
    104c:	d99d      	bls.n	f8a <__udivdi3+0x1a>
    104e:	2300      	movs	r3, #0
    1050:	2400      	movs	r4, #0
    1052:	9300      	str	r3, [sp, #0]
    1054:	9401      	str	r4, [sp, #4]
    1056:	9800      	ldr	r0, [sp, #0]
    1058:	9901      	ldr	r1, [sp, #4]
    105a:	b002      	add	sp, #8
    105c:	bc1c      	pop	{r2, r3, r4}
    105e:	4690      	mov	r8, r2
    1060:	4699      	mov	r9, r3
    1062:	46a2      	mov	sl, r4
    1064:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1066:	42a3      	cmp	r3, r4
    1068:	d9a7      	bls.n	fba <__udivdi3+0x4a>
    106a:	2200      	movs	r2, #0
    106c:	2300      	movs	r3, #0
    106e:	9200      	str	r2, [sp, #0]
    1070:	9301      	str	r3, [sp, #4]
    1072:	e7b1      	b.n	fd8 <__udivdi3+0x68>
    1074:	2220      	movs	r2, #32
    1076:	464b      	mov	r3, r9
    1078:	1a52      	subs	r2, r2, r1
    107a:	40d3      	lsrs	r3, r2
    107c:	1c1a      	adds	r2, r3, #0
    107e:	4643      	mov	r3, r8
    1080:	408b      	lsls	r3, r1
    1082:	1c1f      	adds	r7, r3, #0
    1084:	4317      	orrs	r7, r2
    1086:	e792      	b.n	fae <__udivdi3+0x3e>
    1088:	4653      	mov	r3, sl
    108a:	2420      	movs	r4, #32
    108c:	4656      	mov	r6, sl
    108e:	1ae4      	subs	r4, r4, r3
    1090:	1c3b      	adds	r3, r7, #0
    1092:	40b5      	lsls	r5, r6
    1094:	40e3      	lsrs	r3, r4
    1096:	1c1c      	adds	r4, r3, #0
    1098:	1c2b      	adds	r3, r5, #0
    109a:	4323      	orrs	r3, r4
    109c:	e7cd      	b.n	103a <__ram0_size__+0x3a>
    109e:	4652      	mov	r2, sl
    10a0:	2320      	movs	r3, #32
    10a2:	1a9b      	subs	r3, r3, r2
    10a4:	1c2a      	adds	r2, r5, #0
    10a6:	409a      	lsls	r2, r3
    10a8:	1c27      	adds	r7, r4, #0
    10aa:	1c13      	adds	r3, r2, #0
    10ac:	4652      	mov	r2, sl
    10ae:	40d7      	lsrs	r7, r2
    10b0:	431f      	orrs	r7, r3
    10b2:	e7bb      	b.n	102c <__ram0_size__+0x2c>
    10b4:	2320      	movs	r3, #32
    10b6:	2200      	movs	r2, #0
    10b8:	1a58      	subs	r0, r3, r1
    10ba:	2300      	movs	r3, #0
    10bc:	9200      	str	r2, [sp, #0]
    10be:	9301      	str	r3, [sp, #4]
    10c0:	3201      	adds	r2, #1
    10c2:	40c2      	lsrs	r2, r0
    10c4:	9201      	str	r2, [sp, #4]
    10c6:	e784      	b.n	fd2 <__udivdi3+0x62>
	...

000010d0 <__clzdi2>:
    10d0:	b510      	push	{r4, lr}
    10d2:	2900      	cmp	r1, #0
    10d4:	d103      	bne.n	10de <__clzdi2+0xe>
    10d6:	f000 f80b 	bl	10f0 <__clzsi2>
    10da:	3020      	adds	r0, #32
    10dc:	e002      	b.n	10e4 <__clzdi2+0x14>
    10de:	1c08      	adds	r0, r1, #0
    10e0:	f000 f806 	bl	10f0 <__clzsi2>
    10e4:	bd10      	pop	{r4, pc}
    10e6:	46c0      	nop			; (mov r8, r8)
	...

000010f0 <__clzsi2>:
    10f0:	211c      	movs	r1, #28
    10f2:	2301      	movs	r3, #1
    10f4:	041b      	lsls	r3, r3, #16
    10f6:	4298      	cmp	r0, r3
    10f8:	d301      	bcc.n	10fe <__clzsi2+0xe>
    10fa:	0c00      	lsrs	r0, r0, #16
    10fc:	3910      	subs	r1, #16
    10fe:	0a1b      	lsrs	r3, r3, #8
    1100:	4298      	cmp	r0, r3
    1102:	d301      	bcc.n	1108 <__clzsi2+0x18>
    1104:	0a00      	lsrs	r0, r0, #8
    1106:	3908      	subs	r1, #8
    1108:	091b      	lsrs	r3, r3, #4
    110a:	4298      	cmp	r0, r3
    110c:	d301      	bcc.n	1112 <__clzsi2+0x22>
    110e:	0900      	lsrs	r0, r0, #4
    1110:	3904      	subs	r1, #4
    1112:	a202      	add	r2, pc, #8	; (adr r2, 111c <__clzsi2+0x2c>)
    1114:	5c10      	ldrb	r0, [r2, r0]
    1116:	1840      	adds	r0, r0, r1
    1118:	4770      	bx	lr
    111a:	46c0      	nop			; (mov r8, r8)
    111c:	02020304 	.word	0x02020304
    1120:	01010101 	.word	0x01010101
	...

00001130 <putc_x>:
  /*lint -save -e9033 [10.8] The cast is safe.*/
  return (size_t)(endmem - nextmem);
  /*lint -restore*/
}

static void putc_x(void *storage, char c) {
    1130:	b510      	push	{r4, lr}
    1132:	b082      	sub	sp, #8
    1134:	466b      	mov	r3, sp
  (void) storage;

  chnWrite(&SD1, (const uint8_t *) &c, 1);
    1136:	4805      	ldr	r0, [pc, #20]	; (114c <putc_x+0x1c>)
  /*lint -save -e9033 [10.8] The cast is safe.*/
  return (size_t)(endmem - nextmem);
  /*lint -restore*/
}

static void putc_x(void *storage, char c) {
    1138:	71d9      	strb	r1, [r3, #7]
  (void) storage;

  chnWrite(&SD1, (const uint8_t *) &c, 1);
    113a:	6802      	ldr	r2, [r0, #0]
  /*lint -save -e9033 [10.8] The cast is safe.*/
  return (size_t)(endmem - nextmem);
  /*lint -restore*/
}

static void putc_x(void *storage, char c) {
    113c:	3307      	adds	r3, #7
  (void) storage;

  chnWrite(&SD1, (const uint8_t *) &c, 1);
    113e:	6814      	ldr	r4, [r2, #0]
    1140:	1c19      	adds	r1, r3, #0
    1142:	2201      	movs	r2, #1
    1144:	47a0      	blx	r4
}
    1146:	b002      	add	sp, #8
    1148:	bd10      	pop	{r4, pc}
    114a:	46c0      	nop			; (mov r8, r8)
    114c:	20000a2c 	.word	0x20000a2c

00001150 <demod_loop>:
  }
  dataReadyFlag = 0;
}

__attribute__((noreturn))
void demod_loop(void) {
    1150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t i;

  // stop systick interrupts
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk;
    1152:	2204      	movs	r2, #4
  }
  dataReadyFlag = 0;
}

__attribute__((noreturn))
void demod_loop(void) {
    1154:	4656      	mov	r6, sl
    1156:	464d      	mov	r5, r9
    1158:	4644      	mov	r4, r8
    115a:	465f      	mov	r7, fp
  uint32_t i;

  // stop systick interrupts
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk;
    115c:	4b33      	ldr	r3, [pc, #204]	; (122c <demod_loop+0xdc>)
  }
  dataReadyFlag = 0;
}

__attribute__((noreturn))
void demod_loop(void) {
    115e:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t i;

  // stop systick interrupts
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk;
  nvicDisableVector(HANDLER_SYSTICK);
    1160:	200b      	movs	r0, #11
__attribute__((noreturn))
void demod_loop(void) {
  uint32_t i;

  // stop systick interrupts
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk;
    1162:	601a      	str	r2, [r3, #0]
  nvicDisableVector(HANDLER_SYSTICK);
    1164:	f001 fa24 	bl	25b0 <nvicDisableVector>
    1168:	4b31      	ldr	r3, [pc, #196]	; (1230 <demod_loop+0xe0>)
    116a:	2580      	movs	r5, #128	; 0x80
    116c:	469a      	mov	sl, r3
    116e:	4b31      	ldr	r3, [pc, #196]	; (1234 <demod_loop+0xe4>)
    }

    // unstripe the transition xor's used to keep baud sync
    if( (pktBuf[0] & PKTTYPE_MASK) == PKTTYPE_DATA ) {
      for( i = 0; i < PKT_LEN - 4; i++ ) {
        if( (i % 16) == 7 )
    1170:	240f      	movs	r4, #15
    1172:	4698      	mov	r8, r3
    1174:	4b30      	ldr	r3, [pc, #192]	; (1238 <demod_loop+0xe8>)
    1176:	00ad      	lsls	r5, r5, #2
    1178:	4699      	mov	r9, r3
    117a:	4e30      	ldr	r6, [pc, #192]	; (123c <demod_loop+0xec>)
    117c:	4445      	add	r5, r8
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk;
  nvicDisableVector(HANDLER_SYSTICK);
  
  // infinite loops, prevents other system items from starting
  while(TRUE) {
    pktPtr = 0;
    117e:	2300      	movs	r3, #0
    1180:	4a2f      	ldr	r2, [pc, #188]	; (1240 <demod_loop+0xf0>)
    1182:	8013      	strh	r3, [r2, #0]
    1184:	4b2f      	ldr	r3, [pc, #188]	; (1244 <demod_loop+0xf4>)
    1186:	781b      	ldrb	r3, [r3, #0]
    1188:	2b00      	cmp	r3, #0
    118a:	d125      	bne.n	11d8 <demod_loop+0x88>
    while( !pktReady ) {
      if( dataReadyFlag ) {
    118c:	4b2e      	ldr	r3, [pc, #184]	; (1248 <demod_loop+0xf8>)
    118e:	781b      	ldrb	r3, [r3, #0]
    1190:	2b00      	cmp	r3, #0
    1192:	d0fb      	beq.n	118c <demod_loop+0x3c>
        // copy from the double-buffer into a demodulation buffer
        for( i = 0 ; i < buf_n; i++ ) { 
    1194:	4653      	mov	r3, sl
    1196:	6819      	ldr	r1, [r3, #0]
    1198:	2900      	cmp	r1, #0
    119a:	d00d      	beq.n	11b8 <demod_loop+0x68>
    119c:	4b2b      	ldr	r3, [pc, #172]	; (124c <demod_loop+0xfc>)
    119e:	0049      	lsls	r1, r1, #1
    11a0:	6818      	ldr	r0, [r3, #0]
    11a2:	2300      	movs	r3, #0
          dm_buf[i] = (int16_t) (((int16_t) bufloc[i]) - 2048);
    11a4:	4f2a      	ldr	r7, [pc, #168]	; (1250 <demod_loop+0x100>)
    11a6:	18c2      	adds	r2, r0, r3
    11a8:	46bc      	mov	ip, r7
    11aa:	4647      	mov	r7, r8
    11ac:	8812      	ldrh	r2, [r2, #0]
    11ae:	4462      	add	r2, ip
    11b0:	52fa      	strh	r2, [r7, r3]
    11b2:	3302      	adds	r3, #2
  while(TRUE) {
    pktPtr = 0;
    while( !pktReady ) {
      if( dataReadyFlag ) {
        // copy from the double-buffer into a demodulation buffer
        for( i = 0 ; i < buf_n; i++ ) { 
    11b4:	428b      	cmp	r3, r1
    11b6:	d1f5      	bne.n	11a4 <demod_loop+0x54>
    11b8:	4647      	mov	r7, r8
  // this is happening once every 1.748ms with NB_FRAMES = 16, NB_SAMPLES = 8
  // computed about 0.0413ms -> 41.3us per call overhead for OS required ~2.5% overhead
#endif
  // demodulation handler based on microphone data coming in
  for( frames = 0; frames < NB_FRAMES; frames++ ) {
    FSKdemod(dm_buf + (frames * NB_SAMPLES), NB_SAMPLES, putBitMac); // putBitMac is callback to MAC layer
    11ba:	1c38      	adds	r0, r7, #0
    11bc:	2108      	movs	r1, #8
    11be:	1c32      	adds	r2, r6, #0
    11c0:	3710      	adds	r7, #16
    11c2:	f000 fa0d 	bl	15e0 <FSKdemod>
  
  // this is happening once every 1.748ms with NB_FRAMES = 16, NB_SAMPLES = 8
  // computed about 0.0413ms -> 41.3us per call overhead for OS required ~2.5% overhead
#endif
  // demodulation handler based on microphone data coming in
  for( frames = 0; frames < NB_FRAMES; frames++ ) {
    11c6:	42af      	cmp	r7, r5
    11c8:	d1f7      	bne.n	11ba <demod_loop+0x6a>
    FSKdemod(dm_buf + (frames * NB_SAMPLES), NB_SAMPLES, putBitMac); // putBitMac is callback to MAC layer
  }
  dataReadyFlag = 0;
    11ca:	2300      	movs	r3, #0
    11cc:	4a1e      	ldr	r2, [pc, #120]	; (1248 <demod_loop+0xf8>)
    11ce:	7013      	strb	r3, [r2, #0]
    11d0:	4b1c      	ldr	r3, [pc, #112]	; (1244 <demod_loop+0xf4>)
    11d2:	781b      	ldrb	r3, [r3, #0]
    11d4:	2b00      	cmp	r3, #0
    11d6:	d0d9      	beq.n	118c <demod_loop+0x3c>
        phy_demodulate();
      }
    }

    // unstripe the transition xor's used to keep baud sync
    if( (pktBuf[0] & PKTTYPE_MASK) == PKTTYPE_DATA ) {
    11d8:	464b      	mov	r3, r9
    11da:	781b      	ldrb	r3, [r3, #0]
    11dc:	2b7f      	cmp	r3, #127	; 0x7f
    11de:	d81b      	bhi.n	1218 <demod_loop+0xc8>
      for( i = 0; i < PKT_LEN - 4; i++ ) {
        if( (i % 16) == 7 )
          pktBuf[i] ^= 0x55;
        else if( (i % 16) == 15)
          pktBuf[i] ^= 0xAA;
    11e0:	2156      	movs	r1, #86	; 0x56
    11e2:	4249      	negs	r1, r1
    11e4:	468c      	mov	ip, r1
      }
    }

    // unstripe the transition xor's used to keep baud sync
    if( (pktBuf[0] & PKTTYPE_MASK) == PKTTYPE_DATA ) {
      for( i = 0; i < PKT_LEN - 4; i++ ) {
    11e6:	2004      	movs	r0, #4
        if( (i % 16) == 7 )
          pktBuf[i] ^= 0x55;
    11e8:	2155      	movs	r1, #85	; 0x55
    11ea:	464a      	mov	r2, r9
        phy_demodulate();
      }
    }

    // unstripe the transition xor's used to keep baud sync
    if( (pktBuf[0] & PKTTYPE_MASK) == PKTTYPE_DATA ) {
    11ec:	2300      	movs	r3, #0
      for( i = 0; i < PKT_LEN - 4; i++ ) {
        if( (i % 16) == 7 )
          pktBuf[i] ^= 0x55;
    11ee:	468b      	mov	fp, r1
      }
    }

    // unstripe the transition xor's used to keep baud sync
    if( (pktBuf[0] & PKTTYPE_MASK) == PKTTYPE_DATA ) {
      for( i = 0; i < PKT_LEN - 4; i++ ) {
    11f0:	30ff      	adds	r0, #255	; 0xff
    11f2:	e005      	b.n	1200 <demod_loop+0xb0>
        if( (i % 16) == 7 )
          pktBuf[i] ^= 0x55;
        else if( (i % 16) == 15)
    11f4:	290f      	cmp	r1, #15
    11f6:	d013      	beq.n	1220 <demod_loop+0xd0>
      }
    }

    // unstripe the transition xor's used to keep baud sync
    if( (pktBuf[0] & PKTTYPE_MASK) == PKTTYPE_DATA ) {
      for( i = 0; i < PKT_LEN - 4; i++ ) {
    11f8:	3301      	adds	r3, #1
    11fa:	3201      	adds	r2, #1
    11fc:	4283      	cmp	r3, r0
    11fe:	d00b      	beq.n	1218 <demod_loop+0xc8>
        if( (i % 16) == 7 )
    1200:	1c21      	adds	r1, r4, #0
    1202:	4019      	ands	r1, r3
    1204:	2907      	cmp	r1, #7
    1206:	d1f5      	bne.n	11f4 <demod_loop+0xa4>
          pktBuf[i] ^= 0x55;
    1208:	465f      	mov	r7, fp
    120a:	7811      	ldrb	r1, [r2, #0]
      }
    }

    // unstripe the transition xor's used to keep baud sync
    if( (pktBuf[0] & PKTTYPE_MASK) == PKTTYPE_DATA ) {
      for( i = 0; i < PKT_LEN - 4; i++ ) {
    120c:	3301      	adds	r3, #1
        if( (i % 16) == 7 )
          pktBuf[i] ^= 0x55;
    120e:	4079      	eors	r1, r7
    1210:	7011      	strb	r1, [r2, #0]
    1212:	3201      	adds	r2, #1
      }
    }

    // unstripe the transition xor's used to keep baud sync
    if( (pktBuf[0] & PKTTYPE_MASK) == PKTTYPE_DATA ) {
      for( i = 0; i < PKT_LEN - 4; i++ ) {
    1214:	4283      	cmp	r3, r0
    1216:	d1f3      	bne.n	1200 <demod_loop+0xb0>
    }

    pktReady = 0; // we've extracted packet data, so clear the buffer flag
#else
    
    updaterPacketProcess(pktBuf);
    1218:	4648      	mov	r0, r9
    121a:	f000 fad9 	bl	17d0 <updaterPacketProcess>
#endif
  }
    121e:	e7ae      	b.n	117e <demod_loop+0x2e>
    if( (pktBuf[0] & PKTTYPE_MASK) == PKTTYPE_DATA ) {
      for( i = 0; i < PKT_LEN - 4; i++ ) {
        if( (i % 16) == 7 )
          pktBuf[i] ^= 0x55;
        else if( (i % 16) == 15)
          pktBuf[i] ^= 0xAA;
    1220:	4667      	mov	r7, ip
    1222:	7811      	ldrb	r1, [r2, #0]
    1224:	4079      	eors	r1, r7
    1226:	7011      	strb	r1, [r2, #0]
    1228:	e7e6      	b.n	11f8 <demod_loop+0xa8>
    122a:	46c0      	nop			; (mov r8, r8)
    122c:	e000e010 	.word	0xe000e010
    1230:	2000010c 	.word	0x2000010c
    1234:	2000054c 	.word	0x2000054c
    1238:	20000750 	.word	0x20000750
    123c:	00001a71 	.word	0x00001a71
    1240:	2000085e 	.word	0x2000085e
    1244:	20000860 	.word	0x20000860
    1248:	20000110 	.word	0x20000110
    124c:	20000108 	.word	0x20000108
    1250:	fffff800 	.word	0xfffff800
    1254:	46c0      	nop			; (mov r8, r8)
    1256:	46c0      	nop			; (mov r8, r8)
    1258:	46c0      	nop			; (mov r8, r8)
    125a:	46c0      	nop			; (mov r8, r8)
    125c:	46c0      	nop			; (mov r8, r8)
    125e:	46c0      	nop			; (mov r8, r8)

00001260 <Thread1>:
 */
static THD_WORKING_AREA(waThread1, 512);
static THD_FUNCTION(Thread1, arg) {
  (void)arg;

  GPIOB->PSOR |= (1 << 6);   // red off
    1260:	2240      	movs	r2, #64	; 0x40

/*
 * "main" thread, separate from idle thread
 */
static THD_WORKING_AREA(waThread1, 512);
static THD_FUNCTION(Thread1, arg) {
    1262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  (void)arg;

  GPIOB->PSOR |= (1 << 6);   // red off
    1264:	4b37      	ldr	r3, [pc, #220]	; (1344 <Thread1+0xe4>)
  GPIOB->PCOR |= (1 << 7);   // green on
  GPIOB->PSOR |= (1 << 10);  // blue off

  // init the serial interface
  sdStart(&SD1, &serialConfig);
    1266:	4c38      	ldr	r4, [pc, #224]	; (1348 <Thread1+0xe8>)
 */
static THD_WORKING_AREA(waThread1, 512);
static THD_FUNCTION(Thread1, arg) {
  (void)arg;

  GPIOB->PSOR |= (1 << 6);   // red off
    1268:	6859      	ldr	r1, [r3, #4]
  GPIOB->PCOR |= (1 << 7);   // green on
  GPIOB->PSOR |= (1 << 10);  // blue off

  // init the serial interface
  sdStart(&SD1, &serialConfig);
    126a:	1c20      	adds	r0, r4, #0
 */
static THD_WORKING_AREA(waThread1, 512);
static THD_FUNCTION(Thread1, arg) {
  (void)arg;

  GPIOB->PSOR |= (1 << 6);   // red off
    126c:	430a      	orrs	r2, r1
    126e:	605a      	str	r2, [r3, #4]
  GPIOB->PCOR |= (1 << 7);   // green on
    1270:	2280      	movs	r2, #128	; 0x80
    1272:	6899      	ldr	r1, [r3, #8]
    1274:	430a      	orrs	r2, r1
  GPIOB->PSOR |= (1 << 10);  // blue off
    1276:	2180      	movs	r1, #128	; 0x80
static THD_WORKING_AREA(waThread1, 512);
static THD_FUNCTION(Thread1, arg) {
  (void)arg;

  GPIOB->PSOR |= (1 << 6);   // red off
  GPIOB->PCOR |= (1 << 7);   // green on
    1278:	609a      	str	r2, [r3, #8]
  GPIOB->PSOR |= (1 << 10);  // blue off
    127a:	685a      	ldr	r2, [r3, #4]
    127c:	00c9      	lsls	r1, r1, #3
    127e:	430a      	orrs	r2, r1
    1280:	605a      	str	r2, [r3, #4]

  // init the serial interface
  sdStart(&SD1, &serialConfig);
    1282:	4932      	ldr	r1, [pc, #200]	; (134c <Thread1+0xec>)
    1284:	f001 f954 	bl	2530 <sdStart>
  //  sd_lld_init();
  //  sd_lld_start((&SD1), &serialConfig);
  init_printf(NULL,putc_x);
    1288:	2000      	movs	r0, #0
    128a:	4931      	ldr	r1, [pc, #196]	; (1350 <Thread1+0xf0>)
    128c:	f001 ffb8 	bl	3200 <init_printf>
  stream = stream_driver;
    1290:	4b30      	ldr	r3, [pc, #192]	; (1354 <Thread1+0xf4>)

  //chnWrite( &SD1, (const uint8_t *) "\r\n\r\nOrchard audio wtf loader.\r\n", 32);
  //chThdSleepMilliseconds(1000);
  tfp_printf( "\r\n\r\nOrchard audio bootloader.  Based on build %s\r\n", gitversion);
    1292:	4831      	ldr	r0, [pc, #196]	; (1358 <Thread1+0xf8>)
  // init the serial interface
  sdStart(&SD1, &serialConfig);
  //  sd_lld_init();
  //  sd_lld_start((&SD1), &serialConfig);
  init_printf(NULL,putc_x);
  stream = stream_driver;
    1294:	601c      	str	r4, [r3, #0]

  //chnWrite( &SD1, (const uint8_t *) "\r\n\r\nOrchard audio wtf loader.\r\n", 32);
  //chThdSleepMilliseconds(1000);
  tfp_printf( "\r\n\r\nOrchard audio bootloader.  Based on build %s\r\n", gitversion);
    1296:	4b31      	ldr	r3, [pc, #196]	; (135c <Thread1+0xfc>)
    1298:	6819      	ldr	r1, [r3, #0]
    129a:	f001 ffc1 	bl	3220 <tfp_printf>
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
    129e:	4930      	ldr	r1, [pc, #192]	; (1360 <Thread1+0x100>)
    12a0:	2207      	movs	r2, #7
    12a2:	1c0b      	adds	r3, r1, #0
  uint8_t *endmem;
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
    12a4:	492f      	ldr	r1, [pc, #188]	; (1364 <Thread1+0x104>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
    12a6:	4393      	bics	r3, r2
  uint8_t *endmem;
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
    12a8:	3107      	adds	r1, #7
    12aa:	4391      	bics	r1, r2
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
  /*lint restore*/

  /*lint -save -e9033 [10.8] The cast is safe.*/
  return (size_t)(endmem - nextmem);
    12ac:	1a59      	subs	r1, r3, r1
  stream = stream_driver;

  //chnWrite( &SD1, (const uint8_t *) "\r\n\r\nOrchard audio wtf loader.\r\n", 32);
  //chThdSleepMilliseconds(1000);
  tfp_printf( "\r\n\r\nOrchard audio bootloader.  Based on build %s\r\n", gitversion);
  tfp_printf( "core free memory : %d bytes\r\n", chCoreGetStatusX());
    12ae:	482e      	ldr	r0, [pc, #184]	; (1368 <Thread1+0x108>)
    12b0:	f001 ffb6 	bl	3220 <tfp_printf>
  chThdSleepMilliseconds(100); // give a little time for the status message to appear
    12b4:	2064      	movs	r0, #100	; 0x64
    12b6:	f000 fec3 	bl	2040 <chThdSleep>
  
  //i2cStart(i2cDriver, &i2c_config);
  adcStart(&ADCD1, &adccfg1);
    12ba:	482c      	ldr	r0, [pc, #176]	; (136c <Thread1+0x10c>)
    12bc:	492c      	ldr	r1, [pc, #176]	; (1370 <Thread1+0x110>)
    12be:	f001 f897 	bl	23f0 <adcStart>
  analogStart();
    12c2:	f000 f8b5 	bl	1430 <analogStart>
  
  demodInit();
    12c6:	f000 f9fb 	bl	16c0 <demodInit>

  flashStart();
    12ca:	f000 fd21 	bl	1d10 <flashStart>
  if((int32_t)(IRQn) < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    12ce:	22c3      	movs	r2, #195	; 0xc3
    12d0:	20ff      	movs	r0, #255	; 0xff
    12d2:	4928      	ldr	r1, [pc, #160]	; (1374 <Thread1+0x114>)
    12d4:	0092      	lsls	r2, r2, #2
    12d6:	588b      	ldr	r3, [r1, r2]
    12d8:	021b      	lsls	r3, r3, #8
    12da:	0a1b      	lsrs	r3, r3, #8
    12dc:	508b      	str	r3, [r1, r2]
    12de:	588b      	ldr	r3, [r1, r2]
    12e0:	4383      	bics	r3, r0
    12e2:	20c0      	movs	r0, #192	; 0xc0
    12e4:	4303      	orrs	r3, r0
    12e6:	508b      	str	r3, [r1, r2]
  //0xe000e180:0x00009000
  // x/32x 0xe000e400
  NVIC_SetPriority(ADC0_IRQn, 0);
  NVIC_SetPriority(UART0_IRQn, 3);

  while( !(((volatile SysTick_Type *)SysTick)->CTRL & SysTick_CTRL_COUNTFLAG_Msk) )
    12e8:	2180      	movs	r1, #128	; 0x80
    12ea:	4823      	ldr	r0, [pc, #140]	; (1378 <Thread1+0x118>)
    12ec:	0249      	lsls	r1, r1, #9
    12ee:	6803      	ldr	r3, [r0, #0]
    12f0:	4a21      	ldr	r2, [pc, #132]	; (1378 <Thread1+0x118>)
    12f2:	420b      	tst	r3, r1
    12f4:	d0fb      	beq.n	12ee <Thread1+0x8e>
    ;
  SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
    12f6:	2101      	movs	r1, #1

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    12f8:	2680      	movs	r6, #128	; 0x80
    12fa:	2580      	movs	r5, #128	; 0x80
    12fc:	2080      	movs	r0, #128	; 0x80
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)(IRQn) < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    12fe:	27c0      	movs	r7, #192	; 0xc0
    1300:	6813      	ldr	r3, [r2, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1302:	4c1c      	ldr	r4, [pc, #112]	; (1374 <Thread1+0x114>)
    1304:	438b      	bics	r3, r1
    1306:	05f6      	lsls	r6, r6, #23
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)(IRQn) < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1308:	491c      	ldr	r1, [pc, #112]	; (137c <Thread1+0x11c>)

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    130a:	062d      	lsls	r5, r5, #24
    130c:	6013      	str	r3, [r2, #0]
    130e:	5026      	str	r6, [r4, r0]
    1310:	5025      	str	r5, [r4, r0]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)(IRQn) < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1312:	69ca      	ldr	r2, [r1, #28]
    1314:	063f      	lsls	r7, r7, #24
    1316:	0212      	lsls	r2, r2, #8
    1318:	0a12      	lsrs	r2, r2, #8
    131a:	433a      	orrs	r2, r7
    131c:	61ca      	str	r2, [r1, #28]
    131e:	6a0a      	ldr	r2, [r1, #32]
    1320:	4b17      	ldr	r3, [pc, #92]	; (1380 <Thread1+0x120>)
    1322:	401a      	ands	r2, r3
    1324:	23c0      	movs	r3, #192	; 0xc0
    1326:	041b      	lsls	r3, r3, #16
    1328:	431a      	orrs	r2, r3
    132a:	620a      	str	r2, [r1, #32]
    132c:	6a0b      	ldr	r3, [r1, #32]
    132e:	021b      	lsls	r3, r3, #8
    1330:	0a1b      	lsrs	r3, r3, #8
    1332:	433b      	orrs	r3, r7
    1334:	620b      	str	r3, [r1, #32]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1336:	5026      	str	r6, [r4, r0]
    1338:	5025      	str	r5, [r4, r0]
  NVIC_SetPriority(PendSV_IRQn, 3);
  NVIC_SetPriority(SysTick_IRQn, 3);
  NVIC_DisableIRQ(PendSV_IRQn);
  NVIC_DisableIRQ(SysTick_IRQn);
  
  analogUpdateMic();  // starts mic sampling loop (interrupt-driven and automatic)
    133a:	f000 f869 	bl	1410 <analogUpdateMic>
  demod_loop();
    133e:	f7ff ff07 	bl	1150 <demod_loop>
    1342:	46c0      	nop			; (mov r8, r8)
    1344:	400ff040 	.word	0x400ff040
    1348:	20000a2c 	.word	0x20000a2c
    134c:	00003a60 	.word	0x00003a60
    1350:	00001131 	.word	0x00001131
    1354:	1ffffe98 	.word	0x1ffffe98
    1358:	000039f0 	.word	0x000039f0
    135c:	1ffffd80 	.word	0x1ffffd80
    1360:	20000c00 	.word	0x20000c00
    1364:	20000b18 	.word	0x20000b18
    1368:	00003a24 	.word	0x00003a24
    136c:	20000aec 	.word	0x20000aec
    1370:	000039b0 	.word	0x000039b0
    1374:	e000e100 	.word	0xe000e100
    1378:	e000e010 	.word	0xe000e010
    137c:	e000ed00 	.word	0xe000ed00
    1380:	ff00ffff 	.word	0xff00ffff
    1384:	46c0      	nop			; (mov r8, r8)
    1386:	46c0      	nop			; (mov r8, r8)
    1388:	46c0      	nop			; (mov r8, r8)
    138a:	46c0      	nop			; (mov r8, r8)
    138c:	46c0      	nop			; (mov r8, r8)
    138e:	46c0      	nop			; (mov r8, r8)

00001390 <main>:

/*
 * Application entry point.
 */
int main(void)
{
    1390:	b508      	push	{r3, lr}
   * - HAL initialization, this also initializes the configured device drivers
   *   and performs the board-specific initializations.
   * - Kernel initialization, the main() function becomes a thread and the
   *   RTOS is active.
   */
  halInit();
    1392:	f000 feb5 	bl	2100 <halInit>
  chSysInit();
    1396:	f000 fdbb 	bl	1f10 <chSysInit>

  while(1)  /// this is now the "idle" thread
    ;
    139a:	e7fe      	b.n	139a <main+0xa>
    139c:	46c0      	nop			; (mov r8, r8)
    139e:	46c0      	nop			; (mov r8, r8)

000013a0 <HardFault_Handler>:
register void *stack_pointer asm("sp");

void HardFault_Handler(void) {
/*lint -restore*/
  // Hijack the process stack pointer to make backtrace work
  asm("mrs %0, psp" : "=r"(HARDFAULT_PSP) : :);
    13a0:	4a03      	ldr	r2, [pc, #12]	; (13b0 <HardFault_Handler+0x10>)
    13a2:	f3ef 8309 	mrs	r3, PSP
    13a6:	6013      	str	r3, [r2, #0]
  stack_pointer = HARDFAULT_PSP;
    13a8:	469d      	mov	sp, r3

  /* Break into the debugger */
  asm("bkpt #0");
    13aa:	be00      	bkpt	0x0000

  while(1);
    13ac:	e7fe      	b.n	13ac <HardFault_Handler+0xc>
    13ae:	46c0      	nop			; (mov r8, r8)
    13b0:	20000114 	.word	0x20000114
    13b4:	46c0      	nop			; (mov r8, r8)
    13b6:	46c0      	nop			; (mov r8, r8)
    13b8:	46c0      	nop			; (mov r8, r8)
    13ba:	46c0      	nop			; (mov r8, r8)
    13bc:	46c0      	nop			; (mov r8, r8)
    13be:	46c0      	nop			; (mov r8, r8)

000013c0 <MemManage_Handler>:
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void MemManage_Handler(void) {
/*lint -restore*/

  while (true) {
  }
    13c0:	e7fe      	b.n	13c0 <MemManage_Handler>
    13c2:	46c0      	nop			; (mov r8, r8)
    13c4:	46c0      	nop			; (mov r8, r8)
    13c6:	46c0      	nop			; (mov r8, r8)
    13c8:	46c0      	nop			; (mov r8, r8)
    13ca:	46c0      	nop			; (mov r8, r8)
    13cc:	46c0      	nop			; (mov r8, r8)
    13ce:	46c0      	nop			; (mov r8, r8)

000013d0 <BusFault_Handler>:
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void BusFault_Handler(void) {
/*lint -restore*/

  while (true) {
  }
    13d0:	e7fe      	b.n	13d0 <BusFault_Handler>
    13d2:	46c0      	nop			; (mov r8, r8)
    13d4:	46c0      	nop			; (mov r8, r8)
    13d6:	46c0      	nop			; (mov r8, r8)
    13d8:	46c0      	nop			; (mov r8, r8)
    13da:	46c0      	nop			; (mov r8, r8)
    13dc:	46c0      	nop			; (mov r8, r8)
    13de:	46c0      	nop			; (mov r8, r8)

000013e0 <UsageFault_Handler>:
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void UsageFault_Handler(void) {
/*lint -restore*/

  while (true) {
  }
    13e0:	e7fe      	b.n	13e0 <UsageFault_Handler>
    13e2:	46c0      	nop			; (mov r8, r8)
    13e4:	46c0      	nop			; (mov r8, r8)
    13e6:	46c0      	nop			; (mov r8, r8)
    13e8:	46c0      	nop			; (mov r8, r8)
    13ea:	46c0      	nop			; (mov r8, r8)
    13ec:	46c0      	nop			; (mov r8, r8)
    13ee:	46c0      	nop			; (mov r8, r8)

000013f0 <adc_mic_end_cb>:
#if !DEMOD_DEBUG  // select this path for "normal" orchard operation
  chSysLockFromISR();
  chEvtBroadcastI(&adc_mic_event);
  chSysUnlockFromISR();
#else  // single-thread operation
  dataReadyFlag = 1;
    13f0:	2001      	movs	r0, #1
    13f2:	4b03      	ldr	r3, [pc, #12]	; (1400 <adc_mic_end_cb+0x10>)
    13f4:	7018      	strb	r0, [r3, #0]
  bufloc = buffer;
    13f6:	4b03      	ldr	r3, [pc, #12]	; (1404 <adc_mic_end_cb+0x14>)
    13f8:	6019      	str	r1, [r3, #0]
  buf_n = n;
    13fa:	4b03      	ldr	r3, [pc, #12]	; (1408 <adc_mic_end_cb+0x18>)
    13fc:	601a      	str	r2, [r3, #0]
#endif
}
    13fe:	4770      	bx	lr
    1400:	20000110 	.word	0x20000110
    1404:	20000108 	.word	0x20000108
    1408:	2000010c 	.word	0x2000010c
    140c:	46c0      	nop			; (mov r8, r8)
    140e:	46c0      	nop			; (mov r8, r8)

00001410 <analogUpdateMic>:
  // /2   6 MHz after adiv
  // /20  300ksps after base sample time @ 12 bps
  // /4   75ksps after averaging by factor of 4
};

void analogUpdateMic(void) {
    1410:	b508      	push	{r3, lr}
  //  adcAcquireBus(&ADCD1);
  //  adcConvert(&ADCD1, &adcgrpmic, mic_sample, MIC_SAMPLE_DEPTH);
  adcStartConversion(&ADCD1, &adcgrpmic, mic_sample, MIC_SAMPLE_DEPTH);
    1412:	2380      	movs	r3, #128	; 0x80
    1414:	4803      	ldr	r0, [pc, #12]	; (1424 <analogUpdateMic+0x14>)
    1416:	4904      	ldr	r1, [pc, #16]	; (1428 <analogUpdateMic+0x18>)
    1418:	4a04      	ldr	r2, [pc, #16]	; (142c <analogUpdateMic+0x1c>)
    141a:	009b      	lsls	r3, r3, #2
    141c:	f000 fff8 	bl	2410 <adcStartConversion>
  //  adcReleaseBus(&ADCD1);
}
    1420:	bd08      	pop	{r3, pc}
    1422:	46c0      	nop			; (mov r8, r8)
    1424:	20000aec 	.word	0x20000aec
    1428:	00003aa0 	.word	0x00003aa0
    142c:	20000118 	.word	0x20000118

00001430 <analogStart>:

void analogStart() {
  
}
    1430:	4770      	bx	lr
    1432:	46c0      	nop			; (mov r8, r8)
    1434:	46c0      	nop			; (mov r8, r8)
    1436:	46c0      	nop			; (mov r8, r8)
    1438:	46c0      	nop			; (mov r8, r8)
    143a:	46c0      	nop			; (mov r8, r8)
    143c:	46c0      	nop			; (mov r8, r8)
    143e:	46c0      	nop			; (mov r8, r8)

00001440 <FSK_core>:

int16_t dm_buf[DMBUF_DEPTH];

static FSK_demod_state fsk_state;

int32_t FSK_core(int16_t *b) {
    1440:	b5f0      	push	{r4, r5, r6, r7, lr}
    1442:	4644      	mov	r4, r8
    1444:	465f      	mov	r7, fp
    1446:	4656      	mov	r6, sl
    1448:	464d      	mov	r5, r9
    144a:	b4f0      	push	{r4, r5, r6, r7}
     very difficult to do another way */
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_hi_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_i[j];
    144c:	2302      	movs	r3, #2
    144e:	5ec2      	ldrsh	r2, [r0, r3]

int16_t dm_buf[DMBUF_DEPTH];

static FSK_demod_state fsk_state;

int32_t FSK_core(int16_t *b) {
    1450:	b089      	sub	sp, #36	; 0x24
     very difficult to do another way */
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_hi_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_i[j];
    1452:	2304      	movs	r3, #4
    1454:	5ec5      	ldrsh	r5, [r0, r3]

  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_i[j];
    1456:	4b4e      	ldr	r3, [pc, #312]	; (1590 <FSK_core+0x150>)
     very difficult to do another way */
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_hi_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_i[j];
    1458:	9201      	str	r2, [sp, #4]

  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_i[j];
    145a:	469c      	mov	ip, r3
     very difficult to do another way */
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_hi_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_i[j];
    145c:	4a4d      	ldr	r2, [pc, #308]	; (1594 <FSK_core+0x154>)
    145e:	9b01      	ldr	r3, [sp, #4]
    1460:	4e4d      	ldr	r6, [pc, #308]	; (1598 <FSK_core+0x158>)
    1462:	435a      	muls	r2, r3
    1464:	2306      	movs	r3, #6
    1466:	5ec7      	ldrsh	r7, [r0, r3]
    
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_hi_q, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_q[j];
    1468:	4b4c      	ldr	r3, [pc, #304]	; (159c <FSK_core+0x15c>)
     very difficult to do another way */
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_hi_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_i[j];
    146a:	1c39      	adds	r1, r7, #0
    
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_hi_q, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_q[j];
    146c:	4698      	mov	r8, r3
    146e:	4b4c      	ldr	r3, [pc, #304]	; (15a0 <FSK_core+0x160>)
    1470:	469b      	mov	fp, r3
     very difficult to do another way */
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_hi_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_i[j];
    1472:	2400      	movs	r4, #0
    1474:	5f03      	ldrsh	r3, [r0, r4]
    1476:	1c34      	adds	r4, r6, #0
    1478:	436c      	muls	r4, r5
    147a:	46a1      	mov	r9, r4
    147c:	2708      	movs	r7, #8
    147e:	5fc4      	ldrsh	r4, [r0, r7]

  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_i[j];
    1480:	4667      	mov	r7, ip
     very difficult to do another way */
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_hi_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_i[j];
    1482:	9302      	str	r3, [sp, #8]

  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_i[j];
    1484:	9b01      	ldr	r3, [sp, #4]
     very difficult to do another way */
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_hi_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_i[j];
    1486:	9403      	str	r4, [sp, #12]

  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_i[j];
    1488:	435f      	muls	r7, r3
    148a:	46bc      	mov	ip, r7
    148c:	4f45      	ldr	r7, [pc, #276]	; (15a4 <FSK_core+0x164>)
     very difficult to do another way */
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_hi_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_i[j];
    148e:	9b02      	ldr	r3, [sp, #8]

  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_i[j];
    1490:	46ba      	mov	sl, r7
     very difficult to do another way */
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_hi_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_i[j];
    1492:	1c0f      	adds	r7, r1, #0
    1494:	4377      	muls	r7, r6

  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_i[j];
    1496:	4656      	mov	r6, sl
    1498:	436e      	muls	r6, r5
     very difficult to do another way */
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_hi_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_i[j];
    149a:	9704      	str	r7, [sp, #16]
    
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_hi_q, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_q[j];
    149c:	465f      	mov	r7, fp

  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_i[j];
    149e:	46b3      	mov	fp, r6
    
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_hi_q, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_q[j];
    14a0:	4e41      	ldr	r6, [pc, #260]	; (15a8 <FSK_core+0x168>)
     very difficult to do another way */
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_hi_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_i[j];
    14a2:	039b      	lsls	r3, r3, #14
    
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_hi_q, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_q[j];
    14a4:	434e      	muls	r6, r1
    14a6:	9605      	str	r6, [sp, #20]
     very difficult to do another way */
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_hi_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_i[j];
    14a8:	4e3a      	ldr	r6, [pc, #232]	; (1594 <FSK_core+0x154>)
    14aa:	189a      	adds	r2, r3, r2
    14ac:	4374      	muls	r4, r6

  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_i[j];
    14ae:	4e3f      	ldr	r6, [pc, #252]	; (15ac <FSK_core+0x16c>)
    14b0:	4463      	add	r3, ip
    14b2:	46b4      	mov	ip, r6
     very difficult to do another way */
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_hi_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_i[j];
    14b4:	9e04      	ldr	r6, [sp, #16]
    14b6:	444a      	add	r2, r9
    14b8:	46b2      	mov	sl, r6
    14ba:	46a1      	mov	r9, r4
    14bc:	240a      	movs	r4, #10
    14be:	5f06      	ldrsh	r6, [r0, r4]
    14c0:	240c      	movs	r4, #12
    14c2:	5f00      	ldrsh	r0, [r0, r4]

  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_i[j];
    14c4:	4664      	mov	r4, ip
    14c6:	434c      	muls	r4, r1
     very difficult to do another way */
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_hi_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_i[j];
    14c8:	4452      	add	r2, sl

  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_i[j];
    14ca:	46a2      	mov	sl, r4
        
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_q, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_q[j];
    14cc:	4c38      	ldr	r4, [pc, #224]	; (15b0 <FSK_core+0x170>)
    
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_hi_q, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_q[j];
    14ce:	436f      	muls	r7, r5
        
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_q, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_q[j];
    14d0:	46a4      	mov	ip, r4
     very difficult to do another way */
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_hi_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_i[j];
    14d2:	4c30      	ldr	r4, [pc, #192]	; (1594 <FSK_core+0x154>)

  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_i[j];
    14d4:	445b      	add	r3, fp
     very difficult to do another way */
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_hi_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_i[j];
    14d6:	4344      	muls	r4, r0
    14d8:	9404      	str	r4, [sp, #16]
        
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_q, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_q[j];
    14da:	4664      	mov	r4, ip
    14dc:	436c      	muls	r4, r5
    14de:	9407      	str	r4, [sp, #28]
    
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_hi_q, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_q[j];
    14e0:	4644      	mov	r4, r8
    14e2:	46bb      	mov	fp, r7

  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_i[j];
    14e4:	9102      	str	r1, [sp, #8]
        
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_q, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_q[j];
    14e6:	4d33      	ldr	r5, [pc, #204]	; (15b4 <FSK_core+0x174>)
    14e8:	9901      	ldr	r1, [sp, #4]
     very difficult to do another way */
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_hi_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_i[j];
    14ea:	4491      	add	r9, r2
        
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_q, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_q[j];
    14ec:	434d      	muls	r5, r1
    
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_hi_q, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_q[j];
    14ee:	4361      	muls	r1, r4
    14f0:	448b      	add	fp, r1
    14f2:	4931      	ldr	r1, [pc, #196]	; (15b8 <FSK_core+0x178>)
    14f4:	4344      	muls	r4, r0
    14f6:	1c0a      	adds	r2, r1, #0
    14f8:	9406      	str	r4, [sp, #24]
    14fa:	9c03      	ldr	r4, [sp, #12]

  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_i[j];
    14fc:	4453      	add	r3, sl
    
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_hi_q, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_q[j];
    14fe:	4362      	muls	r2, r4
    1500:	9203      	str	r2, [sp, #12]

  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_i[j];
    1502:	4a2e      	ldr	r2, [pc, #184]	; (15bc <FSK_core+0x17c>)
    1504:	1c21      	adds	r1, r4, #0
    1506:	4354      	muls	r4, r2
    
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_hi_q, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_q[j];
    1508:	9a05      	ldr	r2, [sp, #20]

  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_i[j];
    150a:	9301      	str	r3, [sp, #4]
    
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_hi_q, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_q[j];
    150c:	4694      	mov	ip, r2
        
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_q, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_q[j];
    150e:	9b07      	ldr	r3, [sp, #28]
    
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_hi_q, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_q[j];
    1510:	44e3      	add	fp, ip
        
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_q, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_q[j];
    1512:	469c      	mov	ip, r3

  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_i[j];
    1514:	46a0      	mov	r8, r4
        
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_q, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_q[j];
    1516:	4a2a      	ldr	r2, [pc, #168]	; (15c0 <FSK_core+0x180>)
    1518:	9c02      	ldr	r4, [sp, #8]
    151a:	4465      	add	r5, ip
    151c:	4354      	muls	r4, r2

  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_i[j];
    151e:	4a29      	ldr	r2, [pc, #164]	; (15c4 <FSK_core+0x184>)
    1520:	9b01      	ldr	r3, [sp, #4]
    1522:	4372      	muls	r2, r6
    1524:	9202      	str	r2, [sp, #8]
        
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_q, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_q[j];
    1526:	4a28      	ldr	r2, [pc, #160]	; (15c8 <FSK_core+0x188>)

  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_i[j];
    1528:	4443      	add	r3, r8
        
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_q, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_q[j];
    152a:	4694      	mov	ip, r2
    152c:	1c0a      	adds	r2, r1, #0
    152e:	4661      	mov	r1, ip
    1530:	434a      	muls	r2, r1

  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_i[j];
    1532:	4926      	ldr	r1, [pc, #152]	; (15cc <FSK_core+0x18c>)
        
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_q, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_q[j];
    1534:	4694      	mov	ip, r2

  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_i[j];
    1536:	468a      	mov	sl, r1
    1538:	4652      	mov	r2, sl
    153a:	4342      	muls	r2, r0
    153c:	4692      	mov	sl, r2
        
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_q, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_q[j];
    153e:	4a24      	ldr	r2, [pc, #144]	; (15d0 <FSK_core+0x190>)
    1540:	4924      	ldr	r1, [pc, #144]	; (15d4 <FSK_core+0x194>)
    1542:	4350      	muls	r0, r2
     very difficult to do another way */
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_hi_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_i[j];
    1544:	9a04      	ldr	r2, [sp, #16]
    1546:	03b7      	lsls	r7, r6, #14
    1548:	4690      	mov	r8, r2
    154a:	1bbf      	subs	r7, r7, r6
        
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_q, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_q[j];
    154c:	434e      	muls	r6, r1
    
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_hi_q, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_q[j];
    154e:	9903      	ldr	r1, [sp, #12]
    1550:	9a06      	ldr	r2, [sp, #24]
     very difficult to do another way */
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_hi_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_i[j];
    1552:	444f      	add	r7, r9
    1554:	4447      	add	r7, r8
    
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_hi_q, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_q[j];
    1556:	4690      	mov	r8, r2

  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_i[j];
    1558:	9a02      	ldr	r2, [sp, #8]
    
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_hi_q, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_q[j];
    155a:	4459      	add	r1, fp
        
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_q, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_q[j];
    155c:	1964      	adds	r4, r4, r5
    
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_hi_q, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_q[j];
    155e:	4441      	add	r1, r8

  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_i[j];
    1560:	189a      	adds	r2, r3, r2
        
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_q, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_q[j];
    1562:	4464      	add	r4, ip

  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_i[j];
    1564:	4452      	add	r2, sl
        
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_q, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_q[j];
    1566:	1936      	adds	r6, r6, r4
  //			fsk_const.filter_hi_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_i[j];
  }
  corr = corr >> COS_BITS;
    1568:	13bf      	asrs	r7, r7, #14
  //			fsk_const.filter_hi_q, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_q[j];
  }
  corr = corr >> COS_BITS;
    156a:	1389      	asrs	r1, r1, #14
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_i[j];
  }
  corr = corr >> COS_BITS;
  sum = corr * corr;
    156c:	437f      	muls	r7, r7
        
  //    corr = dsp_dot_prod(fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size,
  //			fsk_const.filter_lo_q, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_q[j];
    156e:	1980      	adds	r0, r0, r6
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_q[j];
  }
  corr = corr >> COS_BITS;
  sum += corr * corr;
    1570:	4349      	muls	r1, r1
  //			fsk_const.filter_lo_i, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_i[j];
  }
  corr = corr >> COS_BITS;
    1572:	1392      	asrs	r2, r2, #14
  sum -= corr * corr;
    1574:	4352      	muls	r2, r2
  //			fsk_const.filter_lo_q, fsk_const.filter_size, 0);
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_q[j];
  }
  corr = corr >> COS_BITS;
    1576:	1380      	asrs	r0, r0, #14
  sum -= corr * corr;
    1578:	4340      	muls	r0, r0
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_hi_q[j];
  }
  corr = corr >> COS_BITS;
  sum += corr * corr;
    157a:	19c9      	adds	r1, r1, r7
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_i[j];
  }
  corr = corr >> COS_BITS;
  sum -= corr * corr;
    157c:	1a8f      	subs	r7, r1, r2
  corr = 0;
  for( j = 0; j < fsk_const.filter_size; j++ ) {
    corr += b[j] * fsk_const.filter_lo_q[j];
  }
  corr = corr >> COS_BITS;
  sum -= corr * corr;
    157e:	1a38      	subs	r0, r7, r0
  
  return sum;
}
    1580:	b009      	add	sp, #36	; 0x24
    1582:	bc3c      	pop	{r2, r3, r4, r5}
    1584:	4690      	mov	r8, r2
    1586:	4699      	mov	r9, r3
    1588:	46a2      	mov	sl, r4
    158a:	46ab      	mov	fp, r5
    158c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    158e:	46c0      	nop			; (mov r8, r8)
    1590:	00002934 	.word	0x00002934
    1594:	000013c6 	.word	0x000013c6
    1598:	ffffcc3a 	.word	0xffffcc3a
    159c:	00003cde 	.word	0x00003cde
    15a0:	0000259e 	.word	0x0000259e
    15a4:	fffff511 	.word	0xfffff511
    15a8:	ffffda62 	.word	0xffffda62
    15ac:	ffffc8b6 	.word	0xffffc8b6
    15b0:	00003f0e 	.word	0x00003f0e
    15b4:	000030f8 	.word	0x000030f8
    15b8:	ffffc322 	.word	0xffffc322
    15bc:	ffffc3be 	.word	0xffffc3be
    15c0:	0000203b 	.word	0x0000203b
    15c4:	ffffe9b1 	.word	0xffffe9b1
    15c8:	ffffea73 	.word	0xffffea73
    15cc:	00001f88 	.word	0x00001f88
    15d0:	ffffc84f 	.word	0xffffc84f
    15d4:	ffffc404 	.word	0xffffc404
    15d8:	46c0      	nop			; (mov r8, r8)
    15da:	46c0      	nop			; (mov r8, r8)
    15dc:	46c0      	nop			; (mov r8, r8)
    15de:	46c0      	nop			; (mov r8, r8)

000015e0 <FSKdemod>:

void FSKdemod(int16_t *samples, uint32_t nb, put_bit_func put_bit)
{
    15e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    15e2:	465f      	mov	r7, fp
    15e4:	4656      	mov	r6, sl
    15e6:	464d      	mov	r5, r9
    15e8:	4644      	mov	r4, r8
    15ea:	b4f0      	push	{r4, r5, r6, r7}
    15ec:	b083      	sub	sp, #12

  //    GPIOB->PSOR |= (1 << 6);   // red
  // measure time to complete: 133.2us
  // number of samples processed: 8 -> needs to get to 106us, ideally 100us for OS overhead
  
  for(i = 0; i < nb; i++) {
    15ee:	2900      	cmp	r1, #0
    15f0:	d048      	beq.n	1684 <FSKdemod+0xa4>
    fsk_state.filter_buf[fsk_state.buf_ptr++] = samples[i] >> fsk_state.shift;
    if (fsk_state.buf_ptr == FSK_FILTER_BUF_SIZE) {
      memmove(fsk_state.filter_buf, 
	      fsk_state.filter_buf + FSK_FILTER_BUF_SIZE - fsk_const.filter_size, 
	      fsk_const.filter_size * sizeof(int16_t));
      fsk_state.buf_ptr = fsk_const.filter_size;
    15f2:	2307      	movs	r3, #7
    15f4:	469b      	mov	fp, r3
       frequency, we tend to modify the baud phase so that it is
       in the middle of two bits */
    if (fsk_state.lastsample != newsample) {
      fsk_state.lastsample = newsample;
      //            printf("pll=%0.3f (%d)\n", fsk_state.baud_pll / 65536.0, newsample);
      if (fsk_state.baud_pll < 0x8000)
    15f6:	4b2c      	ldr	r3, [pc, #176]	; (16a8 <FSKdemod+0xc8>)
    15f8:	4c2c      	ldr	r4, [pc, #176]	; (16ac <FSKdemod+0xcc>)
    15fa:	4698      	mov	r8, r3
  
  for(i = 0; i < nb; i++) {
    /* add a new sample in the demodulation filter */
    fsk_state.filter_buf[fsk_state.buf_ptr++] = samples[i] >> fsk_state.shift;
    if (fsk_state.buf_ptr == FSK_FILTER_BUF_SIZE) {
      memmove(fsk_state.filter_buf, 
    15fc:	230e      	movs	r3, #14
    15fe:	469a      	mov	sl, r3
    1600:	4691      	mov	r9, r2
    1602:	9101      	str	r1, [sp, #4]
    1604:	1c05      	adds	r5, r0, #0

  //    GPIOB->PSOR |= (1 << 6);   // red
  // measure time to complete: 133.2us
  // number of samples processed: 8 -> needs to get to 106us, ideally 100us for OS overhead
  
  for(i = 0; i < nb; i++) {
    1606:	2600      	movs	r6, #0
    /* add a new sample in the demodulation filter */
    fsk_state.filter_buf[fsk_state.buf_ptr++] = samples[i] >> fsk_state.shift;
    if (fsk_state.buf_ptr == FSK_FILTER_BUF_SIZE) {
      memmove(fsk_state.filter_buf, 
    1608:	44a2      	add	sl, r4
    160a:	e00b      	b.n	1624 <FSKdemod+0x44>
       in the middle of two bits */
    if (fsk_state.lastsample != newsample) {
      fsk_state.lastsample = newsample;
      //            printf("pll=%0.3f (%d)\n", fsk_state.baud_pll / 65536.0, newsample);
      if (fsk_state.baud_pll < 0x8000)
        fsk_state.baud_pll += fsk_state.baud_pll_adj;
    160c:	1859      	adds	r1, r3, r1
      else
        fsk_state.baud_pll -= fsk_state.baud_pll_adj;
    }
        
    fsk_state.baud_pll += fsk_state.baud_incr;
    160e:	6a23      	ldr	r3, [r4, #32]
    
    if (fsk_state.baud_pll >= 0x10000) {
    1610:	4827      	ldr	r0, [pc, #156]	; (16b0 <FSKdemod+0xd0>)
        fsk_state.baud_pll += fsk_state.baud_pll_adj;
      else
        fsk_state.baud_pll -= fsk_state.baud_pll_adj;
    }
        
    fsk_state.baud_pll += fsk_state.baud_incr;
    1612:	18cb      	adds	r3, r1, r3
    
    if (fsk_state.baud_pll >= 0x10000) {
    1614:	4283      	cmp	r3, r0
    1616:	dc2a      	bgt.n	166e <FSKdemod+0x8e>
        fsk_state.baud_pll += fsk_state.baud_pll_adj;
      else
        fsk_state.baud_pll -= fsk_state.baud_pll_adj;
    }
        
    fsk_state.baud_pll += fsk_state.baud_incr;
    1618:	6263      	str	r3, [r4, #36]	; 0x24

  //    GPIOB->PSOR |= (1 << 6);   // red
  // measure time to complete: 133.2us
  // number of samples processed: 8 -> needs to get to 106us, ideally 100us for OS overhead
  
  for(i = 0; i < nb; i++) {
    161a:	9b01      	ldr	r3, [sp, #4]
    161c:	3601      	adds	r6, #1
    161e:	3502      	adds	r5, #2
    1620:	429e      	cmp	r6, r3
    1622:	d02f      	beq.n	1684 <FSKdemod+0xa4>
    /* add a new sample in the demodulation filter */
    fsk_state.filter_buf[fsk_state.buf_ptr++] = samples[i] >> fsk_state.shift;
    1624:	7f23      	ldrb	r3, [r4, #28]
    1626:	2232      	movs	r2, #50	; 0x32
    1628:	5ea1      	ldrsh	r1, [r4, r2]
    162a:	1c58      	adds	r0, r3, #1
    162c:	b2c0      	uxtb	r0, r0
    162e:	7720      	strb	r0, [r4, #28]
    1630:	2700      	movs	r7, #0
    1632:	5fea      	ldrsh	r2, [r5, r7]
    1634:	005b      	lsls	r3, r3, #1
    1636:	410a      	asrs	r2, r1
    1638:	52e2      	strh	r2, [r4, r3]
    if (fsk_state.buf_ptr == FSK_FILTER_BUF_SIZE) {
    163a:	280e      	cmp	r0, #14
    163c:	d02b      	beq.n	1696 <FSKdemod+0xb6>
	      fsk_state.filter_buf + FSK_FILTER_BUF_SIZE - fsk_const.filter_size, 
	      fsk_const.filter_size * sizeof(int16_t));
      fsk_state.buf_ptr = fsk_const.filter_size;
    }
        
    b = fsk_state.filter_buf + fsk_state.buf_ptr - fsk_const.filter_size;
    163e:	0040      	lsls	r0, r0, #1
    1640:	1820      	adds	r0, r4, r0
    1642:	380e      	subs	r0, #14

    sum = FSK_core(b);
    1644:	f7ff fefc 	bl	1440 <FSK_core>
    newsample = sum > 0;

    /* baud PLL synchronisation : when we see a transition of
       frequency, we tend to modify the baud phase so that it is
       in the middle of two bits */
    if (fsk_state.lastsample != newsample) {
    1648:	8e22      	ldrh	r2, [r4, #48]	; 0x30
    sum = FSK_core(b);
    
    //tempo = (s16) (sum / 65536.0);
    //fwrite(&tempo, 1, sizeof(s16), fout);
	
    newsample = sum > 0;
    164a:	17c3      	asrs	r3, r0, #31
    164c:	1a18      	subs	r0, r3, r0

    /* baud PLL synchronisation : when we see a transition of
       frequency, we tend to modify the baud phase so that it is
       in the middle of two bits */
    if (fsk_state.lastsample != newsample) {
    164e:	b213      	sxth	r3, r2
    sum = FSK_core(b);
    
    //tempo = (s16) (sum / 65536.0);
    //fwrite(&tempo, 1, sizeof(s16), fout);
	
    newsample = sum > 0;
    1650:	0fc0      	lsrs	r0, r0, #31

    /* baud PLL synchronisation : when we see a transition of
       frequency, we tend to modify the baud phase so that it is
       in the middle of two bits */
    if (fsk_state.lastsample != newsample) {
    1652:	4283      	cmp	r3, r0
    1654:	d01d      	beq.n	1692 <FSKdemod+0xb2>
      fsk_state.lastsample = newsample;
      //            printf("pll=%0.3f (%d)\n", fsk_state.baud_pll / 65536.0, newsample);
      if (fsk_state.baud_pll < 0x8000)
    1656:	6a63      	ldr	r3, [r4, #36]	; 0x24

    /* baud PLL synchronisation : when we see a transition of
       frequency, we tend to modify the baud phase so that it is
       in the middle of two bits */
    if (fsk_state.lastsample != newsample) {
      fsk_state.lastsample = newsample;
    1658:	b282      	uxth	r2, r0
    165a:	8622      	strh	r2, [r4, #48]	; 0x30
      //            printf("pll=%0.3f (%d)\n", fsk_state.baud_pll / 65536.0, newsample);
      if (fsk_state.baud_pll < 0x8000)
        fsk_state.baud_pll += fsk_state.baud_pll_adj;
    165c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
       frequency, we tend to modify the baud phase so that it is
       in the middle of two bits */
    if (fsk_state.lastsample != newsample) {
      fsk_state.lastsample = newsample;
      //            printf("pll=%0.3f (%d)\n", fsk_state.baud_pll / 65536.0, newsample);
      if (fsk_state.baud_pll < 0x8000)
    165e:	4543      	cmp	r3, r8
    1660:	ddd4      	ble.n	160c <FSKdemod+0x2c>
        fsk_state.baud_pll += fsk_state.baud_pll_adj;
      else
        fsk_state.baud_pll -= fsk_state.baud_pll_adj;
    1662:	1a59      	subs	r1, r3, r1
    }
        
    fsk_state.baud_pll += fsk_state.baud_incr;
    1664:	6a23      	ldr	r3, [r4, #32]
    
    if (fsk_state.baud_pll >= 0x10000) {
    1666:	4812      	ldr	r0, [pc, #72]	; (16b0 <FSKdemod+0xd0>)
        fsk_state.baud_pll += fsk_state.baud_pll_adj;
      else
        fsk_state.baud_pll -= fsk_state.baud_pll_adj;
    }
        
    fsk_state.baud_pll += fsk_state.baud_incr;
    1668:	18cb      	adds	r3, r1, r3
    
    if (fsk_state.baud_pll >= 0x10000) {
    166a:	4283      	cmp	r3, r0
    166c:	ddd4      	ble.n	1618 <FSKdemod+0x38>
      fsk_state.baud_pll -= 0x10000;
    166e:	4911      	ldr	r1, [pc, #68]	; (16b4 <FSKdemod+0xd4>)
      //            printf("baud=%f (%d)\n", fsk_state.baud_pll / 65536.0, fsk_state.lastsample);
      put_bit(fsk_state.lastsample);
    1670:	b210      	sxth	r0, r2
    }
        
    fsk_state.baud_pll += fsk_state.baud_incr;
    
    if (fsk_state.baud_pll >= 0x10000) {
      fsk_state.baud_pll -= 0x10000;
    1672:	468c      	mov	ip, r1
    1674:	4463      	add	r3, ip
    1676:	6263      	str	r3, [r4, #36]	; 0x24
      //            printf("baud=%f (%d)\n", fsk_state.baud_pll / 65536.0, fsk_state.lastsample);
      put_bit(fsk_state.lastsample);
    1678:	47c8      	blx	r9

  //    GPIOB->PSOR |= (1 << 6);   // red
  // measure time to complete: 133.2us
  // number of samples processed: 8 -> needs to get to 106us, ideally 100us for OS overhead
  
  for(i = 0; i < nb; i++) {
    167a:	9b01      	ldr	r3, [sp, #4]
    167c:	3601      	adds	r6, #1
    167e:	3502      	adds	r5, #2
    1680:	429e      	cmp	r6, r3
    1682:	d1cf      	bne.n	1624 <FSKdemod+0x44>
      put_bit(fsk_state.lastsample);
    }
  }
  
  //    GPIOB->PCOR |= (1 << 6);   // red
}
    1684:	b003      	add	sp, #12
    1686:	bc3c      	pop	{r2, r3, r4, r5}
    1688:	4690      	mov	r8, r2
    168a:	4699      	mov	r9, r3
    168c:	46a2      	mov	sl, r4
    168e:	46ab      	mov	fp, r5
    1690:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1692:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1694:	e7bb      	b.n	160e <FSKdemod+0x2e>
  
  for(i = 0; i < nb; i++) {
    /* add a new sample in the demodulation filter */
    fsk_state.filter_buf[fsk_state.buf_ptr++] = samples[i] >> fsk_state.shift;
    if (fsk_state.buf_ptr == FSK_FILTER_BUF_SIZE) {
      memmove(fsk_state.filter_buf, 
    1696:	1c20      	adds	r0, r4, #0
    1698:	4651      	mov	r1, sl
    169a:	220e      	movs	r2, #14
    169c:	f002 f8d8 	bl	3850 <memcpy>
	      fsk_state.filter_buf + FSK_FILTER_BUF_SIZE - fsk_const.filter_size, 
	      fsk_const.filter_size * sizeof(int16_t));
      fsk_state.buf_ptr = fsk_const.filter_size;
    16a0:	465b      	mov	r3, fp
    16a2:	2007      	movs	r0, #7
    16a4:	7723      	strb	r3, [r4, #28]
    16a6:	e7ca      	b.n	163e <FSKdemod+0x5e>
    16a8:	00007fff 	.word	0x00007fff
    16ac:	20000518 	.word	0x20000518
    16b0:	0000ffff 	.word	0x0000ffff
    16b4:	ffff0000 	.word	0xffff0000
    16b8:	46c0      	nop			; (mov r8, r8)
    16ba:	46c0      	nop			; (mov r8, r8)
    16bc:	46c0      	nop			; (mov r8, r8)
    16be:	46c0      	nop			; (mov r8, r8)

000016c0 <demodInit>:

void demodInit(void) {
  int32_t a;
  
  fsk_state.baud_incr = ((int32_t) fsk_const.baud_rate * 0x10000L) / (int32_t) fsk_const.sample_rate;
  fsk_state.baud_pll = 0;
    16c0:	2200      	movs	r2, #0
  fsk_state.baud_pll_adj = fsk_state.baud_incr / 4;

  memset(fsk_state.filter_buf, 0, sizeof(fsk_state.filter_buf));
  fsk_state.buf_ptr = fsk_const.filter_size;
    16c2:	2007      	movs	r0, #7
    16c4:	2101      	movs	r1, #1
  }
  
  //    GPIOB->PCOR |= (1 << 6);   // red
}

void demodInit(void) {
    16c6:	b530      	push	{r4, r5, lr}
  int32_t a;
  
  fsk_state.baud_incr = ((int32_t) fsk_const.baud_rate * 0x10000L) / (int32_t) fsk_const.sample_rate;
    16c8:	4b08      	ldr	r3, [pc, #32]	; (16ec <demodInit+0x2c>)
    16ca:	4d09      	ldr	r5, [pc, #36]	; (16f0 <demodInit+0x30>)
  fsk_state.baud_pll = 0;
  fsk_state.baud_pll_adj = fsk_state.baud_incr / 4;
    16cc:	4c09      	ldr	r4, [pc, #36]	; (16f4 <demodInit+0x34>)
}

void demodInit(void) {
  int32_t a;
  
  fsk_state.baud_incr = ((int32_t) fsk_const.baud_rate * 0x10000L) / (int32_t) fsk_const.sample_rate;
    16ce:	621d      	str	r5, [r3, #32]
  fsk_state.baud_pll = 0;
    16d0:	625a      	str	r2, [r3, #36]	; 0x24
  fsk_state.baud_pll_adj = fsk_state.baud_incr / 4;

  memset(fsk_state.filter_buf, 0, sizeof(fsk_state.filter_buf));
    16d2:	601a      	str	r2, [r3, #0]
    16d4:	605a      	str	r2, [r3, #4]
    16d6:	609a      	str	r2, [r3, #8]
    16d8:	60da      	str	r2, [r3, #12]
    16da:	611a      	str	r2, [r3, #16]
    16dc:	615a      	str	r2, [r3, #20]
    16de:	619a      	str	r2, [r3, #24]
  fsk_state.buf_ptr = fsk_const.filter_size;
  fsk_state.lastsample = 0;
    16e0:	861a      	strh	r2, [r3, #48]	; 0x30
void demodInit(void) {
  int32_t a;
  
  fsk_state.baud_incr = ((int32_t) fsk_const.baud_rate * 0x10000L) / (int32_t) fsk_const.sample_rate;
  fsk_state.baud_pll = 0;
  fsk_state.baud_pll_adj = fsk_state.baud_incr / 4;
    16e2:	629c      	str	r4, [r3, #40]	; 0x28

  memset(fsk_state.filter_buf, 0, sizeof(fsk_state.filter_buf));
  fsk_state.buf_ptr = fsk_const.filter_size;
    16e4:	7718      	strb	r0, [r3, #28]
    16e6:	8659      	strh	r1, [r3, #50]	; 0x32
  a = fsk_const.filter_size;
  while (a != 0) {
    fsk_state.shift++;
    a /= 2;
  }
}
    16e8:	bd30      	pop	{r4, r5, pc}
    16ea:	46c0      	nop			; (mov r8, r8)
    16ec:	20000518 	.word	0x20000518
    16f0:	000020c4 	.word	0x000020c4
    16f4:	00000831 	.word	0x00000831
    16f8:	46c0      	nop			; (mov r8, r8)
    16fa:	46c0      	nop			; (mov r8, r8)
    16fc:	46c0      	nop			; (mov r8, r8)
    16fe:	46c0      	nop			; (mov r8, r8)

00001700 <MurmurHash3_x86_32>:

//-----------------------------------------------------------------------------

void MurmurHash3_x86_32 ( const void * key, int len,
			  uint32_t seed, void * out )
{
    1700:	b5f0      	push	{r4, r5, r6, r7, lr}
    1702:	4657      	mov	r7, sl
    1704:	468a      	mov	sl, r1
    1706:	4645      	mov	r5, r8
    1708:	464e      	mov	r6, r9
    170a:	4698      	mov	r8, r3
  const uint8_t * data = (const uint8_t*)key;
  const int nblocks = len / 4;
    170c:	17cb      	asrs	r3, r1, #31
    170e:	0f9b      	lsrs	r3, r3, #30
    1710:	4453      	add	r3, sl
    1712:	109b      	asrs	r3, r3, #2
  const uint32_t c2 = 0x1b873593;

  //----------
  // body

  const uint32_t * blocks = (const uint32_t *)(data + nblocks*4);
    1714:	009c      	lsls	r4, r3, #2

  for(int i = -nblocks; i; i++)
    1716:	425b      	negs	r3, r3

//-----------------------------------------------------------------------------

void MurmurHash3_x86_32 ( const void * key, int len,
			  uint32_t seed, void * out )
{
    1718:	b4e0      	push	{r5, r6, r7}
  //----------
  // body

  const uint32_t * blocks = (const uint32_t *)(data + nblocks*4);

  for(int i = -nblocks; i; i++)
    171a:	2b00      	cmp	r3, #0
    171c:	d045      	beq.n	17aa <MurmurHash3_x86_32+0xaa>
    171e:	009b      	lsls	r3, r3, #2
    1720:	18e5      	adds	r5, r4, r3
    {
      uint32_t k1 = getblock32(blocks,i);

      k1 *= c1;
    1722:	4b23      	ldr	r3, [pc, #140]	; (17b0 <MurmurHash3_x86_32+0xb0>)
//-----------------------------------------------------------------------------
#define FORCE_INLINE inline __attribute__((always_inline))

inline uint32_t rotl32 ( uint32_t x, int8_t r )
{
  return (x << r) | (x >> (32 - r));
    1724:	2613      	movs	r6, #19

  for(int i = -nblocks; i; i++)
    {
      uint32_t k1 = getblock32(blocks,i);

      k1 *= c1;
    1726:	469c      	mov	ip, r3
//-----------------------------------------------------------------------------
#define FORCE_INLINE inline __attribute__((always_inline))

inline uint32_t rotl32 ( uint32_t x, int8_t r )
{
  return (x << r) | (x >> (32 - r));
    1728:	2311      	movs	r3, #17
    {
      uint32_t k1 = getblock32(blocks,i);

      k1 *= c1;
      k1 = ROTL32(k1,15);
      k1 *= c2;
    172a:	4f22      	ldr	r7, [pc, #136]	; (17b4 <MurmurHash3_x86_32+0xb4>)
    172c:	1945      	adds	r5, r0, r5
    172e:	1900      	adds	r0, r0, r4

  for(int i = -nblocks; i; i++)
    {
      uint32_t k1 = getblock32(blocks,i);

      k1 *= c1;
    1730:	4661      	mov	r1, ip
    1732:	cd10      	ldmia	r5!, {r4}
    1734:	434c      	muls	r4, r1
//-----------------------------------------------------------------------------
#define FORCE_INLINE inline __attribute__((always_inline))

inline uint32_t rotl32 ( uint32_t x, int8_t r )
{
  return (x << r) | (x >> (32 - r));
    1736:	41dc      	rors	r4, r3
    {
      uint32_t k1 = getblock32(blocks,i);

      k1 *= c1;
      k1 = ROTL32(k1,15);
      k1 *= c2;
    1738:	437c      	muls	r4, r7

      h1 ^= k1;
    173a:	4062      	eors	r2, r4
//-----------------------------------------------------------------------------
#define FORCE_INLINE inline __attribute__((always_inline))

inline uint32_t rotl32 ( uint32_t x, int8_t r )
{
  return (x << r) | (x >> (32 - r));
    173c:	41f2      	rors	r2, r6
      k1 = ROTL32(k1,15);
      k1 *= c2;

      h1 ^= k1;
      h1 = ROTL32(h1,13);
      h1 = h1*5+0xe6546b64;
    173e:	491e      	ldr	r1, [pc, #120]	; (17b8 <MurmurHash3_x86_32+0xb8>)
    1740:	0094      	lsls	r4, r2, #2
    1742:	4689      	mov	r9, r1
    1744:	18a2      	adds	r2, r4, r2
    1746:	444a      	add	r2, r9
  //----------
  // body

  const uint32_t * blocks = (const uint32_t *)(data + nblocks*4);

  for(int i = -nblocks; i; i++)
    1748:	42a8      	cmp	r0, r5
    174a:	d1f1      	bne.n	1730 <MurmurHash3_x86_32+0x30>

  const uint8_t * tail = (const uint8_t*)(data + nblocks*4);

  uint32_t k1 = 0;

  switch(len & 3)
    174c:	2303      	movs	r3, #3
    174e:	4651      	mov	r1, sl
    1750:	400b      	ands	r3, r1
    1752:	2b02      	cmp	r3, #2
    1754:	d027      	beq.n	17a6 <MurmurHash3_x86_32+0xa6>
    1756:	2b03      	cmp	r3, #3
    1758:	d01f      	beq.n	179a <MurmurHash3_x86_32+0x9a>
    175a:	2b01      	cmp	r3, #1
    175c:	d012      	beq.n	1784 <MurmurHash3_x86_32+0x84>
    };

  //----------
  // finalization

  h1 ^= len;
    175e:	4653      	mov	r3, sl
    1760:	405a      	eors	r2, r3
//-----------------------------------------------------------------------------
// Finalization mix - force all bits of a hash block to avalanche

FORCE_INLINE uint32_t fmix32 ( uint32_t h )
{
  h ^= h >> 16;
    1762:	0c11      	lsrs	r1, r2, #16
    1764:	404a      	eors	r2, r1
  h *= 0x85ebca6b;
    1766:	4915      	ldr	r1, [pc, #84]	; (17bc <MurmurHash3_x86_32+0xbc>)
  h ^= h >> 13;
  h *= 0xc2b2ae35;
    1768:	4b15      	ldr	r3, [pc, #84]	; (17c0 <MurmurHash3_x86_32+0xc0>)
// Finalization mix - force all bits of a hash block to avalanche

FORCE_INLINE uint32_t fmix32 ( uint32_t h )
{
  h ^= h >> 16;
  h *= 0x85ebca6b;
    176a:	434a      	muls	r2, r1
  h ^= h >> 13;
    176c:	0b51      	lsrs	r1, r2, #13
    176e:	404a      	eors	r2, r1
  h *= 0xc2b2ae35;
    1770:	435a      	muls	r2, r3
  h ^= h >> 16;
    1772:	0c13      	lsrs	r3, r2, #16
    1774:	405a      	eors	r2, r3

  h1 ^= len;

  h1 = fmix32(h1);

  *(uint32_t*)out = h1;
    1776:	4643      	mov	r3, r8
    1778:	601a      	str	r2, [r3, #0]
}
    177a:	bc1c      	pop	{r2, r3, r4}
    177c:	4690      	mov	r8, r2
    177e:	4699      	mov	r9, r3
    1780:	46a2      	mov	sl, r4
    1782:	bdf0      	pop	{r4, r5, r6, r7, pc}
  //----------
  // tail

  const uint8_t * tail = (const uint8_t*)(data + nblocks*4);

  uint32_t k1 = 0;
    1784:	2300      	movs	r3, #0

  switch(len & 3)
    {
    case 3: k1 ^= tail[2] << 16;
    case 2: k1 ^= tail[1] << 8;
    case 1: k1 ^= tail[0];
    1786:	7800      	ldrb	r0, [r0, #0]
    1788:	4043      	eors	r3, r0
      k1 *= c1; k1 = ROTL32(k1,15); k1 *= c2; h1 ^= k1;
    178a:	4809      	ldr	r0, [pc, #36]	; (17b0 <MurmurHash3_x86_32+0xb0>)
    178c:	4343      	muls	r3, r0
//-----------------------------------------------------------------------------
#define FORCE_INLINE inline __attribute__((always_inline))

inline uint32_t rotl32 ( uint32_t x, int8_t r )
{
  return (x << r) | (x >> (32 - r));
    178e:	2011      	movs	r0, #17
    1790:	41c3      	rors	r3, r0
  switch(len & 3)
    {
    case 3: k1 ^= tail[2] << 16;
    case 2: k1 ^= tail[1] << 8;
    case 1: k1 ^= tail[0];
      k1 *= c1; k1 = ROTL32(k1,15); k1 *= c2; h1 ^= k1;
    1792:	4808      	ldr	r0, [pc, #32]	; (17b4 <MurmurHash3_x86_32+0xb4>)
    1794:	4343      	muls	r3, r0
    1796:	405a      	eors	r2, r3
    1798:	e7e1      	b.n	175e <MurmurHash3_x86_32+0x5e>

  uint32_t k1 = 0;

  switch(len & 3)
    {
    case 3: k1 ^= tail[2] << 16;
    179a:	7883      	ldrb	r3, [r0, #2]
    179c:	041c      	lsls	r4, r3, #16
    case 2: k1 ^= tail[1] << 8;
    179e:	7843      	ldrb	r3, [r0, #1]
    17a0:	021b      	lsls	r3, r3, #8
    17a2:	4063      	eors	r3, r4
    17a4:	e7ef      	b.n	1786 <MurmurHash3_x86_32+0x86>
  //----------
  // tail

  const uint8_t * tail = (const uint8_t*)(data + nblocks*4);

  uint32_t k1 = 0;
    17a6:	2400      	movs	r4, #0
    17a8:	e7f9      	b.n	179e <MurmurHash3_x86_32+0x9e>
    17aa:	1900      	adds	r0, r0, r4
    17ac:	e7ce      	b.n	174c <MurmurHash3_x86_32+0x4c>
    17ae:	46c0      	nop			; (mov r8, r8)
    17b0:	cc9e2d51 	.word	0xcc9e2d51
    17b4:	1b873593 	.word	0x1b873593
    17b8:	e6546b64 	.word	0xe6546b64
    17bc:	85ebca6b 	.word	0x85ebca6b
    17c0:	c2b2ae35 	.word	0xc2b2ae35
    17c4:	46c0      	nop			; (mov r8, r8)
    17c6:	46c0      	nop			; (mov r8, r8)
    17c8:	46c0      	nop			; (mov r8, r8)
    17ca:	46c0      	nop			; (mov r8, r8)
    17cc:	46c0      	nop			; (mov r8, r8)
    17ce:	46c0      	nop			; (mov r8, r8)

000017d0 <updaterPacketProcess>:
// guarantee entering here: all packets are "good" (as in they pass mac-level hash checks)
// this state machine really fucks up flash if you pass random garbage into it:
// it'll repeatedly erase flash due to guid mismatch fails!
// we also assume the packets are the correct version; the MAC should reject packets for
// versions that don't match our firmware
int8_t updaterPacketProcess(uint8_t *pkt) {
    17d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    17d2:	464f      	mov	r7, r9
    17d4:	4646      	mov	r6, r8
    17d6:	b4c0      	push	{r6, r7}
  demod_data_pkt *dpkt;
  demod_ctrl_pkt *cpkt;
  uint32_t i;
  int8_t err = 0;

  tfp_printf( "S%d ", (uint8_t) astate );
    17d8:	4d92      	ldr	r5, [pc, #584]	; (1a24 <updaterPacketProcess+0x254>)
// guarantee entering here: all packets are "good" (as in they pass mac-level hash checks)
// this state machine really fucks up flash if you pass random garbage into it:
// it'll repeatedly erase flash due to guid mismatch fails!
// we also assume the packets are the correct version; the MAC should reject packets for
// versions that don't match our firmware
int8_t updaterPacketProcess(uint8_t *pkt) {
    17da:	b08d      	sub	sp, #52	; 0x34
    17dc:	1c07      	adds	r7, r0, #0
    17de:	7829      	ldrb	r1, [r5, #0]
  demod_data_pkt *dpkt;
  demod_ctrl_pkt *cpkt;
  uint32_t i;
  int8_t err = 0;

  tfp_printf( "S%d ", (uint8_t) astate );
    17e0:	4891      	ldr	r0, [pc, #580]	; (1a28 <updaterPacketProcess+0x258>)
    17e2:	f001 fd1d 	bl	3220 <tfp_printf>
  switch(astate) {
    17e6:	682e      	ldr	r6, [r5, #0]
    17e8:	2e02      	cmp	r6, #2
    17ea:	d039      	beq.n	1860 <updaterPacketProcess+0x90>
    17ec:	2e03      	cmp	r6, #3
    17ee:	d025      	beq.n	183c <updaterPacketProcess+0x6c>
// versions that don't match our firmware
int8_t updaterPacketProcess(uint8_t *pkt) {
  demod_data_pkt *dpkt;
  demod_ctrl_pkt *cpkt;
  uint32_t i;
  int8_t err = 0;
    17f0:	2400      	movs	r4, #0

  tfp_printf( "S%d ", (uint8_t) astate );
  switch(astate) {
    17f2:	2e00      	cmp	r6, #0
    17f4:	d008      	beq.n	1808 <updaterPacketProcess+0x38>
    
  default:
    break;
  }

  pktReady = 0;
    17f6:	2200      	movs	r2, #0
    17f8:	4b8c      	ldr	r3, [pc, #560]	; (1a2c <updaterPacketProcess+0x25c>)

  return err; // sort of bogus because I only return the last flash error encountered...
    17fa:	b260      	sxtb	r0, r4
    
  default:
    break;
  }

  pktReady = 0;
    17fc:	701a      	strb	r2, [r3, #0]

  return err; // sort of bogus because I only return the last flash error encountered...
}
    17fe:	b00d      	add	sp, #52	; 0x34
    1800:	bc0c      	pop	{r2, r3}
    1802:	4690      	mov	r8, r2
    1804:	4699      	mov	r9, r3
    1806:	bdf0      	pop	{r4, r5, r6, r7, pc}
  tfp_printf( "S%d ", (uint8_t) astate );
  switch(astate) {
  case APP_IDLE:
    cpkt = (demod_ctrl_pkt *) pkt; // expecting a control packet
    
    if( (cpkt->version & PKTTYPE_MASK) != PKTTYPE_CTRL )
    1808:	783b      	ldrb	r3, [r7, #0]
// versions that don't match our firmware
int8_t updaterPacketProcess(uint8_t *pkt) {
  demod_data_pkt *dpkt;
  demod_ctrl_pkt *cpkt;
  uint32_t i;
  int8_t err = 0;
    180a:	2400      	movs	r4, #0
  tfp_printf( "S%d ", (uint8_t) astate );
  switch(astate) {
  case APP_IDLE:
    cpkt = (demod_ctrl_pkt *) pkt; // expecting a control packet
    
    if( (cpkt->version & PKTTYPE_MASK) != PKTTYPE_CTRL )
    180c:	2b7f      	cmp	r3, #127	; 0x7f
    180e:	d9f2      	bls.n	17f6 <updaterPacketProcess+0x26>
      break; // if not a control packet, stay in idle

    // we don't check the magic #, just guid because chance of collision is remote
    if( memcmp( storageHdr->guid, cpkt->guid, 16 ) == 0 ) {
    1810:	4b87      	ldr	r3, [pc, #540]	; (1a30 <updaterPacketProcess+0x260>)
    1812:	2210      	movs	r2, #16
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	1c18      	adds	r0, r3, #0
    1818:	4698      	mov	r8, r3
    181a:	2309      	movs	r3, #9
    181c:	4699      	mov	r9, r3
    181e:	44b9      	add	r9, r7
    1820:	3010      	adds	r0, #16
    1822:	4649      	mov	r1, r9
    1824:	f002 f804 	bl	3830 <memcmp>
    1828:	2800      	cmp	r0, #0
    182a:	d000      	beq.n	182e <updaterPacketProcess+0x5e>
    182c:	e0c2      	b.n	19b4 <updaterPacketProcess+0x1e4>
      if( storageHdr->complete == 0xFFFFFFFF ) {
    182e:	4643      	mov	r3, r8
    1830:	6a1b      	ldr	r3, [r3, #32]
    1832:	3301      	adds	r3, #1
    1834:	d1df      	bne.n	17f6 <updaterPacketProcess+0x26>
    // let's nuke the flash to make room for the new code and pray the update doesn't fail.
    err = flashEraseSectors(SECTOR_MIN, SECTOR_COUNT);

    // now init the storage header
    init_storage_header(cpkt);
    astate = APP_UPDATING;
    1836:	2302      	movs	r3, #2
    1838:	602b      	str	r3, [r5, #0]
    break;
    183a:	e7dc      	b.n	17f6 <updaterPacketProcess+0x26>
static app_state astate = APP_IDLE;

const storage_header *storageHdr = (const storage_header *) STORAGE_START;

void bootToUserApp(void) {
  tfp_printf( "\n\r Reached boot to user app!!!\n\r" );
    183c:	487d      	ldr	r0, [pc, #500]	; (1a34 <updaterPacketProcess+0x264>)
    183e:	f001 fcef 	bl	3220 <tfp_printf>
  GPIOB->PCOR |= (1 << 6);   // blue on
    1842:	2340      	movs	r3, #64	; 0x40
    1844:	4a7c      	ldr	r2, [pc, #496]	; (1a38 <updaterPacketProcess+0x268>)
    1846:	6891      	ldr	r1, [r2, #8]
    1848:	430b      	orrs	r3, r1
    184a:	6093      	str	r3, [r2, #8]
      -- soft reset
   */

  struct app_header *app = (struct app_header *)0x5900;

  if ((app->magic == APP_MAGIC) && (app->version == APP_VERSION))
    184c:	23b2      	movs	r3, #178	; 0xb2
    184e:	01db      	lsls	r3, r3, #7
    1850:	4a7a      	ldr	r2, [pc, #488]	; (1a3c <updaterPacketProcess+0x26c>)
    1852:	6999      	ldr	r1, [r3, #24]
    1854:	4291      	cmp	r1, r2
    1856:	d06c      	beq.n	1932 <updaterPacketProcess+0x162>
    }
    break;

  case APP_UPDATED:
    bootToUserApp();
    astate = APP_FAIL;
    1858:	2304      	movs	r3, #4
// versions that don't match our firmware
int8_t updaterPacketProcess(uint8_t *pkt) {
  demod_data_pkt *dpkt;
  demod_ctrl_pkt *cpkt;
  uint32_t i;
  int8_t err = 0;
    185a:	2400      	movs	r4, #0
    }
    break;

  case APP_UPDATED:
    bootToUserApp();
    astate = APP_FAIL;
    185c:	602b      	str	r3, [r5, #0]
    break;
    185e:	e7ca      	b.n	17f6 <updaterPacketProcess+0x26>
    init_storage_header(cpkt);
    astate = APP_UPDATING;
    break;

  case APP_UPDATING:
    if( storageHdr->magic != STORAGE_MAGIC ) { // we should /only/ get here if the header has been initialized!!
    1860:	4e73      	ldr	r6, [pc, #460]	; (1a30 <updaterPacketProcess+0x260>)
// versions that don't match our firmware
int8_t updaterPacketProcess(uint8_t *pkt) {
  demod_data_pkt *dpkt;
  demod_ctrl_pkt *cpkt;
  uint32_t i;
  int8_t err = 0;
    1862:	2400      	movs	r4, #0
    init_storage_header(cpkt);
    astate = APP_UPDATING;
    break;

  case APP_UPDATING:
    if( storageHdr->magic != STORAGE_MAGIC ) { // we should /only/ get here if the header has been initialized!!
    1864:	6833      	ldr	r3, [r6, #0]
    1866:	685a      	ldr	r2, [r3, #4]
    1868:	4b75      	ldr	r3, [pc, #468]	; (1a40 <updaterPacketProcess+0x270>)
    186a:	429a      	cmp	r2, r3
    186c:	d00b      	beq.n	1886 <updaterPacketProcess+0xb6>
      // some kind of corruption to internal header, reset the system to a known state
      err = flashEraseSectors(SECTOR_MIN, SECTOR_COUNT);
    186e:	4975      	ldr	r1, [pc, #468]	; (1a44 <updaterPacketProcess+0x274>)
    1870:	4875      	ldr	r0, [pc, #468]	; (1a48 <updaterPacketProcess+0x278>)
    1872:	0a89      	lsrs	r1, r1, #10
    1874:	0a80      	lsrs	r0, r0, #10
    1876:	3101      	adds	r1, #1
    1878:	1a09      	subs	r1, r1, r0
    187a:	b289      	uxth	r1, r1
    187c:	f000 f9c0 	bl	1c00 <flashEraseSectors>
      astate = APP_IDLE;
    1880:	2300      	movs	r3, #0
    break;

  case APP_UPDATING:
    if( storageHdr->magic != STORAGE_MAGIC ) { // we should /only/ get here if the header has been initialized!!
      // some kind of corruption to internal header, reset the system to a known state
      err = flashEraseSectors(SECTOR_MIN, SECTOR_COUNT);
    1882:	1c04      	adds	r4, r0, #0
      astate = APP_IDLE;
    1884:	602b      	str	r3, [r5, #0]
    }
    dpkt = (demod_data_pkt *) pkt;
    if( (dpkt->version & PKTTYPE_MASK) != PKTTYPE_DATA )
    1886:	783b      	ldrb	r3, [r7, #0]
    1888:	2b7f      	cmp	r3, #127	; 0x7f
    188a:	d8b4      	bhi.n	17f6 <updaterPacketProcess+0x26>
      break; // if not a data packet, ignore and wait again

    // check and see if the current sector we're trying to write has been updated before
    // flashing it. It's bad for Flash to write over a sector that's got data
    uint16_t block = dpkt->block[0] | dpkt->block[1] << 8;
    if( storageHdr->blockmap[block] == 0xFFFFFFFF ) {
    188c:	466a      	mov	r2, sp
    if( (dpkt->version & PKTTYPE_MASK) != PKTTYPE_DATA )
      break; // if not a data packet, ignore and wait again

    // check and see if the current sector we're trying to write has been updated before
    // flashing it. It's bad for Flash to write over a sector that's got data
    uint16_t block = dpkt->block[0] | dpkt->block[1] << 8;
    188e:	78b9      	ldrb	r1, [r7, #2]
    1890:	787b      	ldrb	r3, [r7, #1]
    1892:	0209      	lsls	r1, r1, #8
    1894:	430b      	orrs	r3, r1
    if( storageHdr->blockmap[block] == 0xFFFFFFFF ) {
    1896:	80d3      	strh	r3, [r2, #6]
    if( (dpkt->version & PKTTYPE_MASK) != PKTTYPE_DATA )
      break; // if not a data packet, ignore and wait again

    // check and see if the current sector we're trying to write has been updated before
    // flashing it. It's bad for Flash to write over a sector that's got data
    uint16_t block = dpkt->block[0] | dpkt->block[1] << 8;
    1898:	4698      	mov	r8, r3
    if( storageHdr->blockmap[block] == 0xFFFFFFFF ) {
    189a:	88d3      	ldrh	r3, [r2, #6]
    189c:	1c19      	adds	r1, r3, #0
    189e:	4699      	mov	r9, r3
    18a0:	6833      	ldr	r3, [r6, #0]
    18a2:	3108      	adds	r1, #8
    18a4:	469c      	mov	ip, r3
    18a6:	0089      	lsls	r1, r1, #2
    18a8:	4461      	add	r1, ip
    18aa:	684b      	ldr	r3, [r1, #4]
    18ac:	3301      	adds	r3, #1
    18ae:	d046      	beq.n	193e <updaterPacketProcess+0x16e>
      
      // only program if the blockmap says it's not been programmed
      err = flashProgram(dpkt->payload, (uint8_t *) (STORAGE_PROGRAM_OFFSET + (block * BLOCK_SIZE)), BLOCK_SIZE);
      tfp_printf( " d%d", err );
    } else {
      tfp_printf( " _%d", (uint8_t) block ); // redundant block received
    18b0:	466a      	mov	r2, sp
    18b2:	4643      	mov	r3, r8
    18b4:	7193      	strb	r3, [r2, #6]
    18b6:	7991      	ldrb	r1, [r2, #6]
    18b8:	4864      	ldr	r0, [pc, #400]	; (1a4c <updaterPacketProcess+0x27c>)
    18ba:	f001 fcb1 	bl	3220 <tfp_printf>
    // potential race condition where we could have received the last block, but failed to blow the
    // "complete" flag, due to a power failure at the wrong time
    // in other words, don't make the below check an "else" clause of the previous "if" thinking it's
    // an optimization.
    uint8_t alldone = 1;
    for( i = 0; i < ((storageHdr->length - 1) / BLOCK_SIZE) + 1; i++ ) {
    18be:	6833      	ldr	r3, [r6, #0]
    18c0:	2001      	movs	r0, #1
    18c2:	68da      	ldr	r2, [r3, #12]
    18c4:	4694      	mov	ip, r2
    18c6:	4661      	mov	r1, ip
    18c8:	1c1a      	adds	r2, r3, #0
    18ca:	1e4f      	subs	r7, r1, #1
    18cc:	0a3f      	lsrs	r7, r7, #8
    18ce:	370a      	adds	r7, #10
    18d0:	00bf      	lsls	r7, r7, #2
    18d2:	3224      	adds	r2, #36	; 0x24
    18d4:	19df      	adds	r7, r3, r7
    18d6:	ca08      	ldmia	r2!, {r3}
    18d8:	3301      	adds	r3, #1
    18da:	1e59      	subs	r1, r3, #1
    18dc:	418b      	sbcs	r3, r1
    18de:	425b      	negs	r3, r3
    18e0:	4018      	ands	r0, r3
    18e2:	42ba      	cmp	r2, r7
    18e4:	d1f7      	bne.n	18d6 <updaterPacketProcess+0x106>
      if( storageHdr->blockmap[i] == 0xFFFFFFFF )
        alldone = 0;
    }
    if(!alldone)
    18e6:	2800      	cmp	r0, #0
    18e8:	d100      	bne.n	18ec <updaterPacketProcess+0x11c>
    18ea:	e784      	b.n	17f6 <updaterPacketProcess+0x26>
      break;  // stay in app-updating state

    // now that it's claimed to be done, do a full hash check and confirm this /actually/ worked
    uint32_t hash;
    MurmurHash3_x86_32((uint8_t *)STORAGE_PROGRAM_OFFSET, storageHdr->length, MURMUR_SEED_TOTAL, &hash);
    18ec:	4c58      	ldr	r4, [pc, #352]	; (1a50 <updaterPacketProcess+0x280>)
    18ee:	4a59      	ldr	r2, [pc, #356]	; (1a54 <updaterPacketProcess+0x284>)
    18f0:	1c20      	adds	r0, r4, #0
    18f2:	ab03      	add	r3, sp, #12
    18f4:	4661      	mov	r1, ip
    18f6:	f7ff ff03 	bl	1700 <MurmurHash3_x86_32>
    if(hash == storageHdr->fullhash) {
    18fa:	6830      	ldr	r0, [r6, #0]
    18fc:	9a03      	ldr	r2, [sp, #12]
    18fe:	6883      	ldr	r3, [r0, #8]
    1900:	4293      	cmp	r3, r2
    1902:	d03c      	beq.n	197e <updaterPacketProcess+0x1ae>
      err = flashProgram((uint8_t *)(&(storageHdr->complete)), (uint8_t *)&dummy, sizeof(uint32_t));
      astate = APP_UPDATED;
      bootToUserApp();
      astate = APP_FAIL;
    } else {
      tfp_printf( "\n\r Transfer complete but corrupted. Erase & retry.\n\r" );
    1904:	4854      	ldr	r0, [pc, #336]	; (1a58 <updaterPacketProcess+0x288>)
    1906:	f001 fc8b 	bl	3220 <tfp_printf>
      tfp_printf( "\n\r Source hash: %08x local hash: %08x\n\r", storageHdr->fullhash, hash );
    190a:	6833      	ldr	r3, [r6, #0]
    190c:	4853      	ldr	r0, [pc, #332]	; (1a5c <updaterPacketProcess+0x28c>)
    190e:	6899      	ldr	r1, [r3, #8]
    1910:	9a03      	ldr	r2, [sp, #12]
    1912:	f001 fc85 	bl	3220 <tfp_printf>
      
      // hash check failed. Something went wrong. Just nuke all of storage and bring us back to
      // a virgin state
      err = flashEraseSectors(SECTOR_MIN, SECTOR_COUNT);
    1916:	494b      	ldr	r1, [pc, #300]	; (1a44 <updaterPacketProcess+0x274>)
    1918:	1e60      	subs	r0, r4, #1
    191a:	38ff      	subs	r0, #255	; 0xff
    191c:	0a89      	lsrs	r1, r1, #10
    191e:	0a80      	lsrs	r0, r0, #10
    1920:	3101      	adds	r1, #1
    1922:	1a09      	subs	r1, r1, r0
    1924:	b289      	uxth	r1, r1
    1926:	f000 f96b 	bl	1c00 <flashEraseSectors>
      astate = APP_IDLE;
    192a:	2300      	movs	r3, #0
      tfp_printf( "\n\r Transfer complete but corrupted. Erase & retry.\n\r" );
      tfp_printf( "\n\r Source hash: %08x local hash: %08x\n\r", storageHdr->fullhash, hash );
      
      // hash check failed. Something went wrong. Just nuke all of storage and bring us back to
      // a virgin state
      err = flashEraseSectors(SECTOR_MIN, SECTOR_COUNT);
    192c:	1c04      	adds	r4, r0, #0
      astate = APP_IDLE;
    192e:	602b      	str	r3, [r5, #0]
    1930:	e761      	b.n	17f6 <updaterPacketProcess+0x26>
      -- soft reset
   */

  struct app_header *app = (struct app_header *)0x5900;

  if ((app->magic == APP_MAGIC) && (app->version == APP_VERSION))
    1932:	69da      	ldr	r2, [r3, #28]
    1934:	2380      	movs	r3, #128	; 0x80
    1936:	005b      	lsls	r3, r3, #1
    1938:	429a      	cmp	r2, r3
    193a:	d18d      	bne.n	1858 <updaterPacketProcess+0x88>
    193c:	e06e      	b.n	1a1c <updaterPacketProcess+0x24c>
      // NOTE: we first clear the block map before programming because if someone powers down
      // the system in the middle of the block programming, we don't want to accidentally reprogram
      // the block: this will overstress the flash
      // There's a full-program hash check later on that will save us from any partially programmed
      // blocks later on.....
      uint32_t dummy = 0;
    193e:	2300      	movs	r3, #0
      // clear the entry in the block map to record programming state
      err = flashProgram((uint8_t *)&dummy, (uint8_t *)(&(storageHdr->blockmap[block])), sizeof(uint32_t));
    1940:	3104      	adds	r1, #4
    1942:	a804      	add	r0, sp, #16
    1944:	2204      	movs	r2, #4
      // NOTE: we first clear the block map before programming because if someone powers down
      // the system in the middle of the block programming, we don't want to accidentally reprogram
      // the block: this will overstress the flash
      // There's a full-program hash check later on that will save us from any partially programmed
      // blocks later on.....
      uint32_t dummy = 0;
    1946:	9304      	str	r3, [sp, #16]
      // clear the entry in the block map to record programming state
      err = flashProgram((uint8_t *)&dummy, (uint8_t *)(&(storageHdr->blockmap[block])), sizeof(uint32_t));
    1948:	f000 fa12 	bl	1d70 <flashProgram>
      tfp_printf( "\n\r P%d b%d", (uint8_t) block, err );
    194c:	4643      	mov	r3, r8
    194e:	4669      	mov	r1, sp
    1950:	718b      	strb	r3, [r1, #6]
      // the block: this will overstress the flash
      // There's a full-program hash check later on that will save us from any partially programmed
      // blocks later on.....
      uint32_t dummy = 0;
      // clear the entry in the block map to record programming state
      err = flashProgram((uint8_t *)&dummy, (uint8_t *)(&(storageHdr->blockmap[block])), sizeof(uint32_t));
    1952:	1c02      	adds	r2, r0, #0
      tfp_printf( "\n\r P%d b%d", (uint8_t) block, err );
    1954:	7989      	ldrb	r1, [r1, #6]
    1956:	4842      	ldr	r0, [pc, #264]	; (1a60 <updaterPacketProcess+0x290>)
    1958:	f001 fc62 	bl	3220 <tfp_printf>
      
      // only program if the blockmap says it's not been programmed
      err = flashProgram(dpkt->payload, (uint8_t *) (STORAGE_PROGRAM_OFFSET + (block * BLOCK_SIZE)), BLOCK_SIZE);
    195c:	464b      	mov	r3, r9
    195e:	2280      	movs	r2, #128	; 0x80
    1960:	021b      	lsls	r3, r3, #8
    1962:	4939      	ldr	r1, [pc, #228]	; (1a48 <updaterPacketProcess+0x278>)
    1964:	3301      	adds	r3, #1
    1966:	33ff      	adds	r3, #255	; 0xff
    1968:	1859      	adds	r1, r3, r1
    196a:	1cf8      	adds	r0, r7, #3
    196c:	0052      	lsls	r2, r2, #1
    196e:	f000 f9ff 	bl	1d70 <flashProgram>
    1972:	1c04      	adds	r4, r0, #0
      tfp_printf( " d%d", err );
    1974:	483b      	ldr	r0, [pc, #236]	; (1a64 <updaterPacketProcess+0x294>)
    1976:	1c21      	adds	r1, r4, #0
    1978:	f001 fc52 	bl	3220 <tfp_printf>
    197c:	e79f      	b.n	18be <updaterPacketProcess+0xee>
    // now that it's claimed to be done, do a full hash check and confirm this /actually/ worked
    uint32_t hash;
    MurmurHash3_x86_32((uint8_t *)STORAGE_PROGRAM_OFFSET, storageHdr->length, MURMUR_SEED_TOTAL, &hash);
    if(hash == storageHdr->fullhash) {
      // hurray, we're done! mark the whole thing as complete
      uint32_t dummy = 0;
    197e:	2300      	movs	r3, #0
      err = flashProgram((uint8_t *)(&(storageHdr->complete)), (uint8_t *)&dummy, sizeof(uint32_t));
    1980:	a904      	add	r1, sp, #16
    1982:	2204      	movs	r2, #4
    1984:	3020      	adds	r0, #32
    // now that it's claimed to be done, do a full hash check and confirm this /actually/ worked
    uint32_t hash;
    MurmurHash3_x86_32((uint8_t *)STORAGE_PROGRAM_OFFSET, storageHdr->length, MURMUR_SEED_TOTAL, &hash);
    if(hash == storageHdr->fullhash) {
      // hurray, we're done! mark the whole thing as complete
      uint32_t dummy = 0;
    1986:	9304      	str	r3, [sp, #16]
      err = flashProgram((uint8_t *)(&(storageHdr->complete)), (uint8_t *)&dummy, sizeof(uint32_t));
    1988:	f000 f9f2 	bl	1d70 <flashProgram>
      astate = APP_UPDATED;
    198c:	2303      	movs	r3, #3
    uint32_t hash;
    MurmurHash3_x86_32((uint8_t *)STORAGE_PROGRAM_OFFSET, storageHdr->length, MURMUR_SEED_TOTAL, &hash);
    if(hash == storageHdr->fullhash) {
      // hurray, we're done! mark the whole thing as complete
      uint32_t dummy = 0;
      err = flashProgram((uint8_t *)(&(storageHdr->complete)), (uint8_t *)&dummy, sizeof(uint32_t));
    198e:	1c04      	adds	r4, r0, #0
static app_state astate = APP_IDLE;

const storage_header *storageHdr = (const storage_header *) STORAGE_START;

void bootToUserApp(void) {
  tfp_printf( "\n\r Reached boot to user app!!!\n\r" );
    1990:	4828      	ldr	r0, [pc, #160]	; (1a34 <updaterPacketProcess+0x264>)
    MurmurHash3_x86_32((uint8_t *)STORAGE_PROGRAM_OFFSET, storageHdr->length, MURMUR_SEED_TOTAL, &hash);
    if(hash == storageHdr->fullhash) {
      // hurray, we're done! mark the whole thing as complete
      uint32_t dummy = 0;
      err = flashProgram((uint8_t *)(&(storageHdr->complete)), (uint8_t *)&dummy, sizeof(uint32_t));
      astate = APP_UPDATED;
    1992:	602b      	str	r3, [r5, #0]
static app_state astate = APP_IDLE;

const storage_header *storageHdr = (const storage_header *) STORAGE_START;

void bootToUserApp(void) {
  tfp_printf( "\n\r Reached boot to user app!!!\n\r" );
    1994:	f001 fc44 	bl	3220 <tfp_printf>
  GPIOB->PCOR |= (1 << 6);   // blue on
    1998:	2340      	movs	r3, #64	; 0x40
    199a:	4a27      	ldr	r2, [pc, #156]	; (1a38 <updaterPacketProcess+0x268>)
    199c:	6891      	ldr	r1, [r2, #8]
    199e:	430b      	orrs	r3, r1
    19a0:	6093      	str	r3, [r2, #8]
      -- soft reset
   */

  struct app_header *app = (struct app_header *)0x5900;

  if ((app->magic == APP_MAGIC) && (app->version == APP_VERSION))
    19a2:	23b2      	movs	r3, #178	; 0xb2
    19a4:	01db      	lsls	r3, r3, #7
    19a6:	4a25      	ldr	r2, [pc, #148]	; (1a3c <updaterPacketProcess+0x26c>)
    19a8:	6999      	ldr	r1, [r3, #24]
    19aa:	4291      	cmp	r1, r2
    19ac:	d031      	beq.n	1a12 <updaterPacketProcess+0x242>
      // hurray, we're done! mark the whole thing as complete
      uint32_t dummy = 0;
      err = flashProgram((uint8_t *)(&(storageHdr->complete)), (uint8_t *)&dummy, sizeof(uint32_t));
      astate = APP_UPDATED;
      bootToUserApp();
      astate = APP_FAIL;
    19ae:	2304      	movs	r3, #4
    19b0:	602b      	str	r3, [r5, #0]
    19b2:	e720      	b.n	17f6 <updaterPacketProcess+0x26>
      }
    }

    // ok, so now we've got a control packet, and it's for a new program guid.
    // let's nuke the flash to make room for the new code and pray the update doesn't fail.
    err = flashEraseSectors(SECTOR_MIN, SECTOR_COUNT);
    19b4:	4b24      	ldr	r3, [pc, #144]	; (1a48 <updaterPacketProcess+0x278>)
    19b6:	4698      	mov	r8, r3
    19b8:	0a98      	lsrs	r0, r3, #10
    19ba:	4b22      	ldr	r3, [pc, #136]	; (1a44 <updaterPacketProcess+0x274>)
    19bc:	0a9b      	lsrs	r3, r3, #10
    19be:	3301      	adds	r3, #1
    19c0:	1a1b      	subs	r3, r3, r0
    19c2:	b299      	uxth	r1, r3
    19c4:	f000 f91c 	bl	1c00 <flashEraseSectors>
void init_storage_header(demod_ctrl_pkt *cpkt) {
  storage_header_ram proto;
  uint32_t i;

  proto.version = STORAGE_VERSION;
  proto.magic = STORAGE_MAGIC;
    19c8:	4b1d      	ldr	r3, [pc, #116]	; (1a40 <updaterPacketProcess+0x270>)

void init_storage_header(demod_ctrl_pkt *cpkt) {
  storage_header_ram proto;
  uint32_t i;

  proto.version = STORAGE_VERSION;
    19ca:	9604      	str	r6, [sp, #16]
  proto.magic = STORAGE_MAGIC;
    19cc:	9305      	str	r3, [sp, #20]
  proto.fullhash = cpkt->fullhash[0] | cpkt->fullhash[1] << 8 | cpkt->fullhash[2] << 16 | cpkt->fullhash[3] << 24;
    19ce:	79bb      	ldrb	r3, [r7, #6]
    19d0:	4649      	mov	r1, r9
    19d2:	021a      	lsls	r2, r3, #8
    19d4:	79fb      	ldrb	r3, [r7, #7]
      }
    }

    // ok, so now we've got a control packet, and it's for a new program guid.
    // let's nuke the flash to make room for the new code and pray the update doesn't fail.
    err = flashEraseSectors(SECTOR_MIN, SECTOR_COUNT);
    19d6:	1c04      	adds	r4, r0, #0
  storage_header_ram proto;
  uint32_t i;

  proto.version = STORAGE_VERSION;
  proto.magic = STORAGE_MAGIC;
  proto.fullhash = cpkt->fullhash[0] | cpkt->fullhash[1] << 8 | cpkt->fullhash[2] << 16 | cpkt->fullhash[3] << 24;
    19d8:	041b      	lsls	r3, r3, #16
    19da:	4313      	orrs	r3, r2
    19dc:	797a      	ldrb	r2, [r7, #5]
    19de:	a808      	add	r0, sp, #32
    19e0:	431a      	orrs	r2, r3
    19e2:	7a3b      	ldrb	r3, [r7, #8]
    19e4:	061b      	lsls	r3, r3, #24
    19e6:	4313      	orrs	r3, r2
    19e8:	9306      	str	r3, [sp, #24]
  proto.length = cpkt->length[0] | cpkt->length[1] << 8 | cpkt->length[2] << 16 | cpkt->length[3] << 24;
    19ea:	78bb      	ldrb	r3, [r7, #2]
    19ec:	021a      	lsls	r2, r3, #8
    19ee:	78fb      	ldrb	r3, [r7, #3]
    19f0:	041b      	lsls	r3, r3, #16
    19f2:	4313      	orrs	r3, r2
    19f4:	787a      	ldrb	r2, [r7, #1]
    19f6:	431a      	orrs	r2, r3
    19f8:	793b      	ldrb	r3, [r7, #4]
    19fa:	061b      	lsls	r3, r3, #24
    19fc:	4313      	orrs	r3, r2
    19fe:	2210      	movs	r2, #16
    1a00:	9307      	str	r3, [sp, #28]
    1a02:	f001 ff25 	bl	3850 <memcpy>
  for(i = 0; i < GUID_BYTES; i++ ) {
    proto.guid[i] = cpkt->guid[i];
  }

  // this routine could fail, but...nothing to do if it doesn't work!
  flashProgram((uint8_t *) &proto, (uint8_t *) STORAGE_HEADER_OFFSET, sizeof(storage_header_ram));
    1a06:	a804      	add	r0, sp, #16
    1a08:	4641      	mov	r1, r8
    1a0a:	2220      	movs	r2, #32
    1a0c:	f000 f9b0 	bl	1d70 <flashProgram>
    1a10:	e711      	b.n	1836 <updaterPacketProcess+0x66>
      -- soft reset
   */

  struct app_header *app = (struct app_header *)0x5900;

  if ((app->magic == APP_MAGIC) && (app->version == APP_VERSION))
    1a12:	69da      	ldr	r2, [r3, #28]
    1a14:	2380      	movs	r3, #128	; 0x80
    1a16:	005b      	lsls	r3, r3, #1
    1a18:	429a      	cmp	r2, r3
    1a1a:	d1c8      	bne.n	19ae <updaterPacketProcess+0x1de>
    Run_App(app);
    1a1c:	20b2      	movs	r0, #178	; 0xb2
    1a1e:	01c0      	lsls	r0, r0, #7
    1a20:	f7fe fd7e 	bl	520 <Run_App>
    1a24:	2000074c 	.word	0x2000074c
    1a28:	00003ae4 	.word	0x00003ae4
    1a2c:	20000860 	.word	0x20000860
    1a30:	1ffffd84 	.word	0x1ffffd84
    1a34:	00003ac0 	.word	0x00003ac0
    1a38:	400ff040 	.word	0x400ff040
    1a3c:	d3fbf67a 	.word	0xd3fbf67a
    1a40:	62696843 	.word	0x62696843
    1a44:	00007fff 	.word	0x00007fff
    1a48:	00005800 	.word	0x00005800
    1a4c:	00003b00 	.word	0x00003b00
    1a50:	00005900 	.word	0x00005900
    1a54:	32d0babe 	.word	0x32d0babe
    1a58:	00003b08 	.word	0x00003b08
    1a5c:	00003b40 	.word	0x00003b40
    1a60:	00003aec 	.word	0x00003aec
    1a64:	00003af8 	.word	0x00003af8
    1a68:	46c0      	nop			; (mov r8, r8)
    1a6a:	46c0      	nop			; (mov r8, r8)
    1a6c:	46c0      	nop			; (mov r8, r8)
    1a6e:	46c0      	nop			; (mov r8, r8)

00001a70 <putBitMac>:
static uint16_t pkt_len = PKT_LEN;  // we'll adjust this later

// put_bit with a MAC layer on it
void putBitMac(int bit) {

  switch(mstate) {
    1a70:	4a52      	ldr	r2, [pc, #328]	; (1bbc <putBitMac+0x14c>)
static uint8_t mac_sync[4] = {0,0,0,0};
static uint8_t wordcnt = 0;
static uint16_t pkt_len = PKT_LEN;  // we'll adjust this later

// put_bit with a MAC layer on it
void putBitMac(int bit) {
    1a72:	b570      	push	{r4, r5, r6, lr}

  switch(mstate) {
    1a74:	6813      	ldr	r3, [r2, #0]
    1a76:	2b01      	cmp	r3, #1
    1a78:	d031      	beq.n	1ade <putBitMac+0x6e>
    1a7a:	2b00      	cmp	r3, #0
    1a7c:	d024      	beq.n	1ac8 <putBitMac+0x58>
    1a7e:	2b02      	cmp	r3, #2
    1a80:	d121      	bne.n	1ac6 <putBitMac+0x56>
      }
    }
    break;
    
  case MAC_PACKET:
    if( pktPtr < pkt_len ) {
    1a82:	4b4f      	ldr	r3, [pc, #316]	; (1bc0 <putBitMac+0x150>)
    1a84:	494f      	ldr	r1, [pc, #316]	; (1bc4 <putBitMac+0x154>)
    1a86:	881c      	ldrh	r4, [r3, #0]
    1a88:	880d      	ldrh	r5, [r1, #0]
    1a8a:	42a5      	cmp	r5, r4
    1a8c:	d954      	bls.n	1b38 <putBitMac+0xc8>
      if( pktPtr == 1 ) { // first byte is always version/type code
    1a8e:	881c      	ldrh	r4, [r3, #0]
    1a90:	2c01      	cmp	r4, #1
    1a92:	d069      	beq.n	1b68 <putBitMac+0xf8>
	    pktReady = 0;
	    idle_zeros = 0;
	  }
	}
      }
      g_curbyte >>= 1;
    1a94:	494c      	ldr	r1, [pc, #304]	; (1bc8 <putBitMac+0x158>)
      g_bitpos--;
    1a96:	4d4d      	ldr	r5, [pc, #308]	; (1bcc <putBitMac+0x15c>)
	    pktReady = 0;
	    idle_zeros = 0;
	  }
	}
      }
      g_curbyte >>= 1;
    1a98:	780a      	ldrb	r2, [r1, #0]
      g_bitpos--;
    1a9a:	682c      	ldr	r4, [r5, #0]
	    pktReady = 0;
	    idle_zeros = 0;
	  }
	}
      }
      g_curbyte >>= 1;
    1a9c:	0852      	lsrs	r2, r2, #1
      g_bitpos--;
    1a9e:	3c01      	subs	r4, #1
	    pktReady = 0;
	    idle_zeros = 0;
	  }
	}
      }
      g_curbyte >>= 1;
    1aa0:	700a      	strb	r2, [r1, #0]
      g_bitpos--;
    1aa2:	602c      	str	r4, [r5, #0]
      if( bit )
    1aa4:	2800      	cmp	r0, #0
    1aa6:	d002      	beq.n	1aae <putBitMac+0x3e>
	g_curbyte |= 0x80;
    1aa8:	2080      	movs	r0, #128	; 0x80
    1aaa:	4302      	orrs	r2, r0
    1aac:	700a      	strb	r2, [r1, #0]
      
      if(g_bitpos == 0) {
    1aae:	2c00      	cmp	r4, #0
    1ab0:	d109      	bne.n	1ac6 <putBitMac+0x56>
	pktBuf[pktPtr++] = g_curbyte;
    1ab2:	8818      	ldrh	r0, [r3, #0]
	g_bitpos = 8;
	g_curbyte = 0;
    1ab4:	700c      	strb	r4, [r1, #0]
      g_bitpos--;
      if( bit )
	g_curbyte |= 0x80;
      
      if(g_bitpos == 0) {
	pktBuf[pktPtr++] = g_curbyte;
    1ab6:	b280      	uxth	r0, r0
    1ab8:	1c46      	adds	r6, r0, #1
    1aba:	b2b6      	uxth	r6, r6
    1abc:	801e      	strh	r6, [r3, #0]
    1abe:	4b44      	ldr	r3, [pc, #272]	; (1bd0 <putBitMac+0x160>)
    1ac0:	541a      	strb	r2, [r3, r0]
	g_bitpos = 8;
    1ac2:	2308      	movs	r3, #8
    1ac4:	602b      	str	r3, [r5, #0]
    break;

  default:
    break;
  }
}
    1ac6:	bd70      	pop	{r4, r5, r6, pc}
void putBitMac(int bit) {

  switch(mstate) {
  case MAC_IDLE:
    // search until at least 32 zeros are found, then next transition "might" be sync
    if( idle_zeros > 32 ) {
    1ac8:	4c42      	ldr	r4, [pc, #264]	; (1bd4 <putBitMac+0x164>)
    1aca:	7821      	ldrb	r1, [r4, #0]
    1acc:	2920      	cmp	r1, #32
    1ace:	d92f      	bls.n	1b30 <putBitMac+0xc0>
      if( bit != 0 ) {
    1ad0:	2800      	cmp	r0, #0
    1ad2:	d13e      	bne.n	1b52 <putBitMac+0xe2>
	mstate = MAC_SYNC;
	g_bitpos = 6;
	g_curbyte = 0x80;
	wordcnt = 0;
      } else {
	if(idle_zeros < 255)
    1ad4:	29ff      	cmp	r1, #255	; 0xff
    1ad6:	d0f6      	beq.n	1ac6 <putBitMac+0x56>
      }
    } else {
      if( bit != 0 )
	idle_zeros = 0;
      else
	idle_zeros++;
    1ad8:	3101      	adds	r1, #1
    1ada:	7021      	strb	r1, [r4, #0]
    1adc:	e7f3      	b.n	1ac6 <putBitMac+0x56>
    }
    break;
    
  case MAC_SYNC:
    // acculumate two bytes worth of temp data, then check to see if valid sync
    g_curbyte >>= 1;
    1ade:	493a      	ldr	r1, [pc, #232]	; (1bc8 <putBitMac+0x158>)
    g_bitpos--;
    1ae0:	4d3a      	ldr	r5, [pc, #232]	; (1bcc <putBitMac+0x15c>)
    }
    break;
    
  case MAC_SYNC:
    // acculumate two bytes worth of temp data, then check to see if valid sync
    g_curbyte >>= 1;
    1ae2:	780b      	ldrb	r3, [r1, #0]
    g_bitpos--;
    1ae4:	682c      	ldr	r4, [r5, #0]
    }
    break;
    
  case MAC_SYNC:
    // acculumate two bytes worth of temp data, then check to see if valid sync
    g_curbyte >>= 1;
    1ae6:	085b      	lsrs	r3, r3, #1
    g_bitpos--;
    1ae8:	3c01      	subs	r4, #1
    }
    break;
    
  case MAC_SYNC:
    // acculumate two bytes worth of temp data, then check to see if valid sync
    g_curbyte >>= 1;
    1aea:	700b      	strb	r3, [r1, #0]
    g_bitpos--;
    1aec:	602c      	str	r4, [r5, #0]
    if( bit )
    1aee:	2800      	cmp	r0, #0
    1af0:	d005      	beq.n	1afe <putBitMac+0x8e>
      g_curbyte |= 0x80;
    1af2:	2080      	movs	r0, #128	; 0x80
    1af4:	4303      	orrs	r3, r0
    1af6:	700b      	strb	r3, [r1, #0]
    
    if( g_bitpos == 0 ) {
    1af8:	2c00      	cmp	r4, #0
    1afa:	d004      	beq.n	1b06 <putBitMac+0x96>
    1afc:	e7e3      	b.n	1ac6 <putBitMac+0x56>
    1afe:	2c00      	cmp	r4, #0
    1b00:	d1e1      	bne.n	1ac6 <putBitMac+0x56>
      if( g_curbyte == 0x00 ) {  // false noise trigger, go back to idle
    1b02:	2b00      	cmp	r3, #0
    1b04:	d020      	beq.n	1b48 <putBitMac+0xd8>
	mstate = MAC_IDLE;
	idle_zeros = 8; // we just saw 8 zeros, so count those
	break;
      }
      // else, tally up the sync characters
      mac_sync[wordcnt++] = g_curbyte;
    1b06:	4e34      	ldr	r6, [pc, #208]	; (1bd8 <putBitMac+0x168>)
    1b08:	7834      	ldrb	r4, [r6, #0]
    1b0a:	1c60      	adds	r0, r4, #1
    1b0c:	b2c0      	uxtb	r0, r0
    1b0e:	7030      	strb	r0, [r6, #0]
    1b10:	4e32      	ldr	r6, [pc, #200]	; (1bdc <putBitMac+0x16c>)
    1b12:	5533      	strb	r3, [r6, r4]
      g_bitpos = 8;
    1b14:	2308      	movs	r3, #8
    1b16:	602b      	str	r3, [r5, #0]
      g_curbyte = 0;
    1b18:	2300      	movs	r3, #0
    1b1a:	700b      	strb	r3, [r1, #0]
      if( wordcnt == 3 ) {
    1b1c:	2803      	cmp	r0, #3
    1b1e:	d1d2      	bne.n	1ac6 <putBitMac+0x56>
	// test for sync sequence. It's one byte less than the # of leading zeros
	// to allow for the idle escape trick above to work in case of zero-biased noise
	if( (mac_sync[0] == 0xAA) && (mac_sync[1] == 0x55) && (mac_sync[2] = 0x42)) {
    1b20:	7831      	ldrb	r1, [r6, #0]
    1b22:	29aa      	cmp	r1, #170	; 0xaa
    1b24:	d02f      	beq.n	1b86 <putBitMac+0x116>
	  osalDbgAssert(pktReady == 0, "Packet buffer full flag still set while new packet incoming\n\r");
	  mstate = MAC_PACKET;
	  pktPtr = 0;
	  pkt_len = PKT_LEN;
	} else {
	  mstate = MAC_IDLE;
    1b26:	2300      	movs	r3, #0
    1b28:	6013      	str	r3, [r2, #0]
	  idle_zeros = 0;
    1b2a:	4a2a      	ldr	r2, [pc, #168]	; (1bd4 <putBitMac+0x164>)
    1b2c:	7013      	strb	r3, [r2, #0]
    1b2e:	e7ca      	b.n	1ac6 <putBitMac+0x56>
      } else {
	if(idle_zeros < 255)
	  idle_zeros++;
      }
    } else {
      if( bit != 0 )
    1b30:	2800      	cmp	r0, #0
    1b32:	d0d1      	beq.n	1ad8 <putBitMac+0x68>
	idle_zeros = 0;
    1b34:	7023      	strb	r3, [r4, #0]
    1b36:	e7c6      	b.n	1ac6 <putBitMac+0x56>
	pktBuf[pktPtr++] = g_curbyte;
	g_bitpos = 8;
	g_curbyte = 0;
      }
    } else {
      mstate = MAC_IDLE;
    1b38:	2300      	movs	r3, #0
      pktReady = 1; // flag that the packet is ready
    1b3a:	2101      	movs	r1, #1
	pktBuf[pktPtr++] = g_curbyte;
	g_bitpos = 8;
	g_curbyte = 0;
      }
    } else {
      mstate = MAC_IDLE;
    1b3c:	6013      	str	r3, [r2, #0]
      pktReady = 1; // flag that the packet is ready
    1b3e:	4a28      	ldr	r2, [pc, #160]	; (1be0 <putBitMac+0x170>)
    1b40:	7011      	strb	r1, [r2, #0]
      idle_zeros = 0;
    1b42:	4a24      	ldr	r2, [pc, #144]	; (1bd4 <putBitMac+0x164>)
    1b44:	7013      	strb	r3, [r2, #0]
    1b46:	e7be      	b.n	1ac6 <putBitMac+0x56>
    if( bit )
      g_curbyte |= 0x80;
    
    if( g_bitpos == 0 ) {
      if( g_curbyte == 0x00 ) {  // false noise trigger, go back to idle
	mstate = MAC_IDLE;
    1b48:	6013      	str	r3, [r2, #0]
	idle_zeros = 8; // we just saw 8 zeros, so count those
    1b4a:	2208      	movs	r2, #8
    1b4c:	4b21      	ldr	r3, [pc, #132]	; (1bd4 <putBitMac+0x164>)
    1b4e:	701a      	strb	r2, [r3, #0]
	break;
    1b50:	e7b9      	b.n	1ac6 <putBitMac+0x56>
  switch(mstate) {
  case MAC_IDLE:
    // search until at least 32 zeros are found, then next transition "might" be sync
    if( idle_zeros > 32 ) {
      if( bit != 0 ) {
	mstate = MAC_SYNC;
    1b52:	2101      	movs	r1, #1
    1b54:	6011      	str	r1, [r2, #0]
	g_bitpos = 6;
    1b56:	2106      	movs	r1, #6
    1b58:	4a1c      	ldr	r2, [pc, #112]	; (1bcc <putBitMac+0x15c>)
    1b5a:	6011      	str	r1, [r2, #0]
	g_curbyte = 0x80;
    1b5c:	2180      	movs	r1, #128	; 0x80
    1b5e:	4a1a      	ldr	r2, [pc, #104]	; (1bc8 <putBitMac+0x158>)
    1b60:	7011      	strb	r1, [r2, #0]
	wordcnt = 0;
    1b62:	4a1d      	ldr	r2, [pc, #116]	; (1bd8 <putBitMac+0x168>)
    1b64:	7013      	strb	r3, [r2, #0]
    1b66:	e7ae      	b.n	1ac6 <putBitMac+0x56>
    break;
    
  case MAC_PACKET:
    if( pktPtr < pkt_len ) {
      if( pktPtr == 1 ) { // first byte is always version/type code
	if( (pktBuf[0] & PKTTYPE_MASK) == PKTTYPE_CTRL ) {
    1b68:	4c19      	ldr	r4, [pc, #100]	; (1bd0 <putBitMac+0x160>)
    1b6a:	7824      	ldrb	r4, [r4, #0]
    1b6c:	b265      	sxtb	r5, r4
    1b6e:	2d00      	cmp	r5, #0
    1b70:	db17      	blt.n	1ba2 <putBitMac+0x132>
	    idle_zeros = 0;
	  }
	  pkt_len = CTRL_LEN;  // we're looking for a control packet this time
	} else {
	  // it's a data packet, check version
	  if( (pktBuf[0] & ~PKTTYPE_MASK) != MAC_DATA_VER ) {
    1b72:	2c01      	cmp	r4, #1
    1b74:	d100      	bne.n	1b78 <putBitMac+0x108>
    1b76:	e78d      	b.n	1a94 <putBitMac+0x24>
	    // version code doesn't match, abort
	    mstate = MAC_IDLE;
    1b78:	2100      	movs	r1, #0
    1b7a:	6011      	str	r1, [r2, #0]
	    pktReady = 0;
    1b7c:	4a18      	ldr	r2, [pc, #96]	; (1be0 <putBitMac+0x170>)
    1b7e:	7011      	strb	r1, [r2, #0]
	    idle_zeros = 0;
    1b80:	4a14      	ldr	r2, [pc, #80]	; (1bd4 <putBitMac+0x164>)
    1b82:	7011      	strb	r1, [r2, #0]
    1b84:	e786      	b.n	1a94 <putBitMac+0x24>
      g_bitpos = 8;
      g_curbyte = 0;
      if( wordcnt == 3 ) {
	// test for sync sequence. It's one byte less than the # of leading zeros
	// to allow for the idle escape trick above to work in case of zero-biased noise
	if( (mac_sync[0] == 0xAA) && (mac_sync[1] == 0x55) && (mac_sync[2] = 0x42)) {
    1b86:	7871      	ldrb	r1, [r6, #1]
    1b88:	2955      	cmp	r1, #85	; 0x55
    1b8a:	d1cc      	bne.n	1b26 <putBitMac+0xb6>
    1b8c:	2142      	movs	r1, #66	; 0x42
    1b8e:	70b1      	strb	r1, [r6, #2]
	  // found the sync sequence, proceed to packet state
	  osalDbgAssert(pktReady == 0, "Packet buffer full flag still set while new packet incoming\n\r");
	  mstate = MAC_PACKET;
    1b90:	2102      	movs	r1, #2
    1b92:	6011      	str	r1, [r2, #0]
	  pktPtr = 0;
    1b94:	4a0a      	ldr	r2, [pc, #40]	; (1bc0 <putBitMac+0x150>)
    1b96:	8013      	strh	r3, [r2, #0]
	  pkt_len = PKT_LEN;
    1b98:	2208      	movs	r2, #8
    1b9a:	4b0a      	ldr	r3, [pc, #40]	; (1bc4 <putBitMac+0x154>)
    1b9c:	32ff      	adds	r2, #255	; 0xff
    1b9e:	801a      	strh	r2, [r3, #0]
    1ba0:	e791      	b.n	1ac6 <putBitMac+0x56>
    
  case MAC_PACKET:
    if( pktPtr < pkt_len ) {
      if( pktPtr == 1 ) { // first byte is always version/type code
	if( (pktBuf[0] & PKTTYPE_MASK) == PKTTYPE_CTRL ) {
	  if( (pktBuf[0] & ~PKTTYPE_MASK) != MAC_CTRL_VER ) {
    1ba2:	2580      	movs	r5, #128	; 0x80
    1ba4:	43ac      	bics	r4, r5
    1ba6:	2c01      	cmp	r4, #1
    1ba8:	d005      	beq.n	1bb6 <putBitMac+0x146>
	    // version code doesn't match, abort
	    mstate = MAC_IDLE;
    1baa:	2400      	movs	r4, #0
    1bac:	6014      	str	r4, [r2, #0]
	    pktReady = 0;
    1bae:	4a0c      	ldr	r2, [pc, #48]	; (1be0 <putBitMac+0x170>)
    1bb0:	7014      	strb	r4, [r2, #0]
	    idle_zeros = 0;
    1bb2:	4a08      	ldr	r2, [pc, #32]	; (1bd4 <putBitMac+0x164>)
    1bb4:	7014      	strb	r4, [r2, #0]
	  }
	  pkt_len = CTRL_LEN;  // we're looking for a control packet this time
    1bb6:	221d      	movs	r2, #29
    1bb8:	800a      	strh	r2, [r1, #0]
    1bba:	e76b      	b.n	1a94 <putBitMac+0x24>
    1bbc:	20000864 	.word	0x20000864
    1bc0:	2000085e 	.word	0x2000085e
    1bc4:	1ffffd88 	.word	0x1ffffd88
    1bc8:	20000862 	.word	0x20000862
    1bcc:	1ffffd8c 	.word	0x1ffffd8c
    1bd0:	20000750 	.word	0x20000750
    1bd4:	20000861 	.word	0x20000861
    1bd8:	2000085c 	.word	0x2000085c
    1bdc:	20000858 	.word	0x20000858
    1be0:	20000860 	.word	0x20000860
    1be4:	46c0      	nop			; (mov r8, r8)
    1be6:	46c0      	nop			; (mov r8, r8)
    1be8:	46c0      	nop			; (mov r8, r8)
    1bea:	46c0      	nop			; (mov r8, r8)
    1bec:	46c0      	nop			; (mov r8, r8)
    1bee:	46c0      	nop			; (mov r8, r8)

00001bf0 <callback>:
}

static void callback(void)
{
  // empty for now
}
    1bf0:	4770      	bx	lr
    1bf2:	46c0      	nop			; (mov r8, r8)
    1bf4:	46c0      	nop			; (mov r8, r8)
    1bf6:	46c0      	nop			; (mov r8, r8)
    1bf8:	46c0      	nop			; (mov r8, r8)
    1bfa:	46c0      	nop			; (mov r8, r8)
    1bfc:	46c0      	nop			; (mov r8, r8)
    1bfe:	46c0      	nop			; (mov r8, r8)

00001c00 <flashEraseSectors>:
    NULL_CALLBACK           /* pointer to callback function */
};

// offset is in sectors
// sectorCount is in sectors
int8_t flashEraseSectors(uint32_t offset, uint16_t sectorCount) {
    1c00:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c02:	4656      	mov	r6, sl
    1c04:	464d      	mov	r5, r9
    1c06:	465f      	mov	r7, fp
    1c08:	4644      	mov	r4, r8
  uint32_t margin_read_level;    /* 0=normal, 1=user - margin read for reading 1's */
  uint32_t ret;
  int8_t retval = F_ERR_OK;
  
  destination = offset;
  end = destination + (uint32_t) sectorCount;
    1c0a:	4689      	mov	r9, r1
    NULL_CALLBACK           /* pointer to callback function */
};

// offset is in sectors
// sectorCount is in sectors
int8_t flashEraseSectors(uint32_t offset, uint16_t sectorCount) {
    1c0c:	b4f0      	push	{r4, r5, r6, r7}
  int8_t retval = F_ERR_OK;
  
  destination = offset;
  end = destination + (uint32_t) sectorCount;

  if( destination < F_USER_SECTOR_START ) {
    1c0e:	4936      	ldr	r1, [pc, #216]	; (1ce8 <flashEraseSectors+0xe8>)
    NULL_CALLBACK           /* pointer to callback function */
};

// offset is in sectors
// sectorCount is in sectors
int8_t flashEraseSectors(uint32_t offset, uint16_t sectorCount) {
    1c10:	b083      	sub	sp, #12
    1c12:	1c06      	adds	r6, r0, #0
  uint32_t margin_read_level;    /* 0=normal, 1=user - margin read for reading 1's */
  uint32_t ret;
  int8_t retval = F_ERR_OK;
  
  destination = offset;
  end = destination + (uint32_t) sectorCount;
    1c14:	4481      	add	r9, r0

  if( destination < F_USER_SECTOR_START ) {
    1c16:	0a89      	lsrs	r1, r1, #10
    1c18:	4288      	cmp	r0, r1
    1c1a:	d35f      	bcc.n	1cdc <flashEraseSectors+0xdc>
    tfp_printf( "User sectors start at %d, aborting.\n\r", F_USER_SECTOR_START);
    retval = F_ERR_RANGE;
    return retval;
  }
  if( end > ((flashSSDConfig.PFlashBase + flashSSDConfig.PFlashSize) / FTFx_PSECTOR_SIZE) ) {
    1c1c:	4f33      	ldr	r7, [pc, #204]	; (1cec <flashEraseSectors+0xec>)
    1c1e:	6879      	ldr	r1, [r7, #4]
    1c20:	68bb      	ldr	r3, [r7, #8]
    1c22:	468c      	mov	ip, r1
    1c24:	4463      	add	r3, ip
    1c26:	0a9a      	lsrs	r2, r3, #10
    1c28:	4591      	cmp	r9, r2
    1c2a:	d851      	bhi.n	1cd0 <flashEraseSectors+0xd0>
	     end, (flashSSDConfig.PFlashBase + flashSSDConfig.PFlashSize) / FTFx_PSECTOR_SIZE);
    retval = F_ERR_RANGE;
    return retval;
  }
  
  tfp_printf( "ES%d-%d\n\r", destination, end - 1);
    1c2c:	464b      	mov	r3, r9
    1c2e:	4830      	ldr	r0, [pc, #192]	; (1cf0 <flashEraseSectors+0xf0>)
    1c30:	1e5a      	subs	r2, r3, #1
    1c32:	1c31      	adds	r1, r6, #0
    1c34:	f001 faf4 	bl	3220 <tfp_printf>
  
  while (destination < end) {
    1c38:	454e      	cmp	r6, r9
    1c3a:	d239      	bcs.n	1cb0 <flashEraseSectors+0xb0>
    1c3c:	2300      	movs	r3, #0
    1c3e:	469a      	mov	sl, r3
    1c40:	4b2c      	ldr	r3, [pc, #176]	; (1cf4 <flashEraseSectors+0xf4>)
    1c42:	02b5      	lsls	r5, r6, #10
    1c44:	4698      	mov	r8, r3
	tfp_printf( "Erase verify failed (%d), margin read level: %d\n\r", ret, margin_read_level );
	retval = F_ERR_LOWLEVEL;
      }
    }

    tfp_printf( " e%d ", destination );
    1c46:	4b2c      	ldr	r3, [pc, #176]	; (1cf8 <flashEraseSectors+0xf8>)
    1c48:	469b      	mov	fp, r3
    1c4a:	e00a      	b.n	1c62 <flashEraseSectors+0x62>
    1c4c:	1c31      	adds	r1, r6, #0
    1c4e:	4658      	mov	r0, fp
    1c50:	f001 fae6 	bl	3220 <tfp_printf>
    1c54:	2380      	movs	r3, #128	; 0x80
    1c56:	00db      	lsls	r3, r3, #3
    1c58:	469c      	mov	ip, r3
    destination++;
    1c5a:	3601      	adds	r6, #1
    1c5c:	4465      	add	r5, ip
    return retval;
  }
  
  tfp_printf( "ES%d-%d\n\r", destination, end - 1);
  
  while (destination < end) {
    1c5e:	45b1      	cmp	r9, r6
    1c60:	d928      	bls.n	1cb4 <flashEraseSectors+0xb4>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1c62:	b672      	cpsid	i
    chSysLock();
    ret = FlashEraseSector(&flashSSDConfig, destination * FTFx_PSECTOR_SIZE,
    1c64:	2280      	movs	r2, #128	; 0x80
    1c66:	4643      	mov	r3, r8
    1c68:	1c38      	adds	r0, r7, #0
    1c6a:	1c29      	adds	r1, r5, #0
    1c6c:	00d2      	lsls	r2, r2, #3
    1c6e:	681b      	ldr	r3, [r3, #0]
    1c70:	f001 fbce 	bl	3410 <FlashEraseSector>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1c74:	b662      	cpsie	i
			   FTFx_PSECTOR_SIZE, g_FlashLaunchCommand);
    chSysUnlock();
    if (FTFx_OK != ret) {
    1c76:	2800      	cmp	r0, #0
    1c78:	d128      	bne.n	1ccc <flashEraseSectors+0xcc>
    1c7a:	2400      	movs	r4, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1c7c:	b672      	cpsid	i
    // margin level = 0 normal, 1 user, 2 factory
    // factory is most stringent and only good on first P/E cycle
    // user level will detect if we're approaching normal margin, e.g. running out of margin
    for(margin_read_level = 0; margin_read_level < 0x2; margin_read_level++) {
      chSysLock();
      ret = FlashVerifySection(&flashSSDConfig, destination * FTFx_PSECTOR_SIZE, number, margin_read_level, g_FlashLaunchCommand);
    1c7e:	4642      	mov	r2, r8
    1c80:	6812      	ldr	r2, [r2, #0]
    1c82:	1c29      	adds	r1, r5, #0
    1c84:	9200      	str	r2, [sp, #0]
    1c86:	2280      	movs	r2, #128	; 0x80
    1c88:	b2e3      	uxtb	r3, r4
    1c8a:	1c38      	adds	r0, r7, #0
    1c8c:	0052      	lsls	r2, r2, #1
    1c8e:	f001 fb97 	bl	33c0 <FlashVerifySection>
    1c92:	1c01      	adds	r1, r0, #0
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1c94:	b662      	cpsie	i
      chSysUnlock();
      if (FTFx_OK != ret) {
    1c96:	2800      	cmp	r0, #0
    1c98:	d103      	bne.n	1ca2 <flashEraseSectors+0xa2>
    /* Verify section for several sector of PFLASH */
    number = FTFx_PSECTOR_SIZE/FSL_FEATURE_FLASH_PFLASH_SECTION_CMD_ADDRESS_ALIGMENT;
    // margin level = 0 normal, 1 user, 2 factory
    // factory is most stringent and only good on first P/E cycle
    // user level will detect if we're approaching normal margin, e.g. running out of margin
    for(margin_read_level = 0; margin_read_level < 0x2; margin_read_level++) {
    1c9a:	2c01      	cmp	r4, #1
    1c9c:	d0d6      	beq.n	1c4c <flashEraseSectors+0x4c>
    1c9e:	2401      	movs	r4, #1
    1ca0:	e7ec      	b.n	1c7c <flashEraseSectors+0x7c>
      chSysLock();
      ret = FlashVerifySection(&flashSSDConfig, destination * FTFx_PSECTOR_SIZE, number, margin_read_level, g_FlashLaunchCommand);
      chSysUnlock();
      if (FTFx_OK != ret) {
	tfp_printf( "Erase verify failed (%d), margin read level: %d\n\r", ret, margin_read_level );
    1ca2:	4816      	ldr	r0, [pc, #88]	; (1cfc <flashEraseSectors+0xfc>)
    1ca4:	1c22      	adds	r2, r4, #0
    1ca6:	f001 fabb 	bl	3220 <tfp_printf>
	retval = F_ERR_LOWLEVEL;
    1caa:	23fd      	movs	r3, #253	; 0xfd
    1cac:	469a      	mov	sl, r3
    1cae:	e7f4      	b.n	1c9a <flashEraseSectors+0x9a>
  uint32_t destination;          // sector number of target
  uint32_t end;
  uint16_t number;               /* Number of longword or phrase to be program or verify*/
  uint32_t margin_read_level;    /* 0=normal, 1=user - margin read for reading 1's */
  uint32_t ret;
  int8_t retval = F_ERR_OK;
    1cb0:	2300      	movs	r3, #0
    1cb2:	469a      	mov	sl, r3

    tfp_printf( " e%d ", destination );
    destination++;
  }

  tfp_printf( "\n\r");
    1cb4:	4812      	ldr	r0, [pc, #72]	; (1d00 <flashEraseSectors+0x100>)
    1cb6:	f001 fab3 	bl	3220 <tfp_printf>
  
  return retval;
    1cba:	4650      	mov	r0, sl
    1cbc:	b240      	sxtb	r0, r0
}
    1cbe:	b003      	add	sp, #12
    1cc0:	bc3c      	pop	{r2, r3, r4, r5}
    1cc2:	4690      	mov	r8, r2
    1cc4:	4699      	mov	r9, r3
    1cc6:	46a2      	mov	sl, r4
    1cc8:	46ab      	mov	fp, r5
    1cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = FlashEraseSector(&flashSSDConfig, destination * FTFx_PSECTOR_SIZE,
			   FTFx_PSECTOR_SIZE, g_FlashLaunchCommand);
    chSysUnlock();
    if (FTFx_OK != ret) {
      retval = F_ERR_LOWLEVEL;
      return retval;
    1ccc:	20fd      	movs	r0, #253	; 0xfd
    1cce:	e7f5      	b.n	1cbc <flashEraseSectors+0xbc>
    tfp_printf( "User sectors start at %d, aborting.\n\r", F_USER_SECTOR_START);
    retval = F_ERR_RANGE;
    return retval;
  }
  if( end > ((flashSSDConfig.PFlashBase + flashSSDConfig.PFlashSize) / FTFx_PSECTOR_SIZE) ) {
    tfp_printf( "Too many sectors requested, end at %d but we only have %d sectors.\n\r",
    1cd0:	480c      	ldr	r0, [pc, #48]	; (1d04 <flashEraseSectors+0x104>)
    1cd2:	4649      	mov	r1, r9
    1cd4:	f001 faa4 	bl	3220 <tfp_printf>
	     end, (flashSSDConfig.PFlashBase + flashSSDConfig.PFlashSize) / FTFx_PSECTOR_SIZE);
    retval = F_ERR_RANGE;
    return retval;
    1cd8:	20fc      	movs	r0, #252	; 0xfc
    1cda:	e7ef      	b.n	1cbc <flashEraseSectors+0xbc>
  
  destination = offset;
  end = destination + (uint32_t) sectorCount;

  if( destination < F_USER_SECTOR_START ) {
    tfp_printf( "User sectors start at %d, aborting.\n\r", F_USER_SECTOR_START);
    1cdc:	480a      	ldr	r0, [pc, #40]	; (1d08 <flashEraseSectors+0x108>)
    1cde:	f001 fa9f 	bl	3220 <tfp_printf>
    retval = F_ERR_RANGE;
    return retval;
    1ce2:	20fc      	movs	r0, #252	; 0xfc
    1ce4:	e7ea      	b.n	1cbc <flashEraseSectors+0xbc>
    1ce6:	46c0      	nop			; (mov r8, r8)
    1ce8:	00005800 	.word	0x00005800
    1cec:	1ffffd94 	.word	0x1ffffd94
    1cf0:	00003be0 	.word	0x00003be0
    1cf4:	1ffffd90 	.word	0x1ffffd90
    1cf8:	00003c20 	.word	0x00003c20
    1cfc:	00003bec 	.word	0x00003bec
    1d00:	00003c9c 	.word	0x00003c9c
    1d04:	00003b98 	.word	0x00003b98
    1d08:	00003b70 	.word	0x00003b70
    1d0c:	46c0      	nop			; (mov r8, r8)
    1d0e:	46c0      	nop			; (mov r8, r8)

00001d10 <flashStart>:
}

void flashStart(void) {
  uint32_t ret;
  
  gCallBackCnt = 0;
    1d10:	2200      	movs	r2, #0
  tfp_printf( "\n\r");
  
  return retval;
}

void flashStart(void) {
    1d12:	b510      	push	{r4, lr}
  uint32_t ret;
  
  gCallBackCnt = 0;
  
  ret = FlashInit(&flashSSDConfig);
    1d14:	4c0c      	ldr	r4, [pc, #48]	; (1d48 <flashStart+0x38>)
}

void flashStart(void) {
  uint32_t ret;
  
  gCallBackCnt = 0;
    1d16:	4b0d      	ldr	r3, [pc, #52]	; (1d4c <flashStart+0x3c>)
  
  ret = FlashInit(&flashSSDConfig);
    1d18:	1c20      	adds	r0, r4, #0
}

void flashStart(void) {
  uint32_t ret;
  
  gCallBackCnt = 0;
    1d1a:	601a      	str	r2, [r3, #0]
  
  ret = FlashInit(&flashSSDConfig);
    1d1c:	f001 fa98 	bl	3250 <FlashInit>
  if (FTFx_OK != ret)  {
    1d20:	2800      	cmp	r0, #0
    1d22:	d002      	beq.n	1d2a <flashStart+0x1a>
    tfp_printf( "Flash init failed\n\r");
    1d24:	480a      	ldr	r0, [pc, #40]	; (1d50 <flashStart+0x40>)
    1d26:	f001 fa7b 	bl	3220 <tfp_printf>
  }

  // Set callbacks -- copy from FLASH to RAM (in case of programming sectors where code is located)
  flashSSDConfig.CallBack = (PCALLBACK)RelocateFunction((uint32_t)__ram_for_callback , CALLBACK_SIZE , (uint32_t)callback);
    1d2a:	2180      	movs	r1, #128	; 0x80
    1d2c:	4a09      	ldr	r2, [pc, #36]	; (1d54 <flashStart+0x44>)
    1d2e:	480a      	ldr	r0, [pc, #40]	; (1d58 <flashStart+0x48>)
    1d30:	f001 fbce 	bl	34d0 <RelocateFunction>
  g_FlashLaunchCommand = (pFLASHCOMMANDSEQUENCE)RelocateFunction((uint32_t)__ram_func , LAUNCH_CMD_SIZE ,(uint32_t)FlashCommandSequence);
    1d34:	2180      	movs	r1, #128	; 0x80
  if (FTFx_OK != ret)  {
    tfp_printf( "Flash init failed\n\r");
  }

  // Set callbacks -- copy from FLASH to RAM (in case of programming sectors where code is located)
  flashSSDConfig.CallBack = (PCALLBACK)RelocateFunction((uint32_t)__ram_for_callback , CALLBACK_SIZE , (uint32_t)callback);
    1d36:	6220      	str	r0, [r4, #32]
  g_FlashLaunchCommand = (pFLASHCOMMANDSEQUENCE)RelocateFunction((uint32_t)__ram_func , LAUNCH_CMD_SIZE ,(uint32_t)FlashCommandSequence);
    1d38:	0049      	lsls	r1, r1, #1
    1d3a:	4a08      	ldr	r2, [pc, #32]	; (1d5c <flashStart+0x4c>)
    1d3c:	4808      	ldr	r0, [pc, #32]	; (1d60 <flashStart+0x50>)
    1d3e:	f001 fbc7 	bl	34d0 <RelocateFunction>
    1d42:	4b08      	ldr	r3, [pc, #32]	; (1d64 <flashStart+0x54>)
    1d44:	6018      	str	r0, [r3, #0]
  
}
    1d46:	bd10      	pop	{r4, pc}
    1d48:	1ffffd94 	.word	0x1ffffd94
    1d4c:	20000968 	.word	0x20000968
    1d50:	00003c28 	.word	0x00003c28
    1d54:	00001bf1 	.word	0x00001bf1
    1d58:	2000096c 	.word	0x2000096c
    1d5c:	000034a1 	.word	0x000034a1
    1d60:	20000868 	.word	0x20000868
    1d64:	1ffffd90 	.word	0x1ffffd90
    1d68:	46c0      	nop			; (mov r8, r8)
    1d6a:	46c0      	nop			; (mov r8, r8)
    1d6c:	46c0      	nop			; (mov r8, r8)
    1d6e:	46c0      	nop			; (mov r8, r8)

00001d70 <flashProgram>:
  return ret;
}

// src, dst are pointers to physical memory locations, not sectors
// count is in bytes
int8_t flashProgram(uint8_t *src, uint8_t *dest, uint32_t count) {
    1d70:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d72:	4647      	mov	r7, r8
    1d74:	b480      	push	{r7}
    1d76:	b086      	sub	sp, #24
  uint8_t noterased = 0;
  uint32_t i;
  uint32_t ret;
  uint32_t failaddr;

  if( count == 0 )  // do nothing if our count is 0
    1d78:	2a00      	cmp	r2, #0
    1d7a:	d03d      	beq.n	1df8 <flashProgram+0x88>
    return retval;
  
  // check if dest, dest+count is in the user-designated area of FLASH
  if( ((uint32_t) dest < (F_USER_SECTOR_START * FTFx_PSECTOR_SIZE)) ||
    1d7c:	4c28      	ldr	r4, [pc, #160]	; (1e20 <flashProgram+0xb0>)
    1d7e:	0aa4      	lsrs	r4, r4, #10
    1d80:	02a4      	lsls	r4, r4, #10
    1d82:	42a1      	cmp	r1, r4
    1d84:	d346      	bcc.n	1e14 <flashProgram+0xa4>
      (((uint32_t) dest + count) > (flashSSDConfig.PFlashBase + flashSSDConfig.PFlashSize)) ) {
    1d86:	4b27      	ldr	r3, [pc, #156]	; (1e24 <flashProgram+0xb4>)
    1d88:	188f      	adds	r7, r1, r2
    1d8a:	1c1c      	adds	r4, r3, #0
    1d8c:	6864      	ldr	r4, [r4, #4]
    1d8e:	4698      	mov	r8, r3
    1d90:	46a4      	mov	ip, r4
    1d92:	689b      	ldr	r3, [r3, #8]
    1d94:	4463      	add	r3, ip

  if( count == 0 )  // do nothing if our count is 0
    return retval;
  
  // check if dest, dest+count is in the user-designated area of FLASH
  if( ((uint32_t) dest < (F_USER_SECTOR_START * FTFx_PSECTOR_SIZE)) ||
    1d96:	429f      	cmp	r7, r3
    1d98:	d83c      	bhi.n	1e14 <flashProgram+0xa4>
      (((uint32_t) dest + count) > (flashSSDConfig.PFlashBase + flashSSDConfig.PFlashSize)) ) {
    return F_ERR_RANGE;
  }

  // check if number of bytes to write & destination is word-aligned
  if( ((count % 4) != 0) || (( ((uint32_t) dest) % 4) != 0) ) {
    1d9a:	2303      	movs	r3, #3
    1d9c:	4213      	tst	r3, r2
    1d9e:	d13b      	bne.n	1e18 <flashProgram+0xa8>
    1da0:	4219      	tst	r1, r3
    1da2:	d139      	bne.n	1e18 <flashProgram+0xa8>
    1da4:	1c0c      	adds	r4, r1, #0
    1da6:	2500      	movs	r5, #0
    1da8:	7826      	ldrb	r6, [r4, #0]
    1daa:	2eff      	cmp	r6, #255	; 0xff
    1dac:	d000      	beq.n	1db0 <flashProgram+0x40>
    1dae:	2501      	movs	r5, #1
    1db0:	3401      	adds	r4, #1
    1db2:	b2ed      	uxtb	r5, r5
    return F_ERR_NOTALIGN;
  }

  // check that the destination bytes have been erased
  // we can't re-program over 0's, it will overstress the Flash (per user manual spec)
  for( i = 0; i < count; i++ ) {
    1db4:	42bc      	cmp	r4, r7
    1db6:	d1f7      	bne.n	1da8 <flashProgram+0x38>
    if( dest[i] != 0xFF )
      noterased = 1;
  }
  if( noterased )
    1db8:	2d00      	cmp	r5, #0
    1dba:	d123      	bne.n	1e04 <flashProgram+0x94>
    1dbc:	1c15      	adds	r5, r2, #0
    1dbe:	1c0e      	adds	r6, r1, #0
    1dc0:	1c04      	adds	r4, r0, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1dc2:	b672      	cpsid	i
    return F_ERR_NOTBLANK;

  chSysLock();
  ret = FlashProgram(&flashSSDConfig, (uint32_t) dest, count, src, g_FlashLaunchCommand);
    1dc4:	4f18      	ldr	r7, [pc, #96]	; (1e28 <flashProgram+0xb8>)
    1dc6:	4640      	mov	r0, r8
    1dc8:	683b      	ldr	r3, [r7, #0]
    1dca:	9300      	str	r3, [sp, #0]
    1dcc:	1c23      	adds	r3, r4, #0
    1dce:	f001 fa47 	bl	3260 <FlashProgram>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1dd2:	b662      	cpsie	i
  chSysUnlock();
  
  if (FTFx_OK != ret)
    1dd4:	2800      	cmp	r0, #0
    1dd6:	d121      	bne.n	1e1c <flashProgram+0xac>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1dd8:	b672      	cpsid	i
    return F_ERR_LOWLEVEL;

  // user margin is more strict than normal margin -- data can be read still if
  // this fails, but indicates flash is wearing out
  chSysLock();
  ret = FlashProgramCheck(&flashSSDConfig, (uint32_t) dest, count, src, &failaddr,
    1dda:	ab05      	add	r3, sp, #20
    1ddc:	9300      	str	r3, [sp, #0]
    1dde:	2301      	movs	r3, #1
    1de0:	9301      	str	r3, [sp, #4]
    1de2:	683b      	ldr	r3, [r7, #0]
    1de4:	4640      	mov	r0, r8
    1de6:	9302      	str	r3, [sp, #8]
    1de8:	1c31      	adds	r1, r6, #0
    1dea:	1c2a      	adds	r2, r5, #0
    1dec:	1c23      	adds	r3, r4, #0
    1dee:	f001 fa87 	bl	3300 <FlashProgramCheck>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1df2:	b662      	cpsie	i
			  READ_USER_MARGIN, g_FlashLaunchCommand);
  chSysUnlock();
  
  if (FTFx_OK != ret) {
    1df4:	2800      	cmp	r0, #0
    1df6:	d107      	bne.n	1e08 <flashProgram+0x98>
  uint32_t i;
  uint32_t ret;
  uint32_t failaddr;

  if( count == 0 )  // do nothing if our count is 0
    return retval;
    1df8:	2000      	movs	r0, #0
    1dfa:	b240      	sxtb	r0, r0
    tfp_printf( "Failed programming verification at USER margin levels: worry a little bit. Failure address: %08x\n\r", failaddr );
    return F_ERR_U_MARGIN;
  }

  return retval;
}
    1dfc:	b006      	add	sp, #24
    1dfe:	bc04      	pop	{r2}
    1e00:	4690      	mov	r8, r2
    1e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for( i = 0; i < count; i++ ) {
    if( dest[i] != 0xFF )
      noterased = 1;
  }
  if( noterased )
    return F_ERR_NOTBLANK;
    1e04:	20ff      	movs	r0, #255	; 0xff
    1e06:	e7f8      	b.n	1dfa <flashProgram+0x8a>
  ret = FlashProgramCheck(&flashSSDConfig, (uint32_t) dest, count, src, &failaddr,
			  READ_USER_MARGIN, g_FlashLaunchCommand);
  chSysUnlock();
  
  if (FTFx_OK != ret) {
    tfp_printf( "Failed programming verification at USER margin levels: worry a little bit. Failure address: %08x\n\r", failaddr );
    1e08:	4808      	ldr	r0, [pc, #32]	; (1e2c <flashProgram+0xbc>)
    1e0a:	9905      	ldr	r1, [sp, #20]
    1e0c:	f001 fa08 	bl	3220 <tfp_printf>
    return F_ERR_U_MARGIN;
    1e10:	20fa      	movs	r0, #250	; 0xfa
    1e12:	e7f2      	b.n	1dfa <flashProgram+0x8a>
    return retval;
  
  // check if dest, dest+count is in the user-designated area of FLASH
  if( ((uint32_t) dest < (F_USER_SECTOR_START * FTFx_PSECTOR_SIZE)) ||
      (((uint32_t) dest + count) > (flashSSDConfig.PFlashBase + flashSSDConfig.PFlashSize)) ) {
    return F_ERR_RANGE;
    1e14:	20fc      	movs	r0, #252	; 0xfc
    1e16:	e7f0      	b.n	1dfa <flashProgram+0x8a>
  }

  // check if number of bytes to write & destination is word-aligned
  if( ((count % 4) != 0) || (( ((uint32_t) dest) % 4) != 0) ) {
    return F_ERR_NOTALIGN;
    1e18:	20fe      	movs	r0, #254	; 0xfe
    1e1a:	e7ee      	b.n	1dfa <flashProgram+0x8a>
  chSysLock();
  ret = FlashProgram(&flashSSDConfig, (uint32_t) dest, count, src, g_FlashLaunchCommand);
  chSysUnlock();
  
  if (FTFx_OK != ret)
    return F_ERR_LOWLEVEL;
    1e1c:	20fd      	movs	r0, #253	; 0xfd
    1e1e:	e7ec      	b.n	1dfa <flashProgram+0x8a>
    1e20:	00005800 	.word	0x00005800
    1e24:	1ffffd94 	.word	0x1ffffd94
    1e28:	1ffffd90 	.word	0x1ffffd90
    1e2c:	00003c3c 	.word	0x00003c3c

00001e30 <__core_init>:

#if __CORTEX_M == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
    1e30:	4770      	bx	lr
    1e32:	46c0      	nop			; (mov r8, r8)
    1e34:	46c0      	nop			; (mov r8, r8)
    1e36:	46c0      	nop			; (mov r8, r8)
    1e38:	46c0      	nop			; (mov r8, r8)
    1e3a:	46c0      	nop			; (mov r8, r8)
    1e3c:	46c0      	nop			; (mov r8, r8)
    1e3e:	46c0      	nop			; (mov r8, r8)

00001e40 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
    1e40:	4770      	bx	lr
    1e42:	46c0      	nop			; (mov r8, r8)
    1e44:	46c0      	nop			; (mov r8, r8)
    1e46:	46c0      	nop			; (mov r8, r8)
    1e48:	46c0      	nop			; (mov r8, r8)
    1e4a:	46c0      	nop			; (mov r8, r8)
    1e4c:	46c0      	nop			; (mov r8, r8)
    1e4e:	46c0      	nop			; (mov r8, r8)

00001e50 <__default_exit>:
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
/*lint -restore*/

  while (true) {
  }
    1e50:	e7fe      	b.n	1e50 <__default_exit>
    1e52:	46c0      	nop			; (mov r8, r8)
    1e54:	46c0      	nop			; (mov r8, r8)
    1e56:	46c0      	nop			; (mov r8, r8)
    1e58:	46c0      	nop			; (mov r8, r8)
    1e5a:	46c0      	nop			; (mov r8, r8)
    1e5c:	46c0      	nop			; (mov r8, r8)
    1e5e:	46c0      	nop			; (mov r8, r8)

00001e60 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
    1e60:	b538      	push	{r3, r4, r5, lr}
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
    1e62:	4d0e      	ldr	r5, [pc, #56]	; (1e9c <__init_ram_areas+0x3c>)
    1e64:	4b0e      	ldr	r3, [pc, #56]	; (1ea0 <__init_ram_areas+0x40>)
    1e66:	429d      	cmp	r5, r3
    1e68:	d216      	bcs.n	1e98 <__init_ram_areas+0x38>
      *p = *tp;
    1e6a:	43ec      	mvns	r4, r5
    1e6c:	18e4      	adds	r4, r4, r3
    1e6e:	08a4      	lsrs	r4, r4, #2
    1e70:	3401      	adds	r4, #1
    1e72:	00a4      	lsls	r4, r4, #2
    1e74:	1c28      	adds	r0, r5, #0
    1e76:	490b      	ldr	r1, [pc, #44]	; (1ea4 <__init_ram_areas+0x44>)
    1e78:	1c22      	adds	r2, r4, #0
    1e7a:	f001 fce9 	bl	3850 <memcpy>
    1e7e:	1960      	adds	r0, r4, r5
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
    1e80:	4b09      	ldr	r3, [pc, #36]	; (1ea8 <__init_ram_areas+0x48>)
    1e82:	4298      	cmp	r0, r3
    1e84:	d207      	bcs.n	1e96 <__init_ram_areas+0x36>
      *p = 0;
    1e86:	43c2      	mvns	r2, r0
    1e88:	18d2      	adds	r2, r2, r3
    1e8a:	0892      	lsrs	r2, r2, #2
    1e8c:	3201      	adds	r2, #1
    1e8e:	0092      	lsls	r2, r2, #2
    1e90:	2100      	movs	r1, #0
    1e92:	f001 fd05 	bl	38a0 <memset>
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
#endif
}
    1e96:	bd38      	pop	{r3, r4, r5, pc}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;

  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;
    1e98:	1c28      	adds	r0, r5, #0
    1e9a:	e7f1      	b.n	1e80 <__init_ram_areas+0x20>
    1e9c:	20000b18 	.word	0x20000b18
    1ea0:	20000b18 	.word	0x20000b18
    1ea4:	00003ea4 	.word	0x00003ea4
    1ea8:	20000b18 	.word	0x20000b18
    1eac:	46c0      	nop			; (mov r8, r8)
    1eae:	46c0      	nop			; (mov r8, r8)

00001eb0 <_unhandled_exception>:
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
/*lint -restore*/

  while (true) {
  }
    1eb0:	e7fe      	b.n	1eb0 <_unhandled_exception>
    1eb2:	46c0      	nop			; (mov r8, r8)
    1eb4:	46c0      	nop			; (mov r8, r8)
    1eb6:	46c0      	nop			; (mov r8, r8)
    1eb8:	46c0      	nop			; (mov r8, r8)
    1eba:	46c0      	nop			; (mov r8, r8)
    1ebc:	46c0      	nop			; (mov r8, r8)
    1ebe:	46c0      	nop			; (mov r8, r8)

00001ec0 <NMI_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
    1ec0:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  struct port_extctx *ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
    1ec4:	3320      	adds	r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
    1ec6:	f383 8809 	msr	PSP, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1eca:	b662      	cpsie	i
  /* Writing back the modified PSP value.*/
  __set_PSP((uint32_t)ctxp);

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
}
    1ecc:	4770      	bx	lr
    1ece:	46c0      	nop			; (mov r8, r8)

00001ed0 <_port_irq_epilogue>:
 *
 * @param[in] lr        value of the @p LR register on ISR entry
 */
void _port_irq_epilogue(regarm_t lr) {

  if (lr != (regarm_t)0xFFFFFFF1U) {
    1ed0:	300f      	adds	r0, #15
    1ed2:	d00f      	beq.n	1ef4 <_port_irq_epilogue+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1ed4:	b672      	cpsid	i
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
    1ed6:	f3ef 8309 	mrs	r3, PSP
    /* The extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
    1eda:	3b20      	subs	r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
    1edc:	f383 8809 	msr	PSP, r3

    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
    1ee0:	2280      	movs	r2, #128	; 0x80
    1ee2:	0452      	lsls	r2, r2, #17
    1ee4:	61da      	str	r2, [r3, #28]

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsRescRequiredI()) {
    1ee6:	4a05      	ldr	r2, [pc, #20]	; (1efc <_port_irq_epilogue+0x2c>)
    1ee8:	6811      	ldr	r1, [r2, #0]
    1eea:	6852      	ldr	r2, [r2, #4]
    1eec:	4291      	cmp	r1, r2
    1eee:	d002      	beq.n	1ef6 <_port_irq_epilogue+0x26>
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
    1ef0:	4a03      	ldr	r2, [pc, #12]	; (1f00 <_port_irq_epilogue+0x30>)
    1ef2:	619a      	str	r2, [r3, #24]
    }

    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
  }
}
    1ef4:	4770      	bx	lr
      ctxp->pc = (regarm_t)_port_switch_from_isr;
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
    1ef6:	4a03      	ldr	r2, [pc, #12]	; (1f04 <_port_irq_epilogue+0x34>)
    1ef8:	619a      	str	r2, [r3, #24]
    1efa:	e7fb      	b.n	1ef4 <_port_irq_epilogue+0x24>
    1efc:	200009ec 	.word	0x200009ec
    1f00:	0000050d 	.word	0x0000050d
    1f04:	00000510 	.word	0x00000510
    1f08:	46c0      	nop			; (mov r8, r8)
    1f0a:	46c0      	nop			; (mov r8, r8)
    1f0c:	46c0      	nop			; (mov r8, r8)
    1f0e:	46c0      	nop			; (mov r8, r8)

00001f10 <chSysInit>:
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)(IRQn) < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1f10:	4a14      	ldr	r2, [pc, #80]	; (1f64 <chSysInit+0x54>)
    1f12:	4b15      	ldr	r3, [pc, #84]	; (1f68 <chSysInit+0x58>)
    1f14:	6a11      	ldr	r1, [r2, #32]
 *          zeroed by the runtime environment. If this is not the case then
 *          make sure to clear it before calling this function.
 *
 * @special
 */
void chSysInit(void) {
    1f16:	b500      	push	{lr}
    1f18:	400b      	ands	r3, r1
    1f1a:	6213      	str	r3, [r2, #32]
  /* Iterates through the list of defined threads.*/
  tp = &nil.threads[0];
  tcp = nil_thd_configs;
  while (tp < &nil.threads[NIL_CFG_NUM_THREADS]) {
#if NIL_CFG_ENABLE_STACK_CHECK
    tp->stklim  = (stkalign_t *)tcp->wbase;
    1f1c:	4a13      	ldr	r2, [pc, #76]	; (1f6c <chSysInit+0x5c>)
    1f1e:	4914      	ldr	r1, [pc, #80]	; (1f70 <chSysInit+0x60>)
    1f20:	6813      	ldr	r3, [r2, #0]
#endif

    /* Port dependent thread initialization.*/
    PORT_SETUP_CONTEXT(tp, tcp->wend, tcp->funcp, tcp->arg);
    1f22:	68d0      	ldr	r0, [r2, #12]
  /* Iterates through the list of defined threads.*/
  tp = &nil.threads[0];
  tcp = nil_thd_configs;
  while (tp < &nil.threads[NIL_CFG_NUM_THREADS]) {
#if NIL_CFG_ENABLE_STACK_CHECK
    tp->stklim  = (stkalign_t *)tcp->wbase;
    1f24:	620b      	str	r3, [r1, #32]
#endif

    /* Port dependent thread initialization.*/
    PORT_SETUP_CONTEXT(tp, tcp->wend, tcp->funcp, tcp->arg);
    1f26:	6853      	ldr	r3, [r2, #4]
    1f28:	6912      	ldr	r2, [r2, #16]
    1f2a:	3b24      	subs	r3, #36	; 0x24
    1f2c:	60cb      	str	r3, [r1, #12]
    1f2e:	6118      	str	r0, [r3, #16]
  tp->stklim  = THD_IDLE_BASE;
#endif

  /* Runs the highest priority thread, the current one becomes the idle
     thread.*/
  nil.current = nil.next = nil.threads;
    1f30:	1c08      	adds	r0, r1, #0
 *          zeroed by the runtime environment. If this is not the case then
 *          make sure to clear it before calling this function.
 *
 * @special
 */
void chSysInit(void) {
    1f32:	b083      	sub	sp, #12
#if NIL_CFG_ENABLE_STACK_CHECK
    tp->stklim  = (stkalign_t *)tcp->wbase;
#endif

    /* Port dependent thread initialization.*/
    PORT_SETUP_CONTEXT(tp, tcp->wend, tcp->funcp, tcp->arg);
    1f34:	615a      	str	r2, [r3, #20]
    1f36:	9201      	str	r2, [sp, #4]
    1f38:	4a0e      	ldr	r2, [pc, #56]	; (1f74 <chSysInit+0x64>)
  tp->stklim  = THD_IDLE_BASE;
#endif

  /* Runs the highest priority thread, the current one becomes the idle
     thread.*/
  nil.current = nil.next = nil.threads;
    1f3a:	300c      	adds	r0, #12
#if NIL_CFG_ENABLE_STACK_CHECK
    tp->stklim  = (stkalign_t *)tcp->wbase;
#endif

    /* Port dependent thread initialization.*/
    PORT_SETUP_CONTEXT(tp, tcp->wend, tcp->funcp, tcp->arg);
    1f3c:	621a      	str	r2, [r3, #32]
  }

#if NIL_CFG_ENABLE_STACK_CHECK
  /* The idle thread is a special case because its stack is set up by the
     runtime environment.*/
  tp->stklim  = THD_IDLE_BASE;
    1f3e:	4a0e      	ldr	r2, [pc, #56]	; (1f78 <chSysInit+0x68>)
#endif

  /* Runs the highest priority thread, the current one becomes the idle
     thread.*/
  nil.current = nil.next = nil.threads;
    1f40:	6048      	str	r0, [r1, #4]
  }

#if NIL_CFG_ENABLE_STACK_CHECK
  /* The idle thread is a special case because its stack is set up by the
     runtime environment.*/
  tp->stklim  = THD_IDLE_BASE;
    1f42:	638a      	str	r2, [r1, #56]	; 0x38
#endif

  /* Runs the highest priority thread, the current one becomes the idle
     thread.*/
  nil.current = nil.next = nil.threads;
    1f44:	6008      	str	r0, [r1, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
    1f46:	f3ef 8309 	mrs	r3, PSP
  port_switch(nil.current, tp);
    1f4a:	3b24      	subs	r3, #36	; 0x24
    1f4c:	4293      	cmp	r3, r2
    1f4e:	d203      	bcs.n	1f58 <chSysInit+0x48>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1f50:	b672      	cpsid	i
void chSysHalt(const char *reason) {

  port_disable();

#if NIL_DBG_ENABLED
  nil.dbg_panic_msg = reason;
    1f52:	4b0a      	ldr	r3, [pc, #40]	; (1f7c <chSysInit+0x6c>)
    1f54:	63cb      	str	r3, [r1, #60]	; 0x3c
    1f56:	e7fe      	b.n	1f56 <chSysInit+0x46>
#endif

  /* Runs the highest priority thread, the current one becomes the idle
     thread.*/
  nil.current = nil.next = nil.threads;
  port_switch(nil.current, tp);
    1f58:	3124      	adds	r1, #36	; 0x24
    1f5a:	f7fe fac1 	bl	4e0 <_port_switch>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1f5e:	b662      	cpsie	i

  /* Interrupts enabled for the idle thread.*/
  chSysEnable();
}
    1f60:	b003      	add	sp, #12
    1f62:	bd00      	pop	{pc}
    1f64:	e000ed00 	.word	0xe000ed00
    1f68:	ff00ffff 	.word	0xff00ffff
    1f6c:	000039c0 	.word	0x000039c0
    1f70:	200009ec 	.word	0x200009ec
    1f74:	00000501 	.word	0x00000501
    1f78:	1ffffc80 	.word	0x1ffffc80
    1f7c:	00003ca0 	.word	0x00003ca0

00001f80 <chSysHalt>:
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1f80:	b672      	cpsid	i
void chSysHalt(const char *reason) {

  port_disable();

#if NIL_DBG_ENABLED
  nil.dbg_panic_msg = reason;
    1f82:	4b01      	ldr	r3, [pc, #4]	; (1f88 <chSysHalt+0x8>)
    1f84:	63d8      	str	r0, [r3, #60]	; 0x3c

  NIL_CFG_SYSTEM_HALT_HOOK(reason);

  /* Harmless infinite loop.*/
  while (true) {
  }
    1f86:	e7fe      	b.n	1f86 <chSysHalt+0x6>
    1f88:	200009ec 	.word	0x200009ec
    1f8c:	46c0      	nop			; (mov r8, r8)
    1f8e:	46c0      	nop			; (mov r8, r8)

00001f90 <chSysTimerHandlerI>:
 */
void chSysTimerHandlerI(void) {

#if NIL_CFG_ST_TIMEDELTA == 0
  thread_t *tp = &nil.threads[0];
  nil.systime++;
    1f90:	4b13      	ldr	r3, [pc, #76]	; (1fe0 <chSysTimerHandlerI+0x50>)
    1f92:	689a      	ldr	r2, [r3, #8]
    1f94:	3201      	adds	r2, #1
    1f96:	609a      	str	r2, [r3, #8]
  do {
    /* Is the thread in a wait state with timeout?.*/
    if (tp->timeout > (systime_t)0) {
    1f98:	699a      	ldr	r2, [r3, #24]
    1f9a:	2a00      	cmp	r2, #0
    1f9c:	d015      	beq.n	1fca <chSysTimerHandlerI+0x3a>

      chDbgAssert(!NIL_THD_IS_READY(tp), "is ready");

     /* Did the timer reach zero?*/
      if (--tp->timeout == (systime_t)0) {
    1f9e:	699a      	ldr	r2, [r3, #24]
    1fa0:	3a01      	subs	r2, #1
    1fa2:	619a      	str	r2, [r3, #24]
    1fa4:	2a00      	cmp	r2, #0
    1fa6:	d110      	bne.n	1fca <chSysTimerHandlerI+0x3a>
        /* Timeout on semaphores requires a special handling because the
           semaphore counter must be incremented.*/
        /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
        if (NIL_THD_IS_WTSEM(tp)) {
    1fa8:	7c19      	ldrb	r1, [r3, #16]
    1faa:	2903      	cmp	r1, #3
    1fac:	d013      	beq.n	1fd6 <chSysTimerHandlerI+0x46>
          tp->u1.semp->cnt++;
        }
        else if (NIL_THD_IS_SUSP(tp)) {
    1fae:	2902      	cmp	r1, #2
    1fb0:	d00e      	beq.n	1fd0 <chSysTimerHandlerI+0x40>
              (tp < &nil.threads[NIL_CFG_NUM_THREADS]),
              "pointer out of range");
  chDbgAssert(!NIL_THD_IS_READY(tp), "already ready");
  chDbgAssert(nil.next <= nil.current, "priority ordering");

  tp->u1.msg = msg;
    1fb2:	2201      	movs	r2, #1
    1fb4:	4252      	negs	r2, r2
    1fb6:	615a      	str	r2, [r3, #20]
  tp->state = NIL_STATE_READY;
    1fb8:	2200      	movs	r2, #0
    1fba:	741a      	strb	r2, [r3, #16]
  tp->timeout = (systime_t)0;
    1fbc:	619a      	str	r2, [r3, #24]
  if (tp < nil.next) {
    1fbe:	1c1a      	adds	r2, r3, #0
    1fc0:	6859      	ldr	r1, [r3, #4]
    1fc2:	320c      	adds	r2, #12
    1fc4:	4291      	cmp	r1, r2
    1fc6:	d900      	bls.n	1fca <chSysTimerHandlerI+0x3a>
    nil.next = tp;
    1fc8:	605a      	str	r2, [r3, #4]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1fca:	b662      	cpsie	i
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1fcc:	b672      	cpsid	i
  else {
    /* No tick event needed.*/
    port_timer_stop_alarm();
  }
#endif
}
    1fce:	4770      	bx	lr
        /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
        if (NIL_THD_IS_WTSEM(tp)) {
          tp->u1.semp->cnt++;
        }
        else if (NIL_THD_IS_SUSP(tp)) {
          *tp->u1.trp = NULL;
    1fd0:	6959      	ldr	r1, [r3, #20]
    1fd2:	600a      	str	r2, [r1, #0]
    1fd4:	e7ed      	b.n	1fb2 <chSysTimerHandlerI+0x22>
      if (--tp->timeout == (systime_t)0) {
        /* Timeout on semaphores requires a special handling because the
           semaphore counter must be incremented.*/
        /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
        if (NIL_THD_IS_WTSEM(tp)) {
          tp->u1.semp->cnt++;
    1fd6:	6959      	ldr	r1, [r3, #20]
    1fd8:	680a      	ldr	r2, [r1, #0]
    1fda:	3201      	adds	r2, #1
    1fdc:	600a      	str	r2, [r1, #0]
    1fde:	e7e8      	b.n	1fb2 <chSysTimerHandlerI+0x22>
    1fe0:	200009ec 	.word	0x200009ec
    1fe4:	46c0      	nop			; (mov r8, r8)
    1fe6:	46c0      	nop			; (mov r8, r8)
    1fe8:	46c0      	nop			; (mov r8, r8)
    1fea:	46c0      	nop			; (mov r8, r8)
    1fec:	46c0      	nop			; (mov r8, r8)
    1fee:	46c0      	nop			; (mov r8, r8)

00001ff0 <chSchReadyI>:
              "pointer out of range");
  chDbgAssert(!NIL_THD_IS_READY(tp), "already ready");
  chDbgAssert(nil.next <= nil.current, "priority ordering");

  tp->u1.msg = msg;
  tp->state = NIL_STATE_READY;
    1ff0:	2300      	movs	r3, #0
    1ff2:	7103      	strb	r3, [r0, #4]
  tp->timeout = (systime_t)0;
    1ff4:	60c3      	str	r3, [r0, #12]
  if (tp < nil.next) {
    1ff6:	4b03      	ldr	r3, [pc, #12]	; (2004 <chSchReadyI+0x14>)
              (tp < &nil.threads[NIL_CFG_NUM_THREADS]),
              "pointer out of range");
  chDbgAssert(!NIL_THD_IS_READY(tp), "already ready");
  chDbgAssert(nil.next <= nil.current, "priority ordering");

  tp->u1.msg = msg;
    1ff8:	6081      	str	r1, [r0, #8]
  tp->state = NIL_STATE_READY;
  tp->timeout = (systime_t)0;
  if (tp < nil.next) {
    1ffa:	685a      	ldr	r2, [r3, #4]
    1ffc:	4290      	cmp	r0, r2
    1ffe:	d200      	bcs.n	2002 <chSchReadyI+0x12>
    nil.next = tp;
    2000:	6058      	str	r0, [r3, #4]
  }
  return tp;
}
    2002:	4770      	bx	lr
    2004:	200009ec 	.word	0x200009ec
    2008:	46c0      	nop			; (mov r8, r8)
    200a:	46c0      	nop			; (mov r8, r8)
    200c:	46c0      	nop			; (mov r8, r8)
    200e:	46c0      	nop			; (mov r8, r8)

00002010 <chSchRescheduleS>:
 *
 * @sclass
 */
void chSchRescheduleS(void) {

  if (chSchIsRescRequiredI()) {
    2010:	4b09      	ldr	r3, [pc, #36]	; (2038 <chSchRescheduleS+0x28>)
/**
 * @brief   Reschedules if needed.
 *
 * @sclass
 */
void chSchRescheduleS(void) {
    2012:	b510      	push	{r4, lr}

  if (chSchIsRescRequiredI()) {
    2014:	6819      	ldr	r1, [r3, #0]
    2016:	6858      	ldr	r0, [r3, #4]
    2018:	4281      	cmp	r1, r0
    201a:	d00c      	beq.n	2036 <chSchRescheduleS+0x26>
    thread_t *otp = nil.current;

    nil.current = nil.next;
    201c:	6018      	str	r0, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
    201e:	f3ef 8209 	mrs	r2, PSP
    if (otp == &nil.threads[NIL_CFG_NUM_THREADS]) {
      NIL_CFG_IDLE_LEAVE_HOOK();
    }
    port_switch(nil.next, otp);
    2022:	694c      	ldr	r4, [r1, #20]
    2024:	3a24      	subs	r2, #36	; 0x24
    2026:	4294      	cmp	r4, r2
    2028:	d903      	bls.n	2032 <chSchRescheduleS+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    202a:	b672      	cpsid	i
void chSysHalt(const char *reason) {

  port_disable();

#if NIL_DBG_ENABLED
  nil.dbg_panic_msg = reason;
    202c:	4a03      	ldr	r2, [pc, #12]	; (203c <chSchRescheduleS+0x2c>)
    202e:	63da      	str	r2, [r3, #60]	; 0x3c
    2030:	e7fe      	b.n	2030 <chSchRescheduleS+0x20>

    nil.current = nil.next;
    if (otp == &nil.threads[NIL_CFG_NUM_THREADS]) {
      NIL_CFG_IDLE_LEAVE_HOOK();
    }
    port_switch(nil.next, otp);
    2032:	f7fe fa55 	bl	4e0 <_port_switch>
  }
}
    2036:	bd10      	pop	{r4, pc}
    2038:	200009ec 	.word	0x200009ec
    203c:	00003ca0 	.word	0x00003ca0

00002040 <chThdSleep>:
 *
 * @param[in] timeout   the delay in system ticks
 *
 * @api
 */
void chThdSleep(systime_t timeout) {
    2040:	b510      	push	{r4, lr}
    2042:	b672      	cpsid	i
 * @retval NIL_MSG_TMO  if a timeout occurred.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t timeout) {
  thread_t *ntp, *otp = nil.current;
    2044:	4b0e      	ldr	r3, [pc, #56]	; (2080 <chThdSleep+0x40>)

  chDbgAssert(otp != &nil.threads[NIL_CFG_NUM_THREADS],
               "idle cannot sleep");

  /* Storing the wait object for the current thread.*/
  otp->state = newstate;
    2046:	2201      	movs	r2, #1
 * @retval NIL_MSG_TMO  if a timeout occurred.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t timeout) {
  thread_t *ntp, *otp = nil.current;
    2048:	6819      	ldr	r1, [r3, #0]
    otp->timeout = abstime - nil.lasttime;
  }
#else

  /* Timeout settings.*/
  otp->timeout = timeout;
    204a:	60c8      	str	r0, [r1, #12]

  /* Scanning the whole threads array.*/
  ntp = nil.threads;
  while (true) {
    /* Is this thread ready to execute?*/
    if (NIL_THD_IS_READY(ntp)) {
    204c:	1c18      	adds	r0, r3, #0

  chDbgAssert(otp != &nil.threads[NIL_CFG_NUM_THREADS],
               "idle cannot sleep");

  /* Storing the wait object for the current thread.*/
  otp->state = newstate;
    204e:	710a      	strb	r2, [r1, #4]

  /* Scanning the whole threads array.*/
  ntp = nil.threads;
  while (true) {
    /* Is this thread ready to execute?*/
    if (NIL_THD_IS_READY(ntp)) {
    2050:	7c1a      	ldrb	r2, [r3, #16]
    2052:	300c      	adds	r0, #12
    2054:	2a00      	cmp	r2, #0
    2056:	d003      	beq.n	2060 <chThdSleep+0x20>
      port_switch(ntp, otp);
      return nil.current->u1.msg;
    }

    /* Points to the next thread in lowering priority order.*/
    ntp++;
    2058:	3018      	adds	r0, #24

  /* Scanning the whole threads array.*/
  ntp = nil.threads;
  while (true) {
    /* Is this thread ready to execute?*/
    if (NIL_THD_IS_READY(ntp)) {
    205a:	7902      	ldrb	r2, [r0, #4]
    205c:	2a00      	cmp	r2, #0
    205e:	d1fb      	bne.n	2058 <chThdSleep+0x18>
      nil.current = nil.next = ntp;
    2060:	6058      	str	r0, [r3, #4]
    2062:	6018      	str	r0, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
    2064:	f3ef 8209 	mrs	r2, PSP
      if (ntp == &nil.threads[NIL_CFG_NUM_THREADS]) {
        NIL_CFG_IDLE_ENTER_HOOK();
      }
      port_switch(ntp, otp);
    2068:	694c      	ldr	r4, [r1, #20]
    206a:	3a24      	subs	r2, #36	; 0x24
    206c:	4294      	cmp	r4, r2
    206e:	d903      	bls.n	2078 <chThdSleep+0x38>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2070:	b672      	cpsid	i
void chSysHalt(const char *reason) {

  port_disable();

#if NIL_DBG_ENABLED
  nil.dbg_panic_msg = reason;
    2072:	4a04      	ldr	r2, [pc, #16]	; (2084 <chThdSleep+0x44>)
    2074:	63da      	str	r2, [r3, #60]	; 0x3c
    2076:	e7fe      	b.n	2076 <chThdSleep+0x36>
    if (NIL_THD_IS_READY(ntp)) {
      nil.current = nil.next = ntp;
      if (ntp == &nil.threads[NIL_CFG_NUM_THREADS]) {
        NIL_CFG_IDLE_ENTER_HOOK();
      }
      port_switch(ntp, otp);
    2078:	f7fe fa32 	bl	4e0 <_port_switch>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    207c:	b662      	cpsie	i
void chThdSleep(systime_t timeout) {

  chSysLock();
  chThdSleepS(timeout);
  chSysUnlock();
}
    207e:	bd10      	pop	{r4, pc}
    2080:	200009ec 	.word	0x200009ec
    2084:	00003ca0 	.word	0x00003ca0
    2088:	46c0      	nop			; (mov r8, r8)
    208a:	46c0      	nop			; (mov r8, r8)
    208c:	46c0      	nop			; (mov r8, r8)
    208e:	46c0      	nop			; (mov r8, r8)

00002090 <chSemWaitTimeoutS>:
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t timeout) {

  /* Note, the semaphore counter is a volatile variable so accesses are
     manually optimized.*/
  cnt_t cnt = sp->cnt;
    2090:	6803      	ldr	r3, [r0, #0]
 * @retval NIL_MSG_TMO  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t timeout) {
    2092:	b510      	push	{r4, lr}

  /* Note, the semaphore counter is a volatile variable so accesses are
     manually optimized.*/
  cnt_t cnt = sp->cnt;
  if (cnt <= (cnt_t)0) {
    2094:	2b00      	cmp	r3, #0
    2096:	dd03      	ble.n	20a0 <chSemWaitTimeoutS+0x10>
    }
    sp->cnt = cnt - (cnt_t)1;
    nil.current->u1.semp = sp;
    return chSchGoSleepTimeoutS(NIL_STATE_WTSEM, timeout);
  }
  sp->cnt = cnt - (cnt_t)1;
    2098:	3b01      	subs	r3, #1
    209a:	6003      	str	r3, [r0, #0]
  return MSG_OK;
    209c:	2000      	movs	r0, #0
}
    209e:	bd10      	pop	{r4, pc}

  /* Note, the semaphore counter is a volatile variable so accesses are
     manually optimized.*/
  cnt_t cnt = sp->cnt;
  if (cnt <= (cnt_t)0) {
    if (TIME_IMMEDIATE == timeout) {
    20a0:	1c4a      	adds	r2, r1, #1
    20a2:	d01c      	beq.n	20de <chSemWaitTimeoutS+0x4e>
      return MSG_TIMEOUT;
    }
    sp->cnt = cnt - (cnt_t)1;
    nil.current->u1.semp = sp;
    20a4:	4c12      	ldr	r4, [pc, #72]	; (20f0 <chSemWaitTimeoutS+0x60>)
  cnt_t cnt = sp->cnt;
  if (cnt <= (cnt_t)0) {
    if (TIME_IMMEDIATE == timeout) {
      return MSG_TIMEOUT;
    }
    sp->cnt = cnt - (cnt_t)1;
    20a6:	3b01      	subs	r3, #1

  chDbgAssert(otp != &nil.threads[NIL_CFG_NUM_THREADS],
               "idle cannot sleep");

  /* Storing the wait object for the current thread.*/
  otp->state = newstate;
    20a8:	2203      	movs	r2, #3
  cnt_t cnt = sp->cnt;
  if (cnt <= (cnt_t)0) {
    if (TIME_IMMEDIATE == timeout) {
      return MSG_TIMEOUT;
    }
    sp->cnt = cnt - (cnt_t)1;
    20aa:	6003      	str	r3, [r0, #0]
    nil.current->u1.semp = sp;
    20ac:	6823      	ldr	r3, [r4, #0]
    20ae:	6098      	str	r0, [r3, #8]

  /* Scanning the whole threads array.*/
  ntp = nil.threads;
  while (true) {
    /* Is this thread ready to execute?*/
    if (NIL_THD_IS_READY(ntp)) {
    20b0:	1c20      	adds	r0, r4, #0

  chDbgAssert(otp != &nil.threads[NIL_CFG_NUM_THREADS],
               "idle cannot sleep");

  /* Storing the wait object for the current thread.*/
  otp->state = newstate;
    20b2:	711a      	strb	r2, [r3, #4]
    otp->timeout = abstime - nil.lasttime;
  }
#else

  /* Timeout settings.*/
  otp->timeout = timeout;
    20b4:	60d9      	str	r1, [r3, #12]

  /* Scanning the whole threads array.*/
  ntp = nil.threads;
  while (true) {
    /* Is this thread ready to execute?*/
    if (NIL_THD_IS_READY(ntp)) {
    20b6:	7c22      	ldrb	r2, [r4, #16]
    20b8:	300c      	adds	r0, #12
    20ba:	2a00      	cmp	r2, #0
    20bc:	d003      	beq.n	20c6 <chSemWaitTimeoutS+0x36>
      port_switch(ntp, otp);
      return nil.current->u1.msg;
    }

    /* Points to the next thread in lowering priority order.*/
    ntp++;
    20be:	3018      	adds	r0, #24

  /* Scanning the whole threads array.*/
  ntp = nil.threads;
  while (true) {
    /* Is this thread ready to execute?*/
    if (NIL_THD_IS_READY(ntp)) {
    20c0:	7902      	ldrb	r2, [r0, #4]
    20c2:	2a00      	cmp	r2, #0
    20c4:	d1fb      	bne.n	20be <chSemWaitTimeoutS+0x2e>
      nil.current = nil.next = ntp;
    20c6:	6060      	str	r0, [r4, #4]
    20c8:	6020      	str	r0, [r4, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
    20ca:	f3ef 8209 	mrs	r2, PSP
      if (ntp == &nil.threads[NIL_CFG_NUM_THREADS]) {
        NIL_CFG_IDLE_ENTER_HOOK();
      }
      port_switch(ntp, otp);
    20ce:	6959      	ldr	r1, [r3, #20]
    20d0:	3a24      	subs	r2, #36	; 0x24
    20d2:	4291      	cmp	r1, r2
    20d4:	d905      	bls.n	20e2 <chSemWaitTimeoutS+0x52>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    20d6:	b672      	cpsid	i
void chSysHalt(const char *reason) {

  port_disable();

#if NIL_DBG_ENABLED
  nil.dbg_panic_msg = reason;
    20d8:	4b06      	ldr	r3, [pc, #24]	; (20f4 <chSemWaitTimeoutS+0x64>)
    20da:	63e3      	str	r3, [r4, #60]	; 0x3c
    20dc:	e7fe      	b.n	20dc <chSemWaitTimeoutS+0x4c>
  /* Note, the semaphore counter is a volatile variable so accesses are
     manually optimized.*/
  cnt_t cnt = sp->cnt;
  if (cnt <= (cnt_t)0) {
    if (TIME_IMMEDIATE == timeout) {
      return MSG_TIMEOUT;
    20de:	1c08      	adds	r0, r1, #0
    20e0:	e7dd      	b.n	209e <chSemWaitTimeoutS+0xe>
    if (NIL_THD_IS_READY(ntp)) {
      nil.current = nil.next = ntp;
      if (ntp == &nil.threads[NIL_CFG_NUM_THREADS]) {
        NIL_CFG_IDLE_ENTER_HOOK();
      }
      port_switch(ntp, otp);
    20e2:	1c19      	adds	r1, r3, #0
    20e4:	f7fe f9fc 	bl	4e0 <_port_switch>
      return nil.current->u1.msg;
    20e8:	6823      	ldr	r3, [r4, #0]
    20ea:	6898      	ldr	r0, [r3, #8]
    if (TIME_IMMEDIATE == timeout) {
      return MSG_TIMEOUT;
    }
    sp->cnt = cnt - (cnt_t)1;
    nil.current->u1.semp = sp;
    return chSchGoSleepTimeoutS(NIL_STATE_WTSEM, timeout);
    20ec:	e7d7      	b.n	209e <chSemWaitTimeoutS+0xe>
    20ee:	46c0      	nop			; (mov r8, r8)
    20f0:	200009ec 	.word	0x200009ec
    20f4:	00003ca0 	.word	0x00003ca0
    20f8:	46c0      	nop			; (mov r8, r8)
    20fa:	46c0      	nop			; (mov r8, r8)
    20fc:	46c0      	nop			; (mov r8, r8)
    20fe:	46c0      	nop			; (mov r8, r8)

00002100 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
    2100:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
    2102:	f000 fa7d 	bl	2600 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
  palInit(&pal_default_config);
    2106:	4807      	ldr	r0, [pc, #28]	; (2124 <halInit+0x24>)
    2108:	f000 fac2 	bl	2690 <_pal_lld_init>
#endif
#if (HAL_USE_ADC == TRUE) || defined(__DOXYGEN__)
  adcInit();
    210c:	f000 f960 	bl	23d0 <adcInit>
#endif
#if (HAL_USE_DAC == TRUE) || defined(__DOXYGEN__)
  dacInit();
#endif
#if (HAL_USE_EXT == TRUE) || defined(__DOXYGEN__)
  extInit();
    2110:	f000 f98e 	bl	2430 <extInit>
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
    2114:	f000 f9dc 	bl	24d0 <sdInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
    2118:	f000 fdb2 	bl	2c80 <boardInit>
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
    211c:	f000 f808 	bl	2130 <stInit>
#endif
}
    2120:	bd08      	pop	{r3, pc}
    2122:	46c0      	nop			; (mov r8, r8)
    2124:	00003d40 	.word	0x00003d40
    2128:	46c0      	nop			; (mov r8, r8)
    212a:	46c0      	nop			; (mov r8, r8)
    212c:	46c0      	nop			; (mov r8, r8)
    212e:	46c0      	nop			; (mov r8, r8)

00002130 <stInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void stInit(void) {
    2130:	b508      	push	{r3, lr}

  st_lld_init();
    2132:	f000 fd85 	bl	2c40 <st_lld_init>
}
    2136:	bd08      	pop	{r3, pc}
    2138:	46c0      	nop			; (mov r8, r8)
    213a:	46c0      	nop			; (mov r8, r8)
    213c:	46c0      	nop			; (mov r8, r8)
    213e:	46c0      	nop			; (mov r8, r8)

00002140 <iqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {
    2140:	b510      	push	{r4, lr}
 *
 * @init
 */
static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {

  chSemObjectInit(&tqp->sem, (cnt_t)0);
    2142:	2400      	movs	r4, #0
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
    2144:	6183      	str	r3, [r0, #24]
  iqp->q_link    = link;
    2146:	9b02      	ldr	r3, [sp, #8]
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
    2148:	6081      	str	r1, [r0, #8]
  iqp->q_rdptr   = bp;
    214a:	6141      	str	r1, [r0, #20]
  iqp->q_wrptr   = bp;
    214c:	6101      	str	r1, [r0, #16]
  iqp->q_top     = bp + size;
    214e:	1889      	adds	r1, r1, r2
    2150:	6004      	str	r4, [r0, #0]
    2152:	60c1      	str	r1, [r0, #12]
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
    2154:	6044      	str	r4, [r0, #4]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
    2156:	61c3      	str	r3, [r0, #28]
}
    2158:	bd10      	pop	{r4, pc}
    215a:	46c0      	nop			; (mov r8, r8)
    215c:	46c0      	nop			; (mov r8, r8)
    215e:	46c0      	nop			; (mov r8, r8)

00002160 <iqPutI>:
 * @retval Q_FULL       if the queue is full and the operation cannot be
 *                      completed.
 *
 * @iclass
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {
    2160:	b508      	push	{r3, lr}

  osalDbgCheckClassI();

  if (iqIsFullI(iqp)) {
    2162:	6942      	ldr	r2, [r0, #20]
    2164:	6903      	ldr	r3, [r0, #16]
    2166:	4293      	cmp	r3, r2
    2168:	d011      	beq.n	218e <iqPutI+0x2e>
    return Q_FULL;
  }

  iqp->q_counter++;
    216a:	6842      	ldr	r2, [r0, #4]
    216c:	3201      	adds	r2, #1
    216e:	6042      	str	r2, [r0, #4]
  *iqp->q_wrptr++ = b;
    2170:	1c5a      	adds	r2, r3, #1
    2172:	6102      	str	r2, [r0, #16]
    2174:	7019      	strb	r1, [r3, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
    2176:	6903      	ldr	r3, [r0, #16]
    2178:	68c2      	ldr	r2, [r0, #12]
    217a:	4293      	cmp	r3, r2
    217c:	d204      	bcs.n	2188 <iqPutI+0x28>
    iqp->q_wrptr = iqp->q_buffer;
  }

  osalThreadDequeueNextI(&iqp->q_waiting, Q_OK);
    217e:	2100      	movs	r1, #0
    2180:	f000 f9e6 	bl	2550 <osalThreadDequeueNextI>

  return Q_OK;
    2184:	2000      	movs	r0, #0
}
    2186:	bd08      	pop	{r3, pc}
  }

  iqp->q_counter++;
  *iqp->q_wrptr++ = b;
  if (iqp->q_wrptr >= iqp->q_top) {
    iqp->q_wrptr = iqp->q_buffer;
    2188:	6883      	ldr	r3, [r0, #8]
    218a:	6103      	str	r3, [r0, #16]
    218c:	e7f7      	b.n	217e <iqPutI+0x1e>
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  if (iqIsFullI(iqp)) {
    218e:	6842      	ldr	r2, [r0, #4]
    2190:	2a00      	cmp	r2, #0
    2192:	d0ea      	beq.n	216a <iqPutI+0xa>
    return Q_FULL;
    2194:	2004      	movs	r0, #4
    2196:	4240      	negs	r0, r0
    2198:	e7f5      	b.n	2186 <iqPutI+0x26>
    219a:	46c0      	nop			; (mov r8, r8)
    219c:	46c0      	nop			; (mov r8, r8)
    219e:	46c0      	nop			; (mov r8, r8)

000021a0 <iqGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t iqGetTimeout(input_queue_t *iqp, systime_t timeout) {
    21a0:	b538      	push	{r3, r4, r5, lr}
    21a2:	1c04      	adds	r4, r0, #0
    21a4:	1c0d      	adds	r5, r1, #0
    21a6:	b672      	cpsid	i
  uint8_t b;

  osalSysLock();
  if (iqp->q_notify != NULL) {
    21a8:	6983      	ldr	r3, [r0, #24]
    21aa:	2b00      	cmp	r3, #0
    21ac:	d007      	beq.n	21be <iqGetTimeout+0x1e>
    iqp->q_notify(iqp);
    21ae:	4798      	blx	r3
    21b0:	e005      	b.n	21be <iqGetTimeout+0x1e>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              systime_t time) {

  return chSemWaitTimeoutS(&tqp->sem, time);
    21b2:	1c20      	adds	r0, r4, #0
    21b4:	1c29      	adds	r1, r5, #0
    21b6:	f7ff ff6b 	bl	2090 <chSemWaitTimeoutS>
  }

  while (iqIsEmptyI(iqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
    if (msg < Q_OK) {
    21ba:	2800      	cmp	r0, #0
    21bc:	db0e      	blt.n	21dc <iqGetTimeout+0x3c>
  osalSysLock();
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (iqIsEmptyI(iqp)) {
    21be:	6863      	ldr	r3, [r4, #4]
    21c0:	2b00      	cmp	r3, #0
    21c2:	d0f6      	beq.n	21b2 <iqGetTimeout+0x12>
      osalSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
    21c4:	6863      	ldr	r3, [r4, #4]
  b = *iqp->q_rdptr++;
    21c6:	6962      	ldr	r2, [r4, #20]
      osalSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
    21c8:	3b01      	subs	r3, #1
    21ca:	6063      	str	r3, [r4, #4]
  b = *iqp->q_rdptr++;
    21cc:	1c53      	adds	r3, r2, #1
    21ce:	6163      	str	r3, [r4, #20]
    21d0:	7810      	ldrb	r0, [r2, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    21d2:	68e2      	ldr	r2, [r4, #12]
    21d4:	4293      	cmp	r3, r2
    21d6:	d301      	bcc.n	21dc <iqGetTimeout+0x3c>
    iqp->q_rdptr = iqp->q_buffer;
    21d8:	68a3      	ldr	r3, [r4, #8]
    21da:	6163      	str	r3, [r4, #20]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    21dc:	b662      	cpsie	i
  }
  osalSysUnlock();

  return (msg_t)b;
}
    21de:	bd38      	pop	{r3, r4, r5, pc}

000021e0 <iqReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, systime_t timeout) {
    21e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    21e2:	4657      	mov	r7, sl
    21e4:	464e      	mov	r6, r9
    21e6:	4645      	mov	r5, r8
    21e8:	b4e0      	push	{r5, r6, r7}
    21ea:	1c1e      	adds	r6, r3, #0
  qnotify_t nfy = iqp->q_notify;
    21ec:	6983      	ldr	r3, [r0, #24]
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, systime_t timeout) {
    21ee:	1c04      	adds	r4, r0, #0
    21f0:	468a      	mov	sl, r1
    21f2:	4691      	mov	r9, r2
  qnotify_t nfy = iqp->q_notify;
    21f4:	4698      	mov	r8, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    21f6:	b672      	cpsid	i
  size_t r = 0;
    21f8:	2700      	movs	r7, #0

  osalDbgCheck(n > 0U);

  osalSysLock();
  while (true) {
    if (nfy != NULL) {
    21fa:	4643      	mov	r3, r8
    21fc:	2b00      	cmp	r3, #0
    21fe:	d008      	beq.n	2212 <iqReadTimeout+0x32>
      nfy(iqp);
    2200:	1c20      	adds	r0, r4, #0
    2202:	47c0      	blx	r8
    2204:	e005      	b.n	2212 <iqReadTimeout+0x32>
    2206:	1c20      	adds	r0, r4, #0
    2208:	1c31      	adds	r1, r6, #0
    220a:	f7ff ff41 	bl	2090 <chSemWaitTimeoutS>
    }

    while (iqIsEmptyI(iqp)) {
      if (osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
    220e:	2800      	cmp	r0, #0
    2210:	d117      	bne.n	2242 <iqReadTimeout+0x62>
  while (true) {
    if (nfy != NULL) {
      nfy(iqp);
    }

    while (iqIsEmptyI(iqp)) {
    2212:	6865      	ldr	r5, [r4, #4]
    2214:	2d00      	cmp	r5, #0
    2216:	d0f6      	beq.n	2206 <iqReadTimeout+0x26>
        osalSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
    2218:	6863      	ldr	r3, [r4, #4]
    221a:	3b01      	subs	r3, #1
    221c:	6063      	str	r3, [r4, #4]
    *bp++ = *iqp->q_rdptr++;
    221e:	6963      	ldr	r3, [r4, #20]
    2220:	1c5a      	adds	r2, r3, #1
    2222:	6162      	str	r2, [r4, #20]
    2224:	4652      	mov	r2, sl
    2226:	781b      	ldrb	r3, [r3, #0]
    2228:	55d3      	strb	r3, [r2, r7]
    if (iqp->q_rdptr >= iqp->q_top) {
    222a:	6963      	ldr	r3, [r4, #20]
    222c:	68e2      	ldr	r2, [r4, #12]
    222e:	4293      	cmp	r3, r2
    2230:	d301      	bcc.n	2236 <iqReadTimeout+0x56>
      iqp->q_rdptr = iqp->q_buffer;
    2232:	68a3      	ldr	r3, [r4, #8]
    2234:	6163      	str	r3, [r4, #20]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2236:	b662      	cpsie	i
    }
    osalSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    r++;
    2238:	3701      	adds	r7, #1
    if (--n == 0U) {
    223a:	45b9      	cmp	r9, r7
    223c:	d002      	beq.n	2244 <iqReadTimeout+0x64>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    223e:	b672      	cpsid	i
    2240:	e7db      	b.n	21fa <iqReadTimeout+0x1a>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2242:	b662      	cpsie	i
      return r;
    }

    osalSysLock();
  }
}
    2244:	1c38      	adds	r0, r7, #0
    2246:	bc1c      	pop	{r2, r3, r4}
    2248:	4690      	mov	r8, r2
    224a:	4699      	mov	r9, r3
    224c:	46a2      	mov	sl, r4
    224e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002250 <oqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {
    2250:	b510      	push	{r4, lr}
 *
 * @init
 */
static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {

  chSemObjectInit(&tqp->sem, (cnt_t)0);
    2252:	2400      	movs	r4, #0
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
    2254:	6183      	str	r3, [r0, #24]
  oqp->q_link    = link;
    2256:	9b02      	ldr	r3, [sp, #8]
    2258:	6004      	str	r4, [r0, #0]
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
    225a:	6042      	str	r2, [r0, #4]
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
    225c:	188a      	adds	r2, r1, r2
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
    225e:	6081      	str	r1, [r0, #8]
  oqp->q_rdptr   = bp;
    2260:	6141      	str	r1, [r0, #20]
  oqp->q_wrptr   = bp;
    2262:	6101      	str	r1, [r0, #16]
  oqp->q_top     = bp + size;
    2264:	60c2      	str	r2, [r0, #12]
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
    2266:	61c3      	str	r3, [r0, #28]
}
    2268:	bd10      	pop	{r4, pc}
    226a:	46c0      	nop			; (mov r8, r8)
    226c:	46c0      	nop			; (mov r8, r8)
    226e:	46c0      	nop			; (mov r8, r8)

00002270 <oqPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
    2270:	b570      	push	{r4, r5, r6, lr}
    2272:	1c04      	adds	r4, r0, #0
    2274:	1c0e      	adds	r6, r1, #0
    2276:	1c15      	adds	r5, r2, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2278:	b672      	cpsid	i
    227a:	e005      	b.n	2288 <oqPutTimeout+0x18>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              systime_t time) {

  return chSemWaitTimeoutS(&tqp->sem, time);
    227c:	1c20      	adds	r0, r4, #0
    227e:	1c29      	adds	r1, r5, #0
    2280:	f7ff ff06 	bl	2090 <chSemWaitTimeoutS>

  osalSysLock();
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < Q_OK) {
    2284:	2800      	cmp	r0, #0
    2286:	db17      	blt.n	22b8 <oqPutTimeout+0x48>
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  osalSysLock();
  while (oqIsFullI(oqp)) {
    2288:	6863      	ldr	r3, [r4, #4]
    228a:	2b00      	cmp	r3, #0
    228c:	d0f6      	beq.n	227c <oqPutTimeout+0xc>
      osalSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
    228e:	6863      	ldr	r3, [r4, #4]
    2290:	3b01      	subs	r3, #1
    2292:	6063      	str	r3, [r4, #4]
  *oqp->q_wrptr++ = b;
    2294:	6923      	ldr	r3, [r4, #16]
    2296:	1c5a      	adds	r2, r3, #1
    2298:	6122      	str	r2, [r4, #16]
    229a:	701e      	strb	r6, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
    229c:	6923      	ldr	r3, [r4, #16]
    229e:	68e2      	ldr	r2, [r4, #12]
    22a0:	4293      	cmp	r3, r2
    22a2:	d301      	bcc.n	22a8 <oqPutTimeout+0x38>
    oqp->q_wrptr = oqp->q_buffer;
    22a4:	68a3      	ldr	r3, [r4, #8]
    22a6:	6123      	str	r3, [r4, #16]
  }

  if (oqp->q_notify != NULL) {
    22a8:	69a3      	ldr	r3, [r4, #24]
    22aa:	2b00      	cmp	r3, #0
    22ac:	d001      	beq.n	22b2 <oqPutTimeout+0x42>
    oqp->q_notify(oqp);
    22ae:	1c20      	adds	r0, r4, #0
    22b0:	4798      	blx	r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    22b2:	b662      	cpsie	i
  }
  osalSysUnlock();

  return Q_OK;
    22b4:	2000      	movs	r0, #0
}
    22b6:	bd70      	pop	{r4, r5, r6, pc}
    22b8:	b662      	cpsie	i
  osalSysLock();
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < Q_OK) {
      osalSysUnlock();
      return msg;
    22ba:	e7fc      	b.n	22b6 <oqPutTimeout+0x46>
    22bc:	46c0      	nop			; (mov r8, r8)
    22be:	46c0      	nop			; (mov r8, r8)

000022c0 <oqGetI>:
msg_t oqGetI(output_queue_t *oqp) {
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
    22c0:	6943      	ldr	r3, [r0, #20]
    22c2:	6902      	ldr	r2, [r0, #16]
 * @return              The byte value from the queue.
 * @retval Q_EMPTY      if the queue is empty.
 *
 * @iclass
 */
msg_t oqGetI(output_queue_t *oqp) {
    22c4:	b510      	push	{r4, lr}
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
    22c6:	429a      	cmp	r2, r3
    22c8:	d010      	beq.n	22ec <oqGetI+0x2c>
    return Q_EMPTY;
  }

  oqp->q_counter++;
    22ca:	6842      	ldr	r2, [r0, #4]
    22cc:	3201      	adds	r2, #1
    22ce:	6042      	str	r2, [r0, #4]
  b = *oqp->q_rdptr++;
    22d0:	1c5a      	adds	r2, r3, #1
    22d2:	6142      	str	r2, [r0, #20]
    22d4:	781c      	ldrb	r4, [r3, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
    22d6:	68c3      	ldr	r3, [r0, #12]
    22d8:	429a      	cmp	r2, r3
    22da:	d204      	bcs.n	22e6 <oqGetI+0x26>
    oqp->q_rdptr = oqp->q_buffer;
  }

  osalThreadDequeueNextI(&oqp->q_waiting, Q_OK);
    22dc:	2100      	movs	r1, #0
    22de:	f000 f937 	bl	2550 <osalThreadDequeueNextI>

  return (msg_t)b;
    22e2:	1c20      	adds	r0, r4, #0
}
    22e4:	bd10      	pop	{r4, pc}
  }

  oqp->q_counter++;
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
    oqp->q_rdptr = oqp->q_buffer;
    22e6:	6883      	ldr	r3, [r0, #8]
    22e8:	6143      	str	r3, [r0, #20]
    22ea:	e7f7      	b.n	22dc <oqGetI+0x1c>
msg_t oqGetI(output_queue_t *oqp) {
  uint8_t b;

  osalDbgCheckClassI();

  if (oqIsEmptyI(oqp)) {
    22ec:	6842      	ldr	r2, [r0, #4]
    22ee:	2a00      	cmp	r2, #0
    22f0:	d0eb      	beq.n	22ca <oqGetI+0xa>
    return Q_EMPTY;
    22f2:	2003      	movs	r0, #3
    22f4:	4240      	negs	r0, r0
    22f6:	e7f5      	b.n	22e4 <oqGetI+0x24>
    22f8:	46c0      	nop			; (mov r8, r8)
    22fa:	46c0      	nop			; (mov r8, r8)
    22fc:	46c0      	nop			; (mov r8, r8)
    22fe:	46c0      	nop			; (mov r8, r8)

00002300 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
    2300:	b5f0      	push	{r4, r5, r6, r7, lr}
    2302:	464e      	mov	r6, r9
    2304:	4645      	mov	r5, r8
    2306:	4657      	mov	r7, sl
    2308:	4699      	mov	r9, r3
  qnotify_t nfy = oqp->q_notify;
    230a:	6983      	ldr	r3, [r0, #24]
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
    230c:	b4e0      	push	{r5, r6, r7}
    230e:	1c04      	adds	r4, r0, #0
    2310:	1c0e      	adds	r6, r1, #0
    2312:	1c15      	adds	r5, r2, #0
  qnotify_t nfy = oqp->q_notify;
    2314:	4698      	mov	r8, r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2316:	b672      	cpsid	i
    2318:	2700      	movs	r7, #0
    231a:	2b00      	cmp	r3, #0
    231c:	d031      	beq.n	2382 <oqWriteTimeout+0x82>

  osalDbgCheck(n > 0U);

  osalSysLock();
  while (true) {
    while (oqIsFullI(oqp)) {
    231e:	6863      	ldr	r3, [r4, #4]
    2320:	2b00      	cmp	r3, #0
    2322:	d01b      	beq.n	235c <oqWriteTimeout+0x5c>
      if (osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
        osalSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
    2324:	6862      	ldr	r2, [r4, #4]
    *oqp->q_wrptr++ = *bp++;
    2326:	6923      	ldr	r3, [r4, #16]
      if (osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
        osalSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
    2328:	3a01      	subs	r2, #1
    232a:	6062      	str	r2, [r4, #4]
    *oqp->q_wrptr++ = *bp++;
    232c:	1c5a      	adds	r2, r3, #1
    232e:	6122      	str	r2, [r4, #16]
    2330:	1c72      	adds	r2, r6, #1
    2332:	4692      	mov	sl, r2
    2334:	7832      	ldrb	r2, [r6, #0]
    2336:	701a      	strb	r2, [r3, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
    2338:	6923      	ldr	r3, [r4, #16]
    233a:	68e2      	ldr	r2, [r4, #12]
    233c:	4293      	cmp	r3, r2
    233e:	d301      	bcc.n	2344 <oqWriteTimeout+0x44>
      oqp->q_wrptr = oqp->q_buffer;
    2340:	68a3      	ldr	r3, [r4, #8]
    2342:	6123      	str	r3, [r4, #16]
    }

    if (nfy != NULL) {
      nfy(oqp);
    2344:	1c20      	adds	r0, r4, #0
    2346:	47c0      	blx	r8
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2348:	b662      	cpsie	i
    }
    osalSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
    234a:	3d01      	subs	r5, #1
    if (nfy != NULL) {
      nfy(oqp);
    }
    osalSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    234c:	3701      	adds	r7, #1
    if (--n == 0U) {
    234e:	2d00      	cmp	r5, #0
    2350:	d00b      	beq.n	236a <oqWriteTimeout+0x6a>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2352:	b672      	cpsid	i

  osalDbgCheck(n > 0U);

  osalSysLock();
  while (true) {
    while (oqIsFullI(oqp)) {
    2354:	6863      	ldr	r3, [r4, #4]
        osalSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
    2356:	4656      	mov	r6, sl

  osalDbgCheck(n > 0U);

  osalSysLock();
  while (true) {
    while (oqIsFullI(oqp)) {
    2358:	2b00      	cmp	r3, #0
    235a:	d1e3      	bne.n	2324 <oqWriteTimeout+0x24>
    235c:	1c20      	adds	r0, r4, #0
    235e:	4649      	mov	r1, r9
    2360:	f7ff fe96 	bl	2090 <chSemWaitTimeoutS>
      if (osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
    2364:	2800      	cmp	r0, #0
    2366:	d0da      	beq.n	231e <oqWriteTimeout+0x1e>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2368:	b662      	cpsie	i
      return w;
    }

    osalSysLock();
  }
}
    236a:	1c38      	adds	r0, r7, #0
    236c:	bc1c      	pop	{r2, r3, r4}
    236e:	4690      	mov	r8, r2
    2370:	4699      	mov	r9, r3
    2372:	46a2      	mov	sl, r4
    2374:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2376:	1c20      	adds	r0, r4, #0
    2378:	4649      	mov	r1, r9
    237a:	f7ff fe89 	bl	2090 <chSemWaitTimeoutS>
  osalDbgCheck(n > 0U);

  osalSysLock();
  while (true) {
    while (oqIsFullI(oqp)) {
      if (osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
    237e:	2800      	cmp	r0, #0
    2380:	d1f2      	bne.n	2368 <oqWriteTimeout+0x68>

  osalDbgCheck(n > 0U);

  osalSysLock();
  while (true) {
    while (oqIsFullI(oqp)) {
    2382:	6863      	ldr	r3, [r4, #4]
    2384:	2b00      	cmp	r3, #0
    2386:	d0f6      	beq.n	2376 <oqWriteTimeout+0x76>
      if (osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
        osalSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
    2388:	6863      	ldr	r3, [r4, #4]
    *oqp->q_wrptr++ = *bp++;
    238a:	1c71      	adds	r1, r6, #1
      if (osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
        osalSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
    238c:	3b01      	subs	r3, #1
    238e:	6063      	str	r3, [r4, #4]
    *oqp->q_wrptr++ = *bp++;
    2390:	6923      	ldr	r3, [r4, #16]
    2392:	1c5a      	adds	r2, r3, #1
    2394:	6122      	str	r2, [r4, #16]
    2396:	7832      	ldrb	r2, [r6, #0]
    2398:	701a      	strb	r2, [r3, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
    239a:	6923      	ldr	r3, [r4, #16]
    239c:	68e2      	ldr	r2, [r4, #12]
    239e:	4293      	cmp	r3, r2
    23a0:	d301      	bcc.n	23a6 <oqWriteTimeout+0xa6>
      oqp->q_wrptr = oqp->q_buffer;
    23a2:	68a3      	ldr	r3, [r4, #8]
    23a4:	6123      	str	r3, [r4, #16]
    23a6:	b662      	cpsie	i
      nfy(oqp);
    }
    osalSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
    23a8:	3d01      	subs	r5, #1
    if (nfy != NULL) {
      nfy(oqp);
    }
    osalSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    23aa:	3701      	adds	r7, #1
    if (--n == 0U) {
    23ac:	2d00      	cmp	r5, #0
    23ae:	d0dc      	beq.n	236a <oqWriteTimeout+0x6a>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    23b0:	b672      	cpsid	i

  osalDbgCheck(n > 0U);

  osalSysLock();
  while (true) {
    while (oqIsFullI(oqp)) {
    23b2:	6863      	ldr	r3, [r4, #4]
        osalSysUnlock();
        return w;
      }
    }
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
    23b4:	1c0e      	adds	r6, r1, #0

  osalDbgCheck(n > 0U);

  osalSysLock();
  while (true) {
    while (oqIsFullI(oqp)) {
    23b6:	2b00      	cmp	r3, #0
    23b8:	d1e6      	bne.n	2388 <oqWriteTimeout+0x88>
    23ba:	1c20      	adds	r0, r4, #0
    23bc:	4649      	mov	r1, r9
    23be:	f7ff fe67 	bl	2090 <chSemWaitTimeoutS>
      if (osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
    23c2:	2800      	cmp	r0, #0
    23c4:	d0dd      	beq.n	2382 <oqWriteTimeout+0x82>
    23c6:	e7cf      	b.n	2368 <oqWriteTimeout+0x68>
    23c8:	46c0      	nop			; (mov r8, r8)
    23ca:	46c0      	nop			; (mov r8, r8)
    23cc:	46c0      	nop			; (mov r8, r8)
    23ce:	46c0      	nop			; (mov r8, r8)

000023d0 <adcInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void adcInit(void) {
    23d0:	b508      	push	{r3, lr}

  adc_lld_init();
    23d2:	f000 fb95 	bl	2b00 <adc_lld_init>
}
    23d6:	bd08      	pop	{r3, pc}
    23d8:	46c0      	nop			; (mov r8, r8)
    23da:	46c0      	nop			; (mov r8, r8)
    23dc:	46c0      	nop			; (mov r8, r8)
    23de:	46c0      	nop			; (mov r8, r8)

000023e0 <adcObjectInit>:
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
    23e0:	2301      	movs	r3, #1
    23e2:	6003      	str	r3, [r0, #0]
  adcp->config   = NULL;
    23e4:	2300      	movs	r3, #0
    23e6:	6043      	str	r3, [r0, #4]
  adcp->samples  = NULL;
    23e8:	6083      	str	r3, [r0, #8]
  adcp->depth    = 0;
    23ea:	60c3      	str	r3, [r0, #12]
  adcp->grpp     = NULL;
    23ec:	6103      	str	r3, [r0, #16]
  osalMutexObjectInit(&adcp->mutex);
#endif
#if defined(ADC_DRIVER_EXT_INIT_HOOK)
  ADC_DRIVER_EXT_INIT_HOOK(adcp);
#endif
}
    23ee:	4770      	bx	lr

000023f0 <adcStart>:
 * @param[in] config    pointer to the @p ADCConfig object. Depending on
 *                      the implementation the value can be @p NULL.
 *
 * @api
 */
void adcStart(ADCDriver *adcp, const ADCConfig *config) {
    23f0:	b510      	push	{r4, lr}
    23f2:	1c04      	adds	r4, r0, #0
    23f4:	b672      	cpsid	i
  osalDbgCheck(adcp != NULL);

  osalSysLock();
  osalDbgAssert((adcp->state == ADC_STOP) || (adcp->state == ADC_READY),
                "invalid state");
  adcp->config = config;
    23f6:	6041      	str	r1, [r0, #4]
  adc_lld_start(adcp);
    23f8:	f000 fb92 	bl	2b20 <adc_lld_start>
  adcp->state = ADC_READY;
    23fc:	2302      	movs	r3, #2
    23fe:	6023      	str	r3, [r4, #0]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2400:	b662      	cpsie	i
  osalSysUnlock();
}
    2402:	bd10      	pop	{r4, pc}
    2404:	46c0      	nop			; (mov r8, r8)
    2406:	46c0      	nop			; (mov r8, r8)
    2408:	46c0      	nop			; (mov r8, r8)
    240a:	46c0      	nop			; (mov r8, r8)
    240c:	46c0      	nop			; (mov r8, r8)
    240e:	46c0      	nop			; (mov r8, r8)

00002410 <adcStartConversion>:
 * @api
 */
void adcStartConversion(ADCDriver *adcp,
                        const ADCConversionGroup *grpp,
                        adcsample_t *samples,
                        size_t depth) {
    2410:	b508      	push	{r3, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2412:	b672      	cpsid	i
                (adcp->state == ADC_COMPLETE) ||
                (adcp->state == ADC_ERROR),
                "not ready");

  adcp->samples  = samples;
  adcp->depth    = depth;
    2414:	60c3      	str	r3, [r0, #12]
  adcp->grpp     = grpp;
  adcp->state    = ADC_ACTIVE;
    2416:	2303      	movs	r3, #3
  osalDbgAssert((adcp->state == ADC_READY) ||
                (adcp->state == ADC_COMPLETE) ||
                (adcp->state == ADC_ERROR),
                "not ready");

  adcp->samples  = samples;
    2418:	6082      	str	r2, [r0, #8]
  adcp->depth    = depth;
  adcp->grpp     = grpp;
    241a:	6101      	str	r1, [r0, #16]
  adcp->state    = ADC_ACTIVE;
    241c:	6003      	str	r3, [r0, #0]
  adc_lld_start_conversion(adcp);
    241e:	f000 fbcf 	bl	2bc0 <adc_lld_start_conversion>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2422:	b662      	cpsie	i
                        size_t depth) {

  osalSysLock();
  adcStartConversionI(adcp, grpp, samples, depth);
  osalSysUnlock();
}
    2424:	bd08      	pop	{r3, pc}
    2426:	46c0      	nop			; (mov r8, r8)
    2428:	46c0      	nop			; (mov r8, r8)
    242a:	46c0      	nop			; (mov r8, r8)
    242c:	46c0      	nop			; (mov r8, r8)
    242e:	46c0      	nop			; (mov r8, r8)

00002430 <extInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void extInit(void) {
    2430:	b508      	push	{r3, lr}

  ext_lld_init();
    2432:	f000 fb25 	bl	2a80 <ext_lld_init>
}
    2436:	bd08      	pop	{r3, pc}
    2438:	46c0      	nop			; (mov r8, r8)
    243a:	46c0      	nop			; (mov r8, r8)
    243c:	46c0      	nop			; (mov r8, r8)
    243e:	46c0      	nop			; (mov r8, r8)

00002440 <extObjectInit>:
 * @init
 */
void extObjectInit(EXTDriver *extp) {

  extp->state  = EXT_STOP;
  extp->config = NULL;
    2440:	2201      	movs	r2, #1
    2442:	2300      	movs	r3, #0
    2444:	c00c      	stmia	r0!, {r2, r3}
}
    2446:	4770      	bx	lr
    2448:	46c0      	nop			; (mov r8, r8)
    244a:	46c0      	nop			; (mov r8, r8)
    244c:	46c0      	nop			; (mov r8, r8)
    244e:	46c0      	nop			; (mov r8, r8)

00002450 <readt>:
static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {
    2450:	b508      	push	{r3, lr}

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
    2452:	3014      	adds	r0, #20
    2454:	f7ff fec4 	bl	21e0 <iqReadTimeout>
}
    2458:	bd08      	pop	{r3, pc}
    245a:	46c0      	nop			; (mov r8, r8)
    245c:	46c0      	nop			; (mov r8, r8)
    245e:	46c0      	nop			; (mov r8, r8)

00002460 <read>:

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {
    2460:	b508      	push	{r3, lr}

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
    2462:	3014      	adds	r0, #20
    2464:	2300      	movs	r3, #0
    2466:	f7ff febb 	bl	21e0 <iqReadTimeout>
                       n, TIME_INFINITE);
}
    246a:	bd08      	pop	{r3, pc}
    246c:	46c0      	nop			; (mov r8, r8)
    246e:	46c0      	nop			; (mov r8, r8)

00002470 <writet>:
static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {
    2470:	b508      	push	{r3, lr}

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
    2472:	3034      	adds	r0, #52	; 0x34
    2474:	f7ff ff44 	bl	2300 <oqWriteTimeout>
}
    2478:	bd08      	pop	{r3, pc}
    247a:	46c0      	nop			; (mov r8, r8)
    247c:	46c0      	nop			; (mov r8, r8)
    247e:	46c0      	nop			; (mov r8, r8)

00002480 <write>:
/*
 * Interface implementation, the following functions just invoke the equivalent
 * queue-level function or macro.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {
    2480:	b508      	push	{r3, lr}

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
    2482:	3034      	adds	r0, #52	; 0x34
    2484:	2300      	movs	r3, #0
    2486:	f7ff ff3b 	bl	2300 <oqWriteTimeout>
                        n, TIME_INFINITE);
}
    248a:	bd08      	pop	{r3, pc}
    248c:	46c0      	nop			; (mov r8, r8)
    248e:	46c0      	nop			; (mov r8, r8)

00002490 <gett>:
static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {
    2490:	b508      	push	{r3, lr}

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
    2492:	3014      	adds	r0, #20
    2494:	f7ff fe84 	bl	21a0 <iqGetTimeout>
}
    2498:	bd08      	pop	{r3, pc}
    249a:	46c0      	nop			; (mov r8, r8)
    249c:	46c0      	nop			; (mov r8, r8)
    249e:	46c0      	nop			; (mov r8, r8)

000024a0 <get>:
static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {
    24a0:	b508      	push	{r3, lr}

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
    24a2:	3014      	adds	r0, #20
    24a4:	2100      	movs	r1, #0
    24a6:	f7ff fe7b 	bl	21a0 <iqGetTimeout>
}
    24aa:	bd08      	pop	{r3, pc}
    24ac:	46c0      	nop			; (mov r8, r8)
    24ae:	46c0      	nop			; (mov r8, r8)

000024b0 <putt>:

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {
    24b0:	b508      	push	{r3, lr}

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
    24b2:	3034      	adds	r0, #52	; 0x34
    24b4:	f7ff fedc 	bl	2270 <oqPutTimeout>
}
    24b8:	bd08      	pop	{r3, pc}
    24ba:	46c0      	nop			; (mov r8, r8)
    24bc:	46c0      	nop			; (mov r8, r8)
    24be:	46c0      	nop			; (mov r8, r8)

000024c0 <put>:

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {
    24c0:	b508      	push	{r3, lr}

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
    24c2:	3034      	adds	r0, #52	; 0x34
    24c4:	2200      	movs	r2, #0
    24c6:	f7ff fed3 	bl	2270 <oqPutTimeout>
}
    24ca:	bd08      	pop	{r3, pc}
    24cc:	46c0      	nop			; (mov r8, r8)
    24ce:	46c0      	nop			; (mov r8, r8)

000024d0 <sdInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sdInit(void) {
    24d0:	b508      	push	{r3, lr}

  sd_lld_init();
    24d2:	f000 fa05 	bl	28e0 <sd_lld_init>
}
    24d6:	bd08      	pop	{r3, pc}
    24d8:	46c0      	nop			; (mov r8, r8)
    24da:	46c0      	nop			; (mov r8, r8)
    24dc:	46c0      	nop			; (mov r8, r8)
    24de:	46c0      	nop			; (mov r8, r8)

000024e0 <sdObjectInit>:
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
    24e0:	b530      	push	{r4, r5, lr}
    24e2:	1c15      	adds	r5, r2, #0

  sdp->vmt = &vmt;
    24e4:	4a0e      	ldr	r2, [pc, #56]	; (2520 <sdObjectInit+0x40>)
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
    24e6:	1c04      	adds	r4, r0, #0

  sdp->vmt = &vmt;
    24e8:	6002      	str	r2, [r0, #0]
 */
static inline void osalEventObjectInit(event_source_t *esp) {

  osalDbgCheck(esp != NULL);

  esp->flags = 0;
    24ea:	2000      	movs	r0, #0
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
    24ec:	1c0b      	adds	r3, r1, #0
    24ee:	6060      	str	r0, [r4, #4]
  esp->cb    = NULL;
    24f0:	60a0      	str	r0, [r4, #8]
  esp->param = NULL;
    24f2:	60e0      	str	r0, [r4, #12]

  sdp->vmt = &vmt;
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
    24f4:	2201      	movs	r2, #1
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
    24f6:	1c20      	adds	r0, r4, #0
    24f8:	1c21      	adds	r1, r4, #0
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
    24fa:	b083      	sub	sp, #12

  sdp->vmt = &vmt;
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
    24fc:	6122      	str	r2, [r4, #16]
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
    24fe:	3014      	adds	r0, #20
    2500:	3154      	adds	r1, #84	; 0x54
    2502:	9400      	str	r4, [sp, #0]
    2504:	2210      	movs	r2, #16
    2506:	f7ff fe1b 	bl	2140 <iqObjectInit>
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
    250a:	1c20      	adds	r0, r4, #0
    250c:	1c21      	adds	r1, r4, #0
    250e:	3034      	adds	r0, #52	; 0x34
    2510:	3164      	adds	r1, #100	; 0x64
    2512:	9400      	str	r4, [sp, #0]
    2514:	2210      	movs	r2, #16
    2516:	1c2b      	adds	r3, r5, #0
    2518:	f7ff fe9a 	bl	2250 <oqObjectInit>
}
    251c:	b003      	add	sp, #12
    251e:	bd30      	pop	{r4, r5, pc}
    2520:	00003cb0 	.word	0x00003cb0
    2524:	46c0      	nop			; (mov r8, r8)
    2526:	46c0      	nop			; (mov r8, r8)
    2528:	46c0      	nop			; (mov r8, r8)
    252a:	46c0      	nop			; (mov r8, r8)
    252c:	46c0      	nop			; (mov r8, r8)
    252e:	46c0      	nop			; (mov r8, r8)

00002530 <sdStart>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @api
 */
void sdStart(SerialDriver *sdp, const SerialConfig *config) {
    2530:	b510      	push	{r4, lr}
    2532:	1c04      	adds	r4, r0, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2534:	b672      	cpsid	i
  osalDbgCheck(sdp != NULL);

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
    2536:	f000 f9e3 	bl	2900 <sd_lld_start>
  sdp->state = SD_READY;
    253a:	2302      	movs	r3, #2
    253c:	6123      	str	r3, [r4, #16]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    253e:	b662      	cpsie	i
  osalSysUnlock();
}
    2540:	bd10      	pop	{r4, pc}
    2542:	46c0      	nop			; (mov r8, r8)
    2544:	46c0      	nop			; (mov r8, r8)
    2546:	46c0      	nop			; (mov r8, r8)
    2548:	46c0      	nop			; (mov r8, r8)
    254a:	46c0      	nop			; (mov r8, r8)
    254c:	46c0      	nop			; (mov r8, r8)
    254e:	46c0      	nop			; (mov r8, r8)

00002550 <osalThreadDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
    2550:	b508      	push	{r3, lr}
  semaphore_t *sp = &tqp->sem;

  if (chSemGetCounterI(&tqp->sem) < (cnt_t)0) {
    2552:	6803      	ldr	r3, [r0, #0]
    2554:	2b00      	cmp	r3, #0
    2556:	db00      	blt.n	255a <osalThreadDequeueNextI+0xa>

      chDbgAssert(tp < &nil.threads[NIL_CFG_NUM_THREADS],
                  "pointer out of range");
    }
  }
}
    2558:	bd08      	pop	{r3, pc}

  if (chSemGetCounterI(&tqp->sem) < (cnt_t)0) {
    thread_t *tp = nil.threads;
    while (true) {
      /* Is this thread waiting on this semaphore?*/
      if (tp->u1.semp == sp) {
    255a:	4b08      	ldr	r3, [pc, #32]	; (257c <osalThreadDequeueNextI+0x2c>)
    255c:	695a      	ldr	r2, [r3, #20]
    255e:	330c      	adds	r3, #12
    2560:	4282      	cmp	r2, r0
    2562:	d003      	beq.n	256c <osalThreadDequeueNextI+0x1c>
        chDbgAssert(NIL_THD_IS_WTSEM(tp), "not waiting");

        (void) chSchReadyI(tp, msg);
        return;
      }
      tp++;
    2564:	3318      	adds	r3, #24

  if (chSemGetCounterI(&tqp->sem) < (cnt_t)0) {
    thread_t *tp = nil.threads;
    while (true) {
      /* Is this thread waiting on this semaphore?*/
      if (tp->u1.semp == sp) {
    2566:	689a      	ldr	r2, [r3, #8]
    2568:	4282      	cmp	r2, r0
    256a:	d1fb      	bne.n	2564 <osalThreadDequeueNextI+0x14>
        sp->cnt++;
    256c:	6802      	ldr	r2, [r0, #0]
    256e:	3201      	adds	r2, #1
    2570:	6002      	str	r2, [r0, #0]

        chDbgAssert(NIL_THD_IS_WTSEM(tp), "not waiting");

        (void) chSchReadyI(tp, msg);
    2572:	1c18      	adds	r0, r3, #0
    2574:	f7ff fd3c 	bl	1ff0 <chSchReadyI>
        return;
    2578:	e7ee      	b.n	2558 <osalThreadDequeueNextI+0x8>
    257a:	46c0      	nop			; (mov r8, r8)
    257c:	200009ec 	.word	0x200009ec

00002580 <nvicEnableVector>:

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
    2580:	1c03      	adds	r3, r0, #0
    2582:	4a0a      	ldr	r2, [pc, #40]	; (25ac <nvicEnableVector+0x2c>)
    2584:	33c0      	adds	r3, #192	; 0xc0
    2586:	0189      	lsls	r1, r1, #6
    2588:	009b      	lsls	r3, r3, #2
    258a:	5099      	str	r1, [r3, r2]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
    258c:	231f      	movs	r3, #31
    258e:	2201      	movs	r2, #1
    2590:	4003      	ands	r3, r0
    2592:	409a      	lsls	r2, r3
    2594:	1c13      	adds	r3, r2, #0
    2596:	4a05      	ldr	r2, [pc, #20]	; (25ac <nvicEnableVector+0x2c>)
    2598:	0940      	lsrs	r0, r0, #5
    259a:	4694      	mov	ip, r2
    259c:	22c0      	movs	r2, #192	; 0xc0
    259e:	0080      	lsls	r0, r0, #2
    25a0:	4460      	add	r0, ip
    25a2:	0052      	lsls	r2, r2, #1
    25a4:	5083      	str	r3, [r0, r2]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
    25a6:	6003      	str	r3, [r0, #0]
}
    25a8:	4770      	bx	lr
    25aa:	46c0      	nop			; (mov r8, r8)
    25ac:	e000e100 	.word	0xe000e100

000025b0 <nvicDisableVector>:
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {

  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
    25b0:	221f      	movs	r2, #31
    25b2:	2101      	movs	r1, #1
    25b4:	4002      	ands	r2, r0
    25b6:	4091      	lsls	r1, r2
    25b8:	1c0a      	adds	r2, r1, #0
    25ba:	0943      	lsrs	r3, r0, #5
    25bc:	4904      	ldr	r1, [pc, #16]	; (25d0 <nvicDisableVector+0x20>)
    25be:	3320      	adds	r3, #32
    25c0:	009b      	lsls	r3, r3, #2
    25c2:	505a      	str	r2, [r3, r1]
#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = 0U;
    25c4:	2300      	movs	r3, #0
    25c6:	30c0      	adds	r0, #192	; 0xc0
    25c8:	0080      	lsls	r0, r0, #2
    25ca:	5043      	str	r3, [r0, r1]
#endif
}
    25cc:	4770      	bx	lr
    25ce:	46c0      	nop			; (mov r8, r8)
    25d0:	e000e100 	.word	0xe000e100
    25d4:	46c0      	nop			; (mov r8, r8)
    25d6:	46c0      	nop			; (mov r8, r8)
    25d8:	46c0      	nop			; (mov r8, r8)
    25da:	46c0      	nop			; (mov r8, r8)
    25dc:	46c0      	nop			; (mov r8, r8)
    25de:	46c0      	nop			; (mov r8, r8)

000025e0 <nvicSetSystemHandlerPriority>:
  SCB->SHP[_SHP_IDX(handler)] = (SCB->SHP[_SHP_IDX(handler)] & ~(0xFFU << _BIT_SHIFT(handler))) |
                                (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(handler));
#elif defined(__CORE_CM7_H_GENERIC)
  SCB->SHPR[handler] = NVIC_PRIORITY_MASK(prio);
#else
  SCB->SHP[handler] = NVIC_PRIORITY_MASK(prio);
    25e0:	4b03      	ldr	r3, [pc, #12]	; (25f0 <nvicSetSystemHandlerPriority+0x10>)
    25e2:	0080      	lsls	r0, r0, #2
    25e4:	469c      	mov	ip, r3
    25e6:	0189      	lsls	r1, r1, #6
    25e8:	4460      	add	r0, ip
    25ea:	6041      	str	r1, [r0, #4]
#endif
}
    25ec:	4770      	bx	lr
    25ee:	46c0      	nop			; (mov r8, r8)
    25f0:	e000ed18 	.word	0xe000ed18
    25f4:	46c0      	nop			; (mov r8, r8)
    25f6:	46c0      	nop			; (mov r8, r8)
    25f8:	46c0      	nop			; (mov r8, r8)
    25fa:	46c0      	nop			; (mov r8, r8)
    25fc:	46c0      	nop			; (mov r8, r8)
    25fe:	46c0      	nop			; (mov r8, r8)

00002600 <hal_lld_init>:
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
}
    2600:	4770      	bx	lr
    2602:	46c0      	nop			; (mov r8, r8)
    2604:	46c0      	nop			; (mov r8, r8)
    2606:	46c0      	nop			; (mov r8, r8)
    2608:	46c0      	nop			; (mov r8, r8)
    260a:	46c0      	nop			; (mov r8, r8)
    260c:	46c0      	nop			; (mov r8, r8)
    260e:	46c0      	nop			; (mov r8, r8)

00002610 <kl2x_clock_init>:
 * @special
 */
void kl2x_clock_init(void) {
#if !KINETIS_NO_INIT
  /* Disable COP watchdog */
  SIM->COPC = 0;
    2610:	2288      	movs	r2, #136	; 0x88
    2612:	2100      	movs	r1, #0
 * @note    All the involved constants come from the file @p board.h.
 * @note    This function should be invoked just after the system reset.
 *
 * @special
 */
void kl2x_clock_init(void) {
    2614:	b510      	push	{r4, lr}
#if !KINETIS_NO_INIT
  /* Disable COP watchdog */
  SIM->COPC = 0;

  /* Enable PORTA */
  SIM->SCGC5 |= SIM_SCGC5_PORTA;
    2616:	2480      	movs	r4, #128	; 0x80
 * @special
 */
void kl2x_clock_init(void) {
#if !KINETIS_NO_INIT
  /* Disable COP watchdog */
  SIM->COPC = 0;
    2618:	4b14      	ldr	r3, [pc, #80]	; (266c <kl2x_clock_init+0x5c>)

  /* Enable PORTA */
  SIM->SCGC5 |= SIM_SCGC5_PORTA;
    261a:	4815      	ldr	r0, [pc, #84]	; (2670 <kl2x_clock_init+0x60>)
 * @special
 */
void kl2x_clock_init(void) {
#if !KINETIS_NO_INIT
  /* Disable COP watchdog */
  SIM->COPC = 0;
    261c:	0152      	lsls	r2, r2, #5
    261e:	5099      	str	r1, [r3, r2]

  /* Enable PORTA */
  SIM->SCGC5 |= SIM_SCGC5_PORTA;
    2620:	581a      	ldr	r2, [r3, r0]
    2622:	00a4      	lsls	r4, r4, #2
    2624:	4322      	orrs	r2, r4
    2626:	501a      	str	r2, [r3, r0]
   * Then the core/system and bus/flash clocks are divided:
   *   f_SYS = f_MCGOUTCLK / OUTDIV1 = 48 MHz / 1 = 48 MHz
   *   f_BUS = f_MCGOUTCLK / OUTDIV1 / OUTDIV4 =  MHz / 4 = 24 MHz
   */

  SIM->SOPT2 =
    2628:	2080      	movs	r0, #128	; 0x80
    262a:	4a12      	ldr	r2, [pc, #72]	; (2674 <kl2x_clock_init+0x64>)
    262c:	0440      	lsls	r0, r0, #17
    262e:	5098      	str	r0, [r3, r2]
          /* PLLFLLSEL=0 -> MCGFLLCLK */

  /* The MCGOUTCLK is divided by OUTDIV1 and OUTDIV4:
   * OUTDIV1 (divider for core/system and bus/flash clock)
   * OUTDIV4 (additional divider for bus/flash clock) */
  SIM->CLKDIV1 =
    2630:	2080      	movs	r0, #128	; 0x80
    2632:	4a11      	ldr	r2, [pc, #68]	; (2678 <kl2x_clock_init+0x68>)
    2634:	0240      	lsls	r0, r0, #9
    2636:	5098      	str	r0, [r3, r2]

  /* EXTAL0 and XTAL0 */
  //  PORTA->PCR[18] &= ~0x01000700; /* Set PA18 to analog (default) */  // defaults should already be good
  //  PORTA->PCR[19] &= ~0x01000700; /* Set PA19 to analog (default) */

  OSC0->CR = 0;
    2638:	4b10      	ldr	r3, [pc, #64]	; (267c <kl2x_clock_init+0x6c>)
  /* From KL25P80M48SF0RM section 24.5.1.1 "Initializing the MCG". */
  /* To change from FEI mode to FEE mode: */
  /* (1) Select the external clock source in C2 register.
         Use low-power OSC mode (HGO0=0) which enables internal feedback
         resistor, for 32.768 kHz crystal configuration.  */
  MCG->C2 =
    263a:	4a11      	ldr	r2, [pc, #68]	; (2680 <kl2x_clock_init+0x70>)

  /* EXTAL0 and XTAL0 */
  //  PORTA->PCR[18] &= ~0x01000700; /* Set PA18 to analog (default) */  // defaults should already be good
  //  PORTA->PCR[19] &= ~0x01000700; /* Set PA19 to analog (default) */

  OSC0->CR = 0;
    263c:	7019      	strb	r1, [r3, #0]
  /* From KL25P80M48SF0RM section 24.5.1.1 "Initializing the MCG". */
  /* To change from FEI mode to FEE mode: */
  /* (1) Select the external clock source in C2 register.
         Use low-power OSC mode (HGO0=0) which enables internal feedback
         resistor, for 32.768 kHz crystal configuration.  */
  MCG->C2 =
    263e:	2304      	movs	r3, #4
    2640:	7053      	strb	r3, [r2, #1]
          MCG_C2_RANGE0(0) |  /* low frequency range (<= 40 kHz) */
          MCG_C2_EREFS0;      /* external reference (using a crystal) */
  /* (2) Write to C1 to select the clock mode. */
  MCG->C1 = /* Clear the IREFS bit to switch to the external reference. */
    2642:	7011      	strb	r1, [r2, #0]
          MCG_C1_CLKS_FLLPLL |  /* Use FLL for system clock, MCGCLKOUT. */
          MCG_C1_FRDIV(0);      /* Don't divide 32kHz ERCLK FLL reference. */
  MCG->C6 = 0;  /* PLLS=0: Select FLL as MCG source, not PLL */
    2644:	7151      	strb	r1, [r2, #5]

  /* Loop until S[OSCINIT0] is 1, indicating the
     crystal selected by C2[EREFS0] has been initialized. */
  while ((MCG->S & MCG_S_OSCINIT0) == 0)
    2646:	2102      	movs	r1, #2
    2648:	7993      	ldrb	r3, [r2, #6]
    264a:	4219      	tst	r1, r3
    264c:	d0fc      	beq.n	2648 <kl2x_clock_init+0x38>
    ;
  /* Loop until S[IREFST] is 0, indicating the
     external reference is the current reference clock source. */
  while ((MCG->S & MCG_S_IREFST) != 0)
    264e:	2210      	movs	r2, #16
    2650:	490b      	ldr	r1, [pc, #44]	; (2680 <kl2x_clock_init+0x70>)
    2652:	798b      	ldrb	r3, [r1, #6]
    2654:	421a      	tst	r2, r3
    2656:	d1fc      	bne.n	2652 <kl2x_clock_init+0x42>
    ;  /* Wait until external reference clock is FLL reference. */
  /* (1)(e) Loop until S[CLKST] indicates FLL feeds MCGOUTCLK. */
  while ((MCG->S & MCG_S_CLKST_MASK) != MCG_S_CLKST_FLL)
    2658:	220c      	movs	r2, #12
    265a:	4909      	ldr	r1, [pc, #36]	; (2680 <kl2x_clock_init+0x70>)
    265c:	798b      	ldrb	r3, [r1, #6]
    265e:	421a      	tst	r2, r3
    2660:	d1fc      	bne.n	265c <kl2x_clock_init+0x4c>
    ;  /* Wait until FLL has been selected. */

  /* --- MCG mode: FEE --- */
  /* Set frequency range for DCO output (MCGFLLCLK). */
  MCG->C4 = (KINETIS_MCG_FLL_DMX32 ? MCG_C4_DMX32 : 0) |
    2662:	22a0      	movs	r2, #160	; 0xa0
    2664:	4b06      	ldr	r3, [pc, #24]	; (2680 <kl2x_clock_init+0x70>)
    2666:	70da      	strb	r2, [r3, #3]
#else /* KINETIS_MCG_MODE != KINETIS_MCG_MODE_PEE */
#error Unimplemented KINETIS_MCG_MODE
#endif /* KINETIS_MCG_MODE != KINETIS_MCG_MODE_PEE */

#endif /* !KINETIS_NO_INIT */
}
    2668:	bd10      	pop	{r4, pc}
    266a:	46c0      	nop			; (mov r8, r8)
    266c:	40047000 	.word	0x40047000
    2670:	00001038 	.word	0x00001038
    2674:	00001004 	.word	0x00001004
    2678:	00001044 	.word	0x00001044
    267c:	40065000 	.word	0x40065000
    2680:	40064000 	.word	0x40064000
    2684:	46c0      	nop			; (mov r8, r8)
    2686:	46c0      	nop			; (mov r8, r8)
    2688:	46c0      	nop			; (mov r8, r8)
    268a:	46c0      	nop			; (mov r8, r8)
    268c:	46c0      	nop			; (mov r8, r8)
    268e:	46c0      	nop			; (mov r8, r8)

00002690 <_pal_lld_init>:
 *
 * @param[in] config    the STM32 ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
    2690:	b5f0      	push	{r4, r5, r6, r7, lr}
    2692:	4656      	mov	r6, sl
    2694:	4644      	mov	r4, r8
    2696:	465f      	mov	r7, fp
    2698:	464d      	mov	r5, r9
    269a:	b4f0      	push	{r4, r5, r6, r7}

  int i, j;

  /* Enable clocking of all Ports */
  SIM->SCGC5 |= SIM_SCGC5_PORTA |
    269c:	24f8      	movs	r4, #248	; 0xf8
    269e:	4943      	ldr	r1, [pc, #268]	; (27ac <_pal_lld_init+0x11c>)
    26a0:	4a43      	ldr	r2, [pc, #268]	; (27b0 <_pal_lld_init+0x120>)
    26a2:	01a4      	lsls	r4, r4, #6
    26a4:	588b      	ldr	r3, [r1, r2]

  switch (mode) {
  case PAL_MODE_RESET:
  case PAL_MODE_INPUT:
  case PAL_MODE_OUTPUT_PUSHPULL:
    portcfg->PCR[pad] = PORTx_PCRn_MUX(1);
    26a6:	2680      	movs	r6, #128	; 0x80
void _pal_lld_init(const PALConfig *config) {

  int i, j;

  /* Enable clocking of all Ports */
  SIM->SCGC5 |= SIM_SCGC5_PORTA |
    26a8:	4323      	orrs	r3, r4
    26aa:	508b      	str	r3, [r1, r2]
    26ac:	2348      	movs	r3, #72	; 0x48
    26ae:	469c      	mov	ip, r3
                SIM_SCGC5_PORTD |
                SIM_SCGC5_PORTE;

  for (i = 0; i < TOTAL_PORTS; i++) {
    for (j = 0; j < PADS_PER_PORT; j++) {
      pal_lld_setpadmode(config->ports[i].port,
    26b0:	2300      	movs	r3, #0
    26b2:	469a      	mov	sl, r3
    break;
  case PAL_MODE_ALTERNATIVE_6:
    portcfg->PCR[pad] = PORTx_PCRn_MUX(6);
    break;
  case PAL_MODE_ALTERNATIVE_7:
    portcfg->PCR[pad] = PORTx_PCRn_MUX(7);
    26b4:	23e0      	movs	r3, #224	; 0xe0
    26b6:	00db      	lsls	r3, r3, #3
    26b8:	4699      	mov	r9, r3
    break;
  case PAL_MODE_ALTERNATIVE_5:
    portcfg->PCR[pad] = PORTx_PCRn_MUX(5);
    break;
  case PAL_MODE_ALTERNATIVE_6:
    portcfg->PCR[pad] = PORTx_PCRn_MUX(6);
    26ba:	23c0      	movs	r3, #192	; 0xc0
    26bc:	00db      	lsls	r3, r3, #3
    26be:	4698      	mov	r8, r3
    break;
  case PAL_MODE_ALTERNATIVE_4:
    portcfg->PCR[pad] = PORTx_PCRn_MUX(4);
    break;
  case PAL_MODE_ALTERNATIVE_5:
    portcfg->PCR[pad] = PORTx_PCRn_MUX(5);
    26c0:	23a0      	movs	r3, #160	; 0xa0
    26c2:	4484      	add	ip, r0
    26c4:	00db      	lsls	r3, r3, #3
    26c6:	46e3      	mov	fp, ip
    26c8:	469c      	mov	ip, r3
  else if (port == IOPORT5)
    portcfg = PORTE;

  osalDbgAssert(portcfg != NULL, "pal_lld_setpadmode() - invalid port");

  switch (mode) {
    26ca:	4c3a      	ldr	r4, [pc, #232]	; (27b4 <_pal_lld_init+0x124>)
  case PAL_MODE_RESET:
  case PAL_MODE_INPUT:
  case PAL_MODE_OUTPUT_PUSHPULL:
    portcfg->PCR[pad] = PORTx_PCRn_MUX(1);
    26cc:	0076      	lsls	r6, r6, #1
                SIM_SCGC5_PORTD |
                SIM_SCGC5_PORTE;

  for (i = 0; i < TOTAL_PORTS; i++) {
    for (j = 0; j < PADS_PER_PORT; j++) {
      pal_lld_setpadmode(config->ports[i].port,
    26ce:	2200      	movs	r2, #0
    26d0:	6803      	ldr	r3, [r0, #0]
    26d2:	1881      	adds	r1, r0, r2
    26d4:	7909      	ldrb	r1, [r1, #4]
{
  PORT_TypeDef *portcfg = NULL;

  osalDbgAssert(pad <= 31, "pal_lld_setpadmode() - invalid pad");

  if (mode == PAL_MODE_OUTPUT_PUSHPULL)
    26d6:	2906      	cmp	r1, #6
    26d8:	d051      	beq.n	277e <_pal_lld_init+0xee>
    port->PDDR |=  ((uint32_t) 1 << pad);
  else
    port->PDDR &= ~((uint32_t) 1 << pad);
    26da:	2701      	movs	r7, #1
    26dc:	4097      	lsls	r7, r2
    26de:	695d      	ldr	r5, [r3, #20]
    26e0:	43bd      	bics	r5, r7
    26e2:	615d      	str	r5, [r3, #20]

  if (port == IOPORT1)
    26e4:	4d34      	ldr	r5, [pc, #208]	; (27b8 <_pal_lld_init+0x128>)
    26e6:	42ab      	cmp	r3, r5
    26e8:	d05a      	beq.n	27a0 <_pal_lld_init+0x110>
    portcfg = PORTA;
  else if (port == IOPORT2)
    26ea:	4d34      	ldr	r5, [pc, #208]	; (27bc <_pal_lld_init+0x12c>)
    26ec:	42ab      	cmp	r3, r5
    26ee:	d053      	beq.n	2798 <_pal_lld_init+0x108>
    portcfg = PORTB;
  else if (port == IOPORT3)
    26f0:	4d33      	ldr	r5, [pc, #204]	; (27c0 <_pal_lld_init+0x130>)
    26f2:	42ab      	cmp	r3, r5
    26f4:	d052      	beq.n	279c <_pal_lld_init+0x10c>
    portcfg = PORTC;
  else if (port == IOPORT4)
    26f6:	4d33      	ldr	r5, [pc, #204]	; (27c4 <_pal_lld_init+0x134>)
    26f8:	42ab      	cmp	r3, r5
    26fa:	d053      	beq.n	27a4 <_pal_lld_init+0x114>
    portcfg = PORTD;
  else if (port == IOPORT5)
    26fc:	4f32      	ldr	r7, [pc, #200]	; (27c8 <_pal_lld_init+0x138>)
 *
 * @notapi
 */
void _pal_lld_setpadmode(ioportid_t port, uint8_t pad, iomode_t mode)
{
  PORT_TypeDef *portcfg = NULL;
    26fe:	2500      	movs	r5, #0
    portcfg = PORTB;
  else if (port == IOPORT3)
    portcfg = PORTC;
  else if (port == IOPORT4)
    portcfg = PORTD;
  else if (port == IOPORT5)
    2700:	42bb      	cmp	r3, r7
    2702:	d051      	beq.n	27a8 <_pal_lld_init+0x118>
    portcfg = PORTE;

  osalDbgAssert(portcfg != NULL, "pal_lld_setpadmode() - invalid port");

  switch (mode) {
    2704:	2916      	cmp	r1, #22
    2706:	d805      	bhi.n	2714 <_pal_lld_init+0x84>
    2708:	0089      	lsls	r1, r1, #2
    270a:	5861      	ldr	r1, [r4, r1]
    270c:	468f      	mov	pc, r1
    port->PDDR |=  ((uint32_t) 1 << pad);
  else
    port->PDDR &= ~((uint32_t) 1 << pad);

  if (port == IOPORT1)
    portcfg = PORTA;
    270e:	4d2f      	ldr	r5, [pc, #188]	; (27cc <_pal_lld_init+0x13c>)
  case PAL_MODE_UNCONNECTED:
  case PAL_MODE_INPUT_ANALOG:
    portcfg->PCR[pad] = PORTx_PCRn_MUX(0);
    break;
  case PAL_MODE_ALTERNATIVE_1:
    portcfg->PCR[pad] = PORTx_PCRn_MUX(1);
    2710:	0091      	lsls	r1, r2, #2
    2712:	514e      	str	r6, [r1, r5]
                SIM_SCGC5_PORTC |
                SIM_SCGC5_PORTD |
                SIM_SCGC5_PORTE;

  for (i = 0; i < TOTAL_PORTS; i++) {
    for (j = 0; j < PADS_PER_PORT; j++) {
    2714:	3201      	adds	r2, #1
    2716:	2a20      	cmp	r2, #32
    2718:	d1db      	bne.n	26d2 <_pal_lld_init+0x42>
    271a:	3024      	adds	r0, #36	; 0x24
                SIM_SCGC5_PORTB |
                SIM_SCGC5_PORTC |
                SIM_SCGC5_PORTD |
                SIM_SCGC5_PORTE;

  for (i = 0; i < TOTAL_PORTS; i++) {
    271c:	4558      	cmp	r0, fp
    271e:	d1d6      	bne.n	26ce <_pal_lld_init+0x3e>
      pal_lld_setpadmode(config->ports[i].port,
                         j,
                         config->ports[i].pads[j]);
    }
  }
}
    2720:	bc3c      	pop	{r2, r3, r4, r5}
    2722:	4690      	mov	r8, r2
    2724:	4699      	mov	r9, r3
    2726:	46a2      	mov	sl, r4
    2728:	46ab      	mov	fp, r5
    272a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    break;
  case PAL_MODE_INPUT_PULLUP:
    portcfg->PCR[pad] = PORTx_PCRn_MUX(1) | PORTx_PCRn_PE | PORTx_PCRn_PS;
    break;
  case PAL_MODE_INPUT_PULLDOWN:
    portcfg->PCR[pad] = PORTx_PCRn_MUX(1) | PORTx_PCRn_PE;
    272c:	2781      	movs	r7, #129	; 0x81
    272e:	0091      	lsls	r1, r2, #2
    2730:	007f      	lsls	r7, r7, #1
    2732:	514f      	str	r7, [r1, r5]
    2734:	e7ee      	b.n	2714 <_pal_lld_init+0x84>
    break;
  case PAL_MODE_UNCONNECTED:
  case PAL_MODE_INPUT_ANALOG:
    portcfg->PCR[pad] = PORTx_PCRn_MUX(0);
    2736:	4657      	mov	r7, sl
    2738:	0091      	lsls	r1, r2, #2
    273a:	514f      	str	r7, [r1, r5]
    273c:	e7ea      	b.n	2714 <_pal_lld_init+0x84>
    break;
  case PAL_MODE_ALTERNATIVE_6:
    portcfg->PCR[pad] = PORTx_PCRn_MUX(6);
    break;
  case PAL_MODE_ALTERNATIVE_7:
    portcfg->PCR[pad] = PORTx_PCRn_MUX(7);
    273e:	464f      	mov	r7, r9
    2740:	0091      	lsls	r1, r2, #2
    2742:	514f      	str	r7, [r1, r5]
    2744:	e7e6      	b.n	2714 <_pal_lld_init+0x84>
  case PAL_MODE_INPUT:
  case PAL_MODE_OUTPUT_PUSHPULL:
    portcfg->PCR[pad] = PORTx_PCRn_MUX(1);
    break;
  case PAL_MODE_INPUT_PULLUP:
    portcfg->PCR[pad] = PORTx_PCRn_MUX(1) | PORTx_PCRn_PE | PORTx_PCRn_PS;
    2746:	2704      	movs	r7, #4
    2748:	0091      	lsls	r1, r2, #2
    274a:	37ff      	adds	r7, #255	; 0xff
    274c:	514f      	str	r7, [r1, r5]
    274e:	e7e1      	b.n	2714 <_pal_lld_init+0x84>
    break;
  case PAL_MODE_ALTERNATIVE_5:
    portcfg->PCR[pad] = PORTx_PCRn_MUX(5);
    break;
  case PAL_MODE_ALTERNATIVE_6:
    portcfg->PCR[pad] = PORTx_PCRn_MUX(6);
    2750:	4647      	mov	r7, r8
    2752:	0091      	lsls	r1, r2, #2
    2754:	514f      	str	r7, [r1, r5]
    2756:	e7dd      	b.n	2714 <_pal_lld_init+0x84>
    break;
  case PAL_MODE_ALTERNATIVE_4:
    portcfg->PCR[pad] = PORTx_PCRn_MUX(4);
    break;
  case PAL_MODE_ALTERNATIVE_5:
    portcfg->PCR[pad] = PORTx_PCRn_MUX(5);
    2758:	4667      	mov	r7, ip
    275a:	0091      	lsls	r1, r2, #2
    275c:	514f      	str	r7, [r1, r5]
    275e:	e7d9      	b.n	2714 <_pal_lld_init+0x84>
    break;
  case PAL_MODE_ALTERNATIVE_3:
    portcfg->PCR[pad] = PORTx_PCRn_MUX(3);
    break;
  case PAL_MODE_ALTERNATIVE_4:
    portcfg->PCR[pad] = PORTx_PCRn_MUX(4);
    2760:	2780      	movs	r7, #128	; 0x80
    2762:	0091      	lsls	r1, r2, #2
    2764:	00ff      	lsls	r7, r7, #3
    2766:	514f      	str	r7, [r1, r5]
    2768:	e7d4      	b.n	2714 <_pal_lld_init+0x84>
    break;
  case PAL_MODE_ALTERNATIVE_2:
    portcfg->PCR[pad] = PORTx_PCRn_MUX(2);
    break;
  case PAL_MODE_ALTERNATIVE_3:
    portcfg->PCR[pad] = PORTx_PCRn_MUX(3);
    276a:	27c0      	movs	r7, #192	; 0xc0
    276c:	0091      	lsls	r1, r2, #2
    276e:	00bf      	lsls	r7, r7, #2
    2770:	514f      	str	r7, [r1, r5]
    2772:	e7cf      	b.n	2714 <_pal_lld_init+0x84>
    break;
  case PAL_MODE_ALTERNATIVE_1:
    portcfg->PCR[pad] = PORTx_PCRn_MUX(1);
    break;
  case PAL_MODE_ALTERNATIVE_2:
    portcfg->PCR[pad] = PORTx_PCRn_MUX(2);
    2774:	2780      	movs	r7, #128	; 0x80
    2776:	0091      	lsls	r1, r2, #2
    2778:	00bf      	lsls	r7, r7, #2
    277a:	514f      	str	r7, [r1, r5]
    277c:	e7ca      	b.n	2714 <_pal_lld_init+0x84>
  PORT_TypeDef *portcfg = NULL;

  osalDbgAssert(pad <= 31, "pal_lld_setpadmode() - invalid pad");

  if (mode == PAL_MODE_OUTPUT_PUSHPULL)
    port->PDDR |=  ((uint32_t) 1 << pad);
    277e:	2501      	movs	r5, #1
    2780:	4095      	lsls	r5, r2
    2782:	695f      	ldr	r7, [r3, #20]
    2784:	433d      	orrs	r5, r7
    2786:	615d      	str	r5, [r3, #20]
  else
    port->PDDR &= ~((uint32_t) 1 << pad);

  if (port == IOPORT1)
    2788:	4d0b      	ldr	r5, [pc, #44]	; (27b8 <_pal_lld_init+0x128>)
    278a:	42ab      	cmp	r3, r5
    278c:	d0bf      	beq.n	270e <_pal_lld_init+0x7e>
    portcfg = PORTA;
  else if (port == IOPORT2)
    278e:	4d0b      	ldr	r5, [pc, #44]	; (27bc <_pal_lld_init+0x12c>)
    2790:	42ab      	cmp	r3, r5
    2792:	d1ad      	bne.n	26f0 <_pal_lld_init+0x60>
    portcfg = PORTB;
    2794:	4d0e      	ldr	r5, [pc, #56]	; (27d0 <_pal_lld_init+0x140>)
    2796:	e7bb      	b.n	2710 <_pal_lld_init+0x80>
    2798:	4d0d      	ldr	r5, [pc, #52]	; (27d0 <_pal_lld_init+0x140>)
    279a:	e7b3      	b.n	2704 <_pal_lld_init+0x74>
  else if (port == IOPORT3)
    portcfg = PORTC;
    279c:	4d0d      	ldr	r5, [pc, #52]	; (27d4 <_pal_lld_init+0x144>)
    279e:	e7b1      	b.n	2704 <_pal_lld_init+0x74>
    port->PDDR |=  ((uint32_t) 1 << pad);
  else
    port->PDDR &= ~((uint32_t) 1 << pad);

  if (port == IOPORT1)
    portcfg = PORTA;
    27a0:	4d0a      	ldr	r5, [pc, #40]	; (27cc <_pal_lld_init+0x13c>)
    27a2:	e7af      	b.n	2704 <_pal_lld_init+0x74>
  else if (port == IOPORT2)
    portcfg = PORTB;
  else if (port == IOPORT3)
    portcfg = PORTC;
  else if (port == IOPORT4)
    portcfg = PORTD;
    27a4:	4d0c      	ldr	r5, [pc, #48]	; (27d8 <_pal_lld_init+0x148>)
    27a6:	e7ad      	b.n	2704 <_pal_lld_init+0x74>
  else if (port == IOPORT5)
    portcfg = PORTE;
    27a8:	4d0c      	ldr	r5, [pc, #48]	; (27dc <_pal_lld_init+0x14c>)
    27aa:	e7ab      	b.n	2704 <_pal_lld_init+0x74>
    27ac:	40047000 	.word	0x40047000
    27b0:	00001038 	.word	0x00001038
    27b4:	00003cd0 	.word	0x00003cd0
    27b8:	400ff000 	.word	0x400ff000
    27bc:	400ff040 	.word	0x400ff040
    27c0:	400ff080 	.word	0x400ff080
    27c4:	400ff0c0 	.word	0x400ff0c0
    27c8:	400ff100 	.word	0x400ff100
    27cc:	40049000 	.word	0x40049000
    27d0:	4004a000 	.word	0x4004a000
    27d4:	4004b000 	.word	0x4004b000
    27d8:	4004c000 	.word	0x4004c000
    27dc:	4004d000 	.word	0x4004d000

000027e0 <notify1>:
/**
 * @brief   Driver output notification.
 */
#if KINETIS_SERIAL_USE_UART0 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp)
{
    27e0:	b538      	push	{r3, r4, r5, lr}

/**
 * @brief   Attempts a TX preload
 */
static void preload(SerialDriver *sdp) {
  UARTLP_TypeDef *u = sdp->uart;
    27e2:	4c0f      	ldr	r4, [pc, #60]	; (2820 <__storage_size__+0x20>)
    27e4:	6f65      	ldr	r5, [r4, #116]	; 0x74

  if (u->S1 & UARTx_S1_TDRE) {
    27e6:	792b      	ldrb	r3, [r5, #4]
    27e8:	b25b      	sxtb	r3, r3
    27ea:	2b00      	cmp	r3, #0
    27ec:	db00      	blt.n	27f0 <notify1+0x10>
#if KINETIS_SERIAL_USE_UART0 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp)
{
  (void)qp;
  preload(&SD1);
}
    27ee:	bd38      	pop	{r3, r4, r5, pc}
 */
static void preload(SerialDriver *sdp) {
  UARTLP_TypeDef *u = sdp->uart;

  if (u->S1 & UARTx_S1_TDRE) {
    msg_t b = oqGetI(&sdp->oqueue);
    27f0:	1c20      	adds	r0, r4, #0
    27f2:	3034      	adds	r0, #52	; 0x34
    27f4:	f7ff fd64 	bl	22c0 <oqGetI>
    if (b < Q_OK) {
    27f8:	2800      	cmp	r0, #0
    27fa:	db06      	blt.n	280a <__storage_size__+0xa>
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      return;
    }
    u->D = b;
    u->C2 |= UARTx_C2_TIE;
    27fc:	2380      	movs	r3, #128	; 0x80
    msg_t b = oqGetI(&sdp->oqueue);
    if (b < Q_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      return;
    }
    u->D = b;
    27fe:	b2c0      	uxtb	r0, r0
    2800:	71e8      	strb	r0, [r5, #7]
    u->C2 |= UARTx_C2_TIE;
    2802:	78ea      	ldrb	r2, [r5, #3]
    2804:	4313      	orrs	r3, r2
    2806:	70eb      	strb	r3, [r5, #3]
    2808:	e7f1      	b.n	27ee <notify1+0xe>
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  osalDbgCheck(esp != NULL);

  esp->flags |= flags;
    280a:	2308      	movs	r3, #8
    280c:	6862      	ldr	r2, [r4, #4]
    280e:	4313      	orrs	r3, r2
    2810:	6063      	str	r3, [r4, #4]
  if (esp->cb != NULL) {
    2812:	68a3      	ldr	r3, [r4, #8]
    2814:	2b00      	cmp	r3, #0
    2816:	d0ea      	beq.n	27ee <notify1+0xe>
    esp->cb(esp);
    2818:	1d20      	adds	r0, r4, #4
    281a:	4798      	blx	r3
    281c:	e7e7      	b.n	27ee <notify1+0xe>
    281e:	46c0      	nop			; (mov r8, r8)
    2820:	20000a2c 	.word	0x20000a2c
    2824:	46c0      	nop			; (mov r8, r8)
    2826:	46c0      	nop			; (mov r8, r8)
    2828:	46c0      	nop			; (mov r8, r8)
    282a:	46c0      	nop			; (mov r8, r8)
    282c:	46c0      	nop			; (mov r8, r8)
    282e:	46c0      	nop			; (mov r8, r8)

00002830 <Vector70>:
/*===========================================================================*/
/* Driver interrupt handlers.                                                */
/*===========================================================================*/

#if KINETIS_SERIAL_USE_UART0 || defined(__DOXYGEN__)
OSAL_IRQ_HANDLER(Vector70) {
    2830:	b570      	push	{r4, r5, r6, lr}
 *
 * @param[in] u         pointer to an UART I/O block
 * @param[in] sdp       communication channel associated to the UART
 */
static void serve_interrupt(SerialDriver *sdp) {
  UARTLP_TypeDef *u = sdp->uart;
    2832:	4d29      	ldr	r5, [pc, #164]	; (28d8 <Vector70+0xa8>)
/*===========================================================================*/

#if KINETIS_SERIAL_USE_UART0 || defined(__DOXYGEN__)
OSAL_IRQ_HANDLER(Vector70) {

  OSAL_IRQ_PROLOGUE();
    2834:	4676      	mov	r6, lr
 *
 * @param[in] u         pointer to an UART I/O block
 * @param[in] sdp       communication channel associated to the UART
 */
static void serve_interrupt(SerialDriver *sdp) {
  UARTLP_TypeDef *u = sdp->uart;
    2836:	6f6c      	ldr	r4, [r5, #116]	; 0x74

  if (u->S1 & UARTx_S1_RDRF) {
    2838:	7923      	ldrb	r3, [r4, #4]
    283a:	069b      	lsls	r3, r3, #26
    283c:	d515      	bpl.n	286a <Vector70+0x3a>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    283e:	b672      	cpsid	i
    osalSysLockFromISR();
    if (iqIsEmptyI(&sdp->iqueue))
    2840:	69ab      	ldr	r3, [r5, #24]
    2842:	2b00      	cmp	r3, #0
    2844:	d108      	bne.n	2858 <Vector70+0x28>
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  osalDbgCheck(esp != NULL);

  esp->flags |= flags;
    2846:	2304      	movs	r3, #4
    2848:	686a      	ldr	r2, [r5, #4]
    284a:	4313      	orrs	r3, r2
    284c:	606b      	str	r3, [r5, #4]
  if (esp->cb != NULL) {
    284e:	68ab      	ldr	r3, [r5, #8]
    2850:	2b00      	cmp	r3, #0
    2852:	d001      	beq.n	2858 <Vector70+0x28>
    esp->cb(esp);
    2854:	1d28      	adds	r0, r5, #4
    2856:	4798      	blx	r3
      chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
    if (iqPutI(&sdp->iqueue, u->D) < Q_OK)
    2858:	1c28      	adds	r0, r5, #0
    285a:	79e1      	ldrb	r1, [r4, #7]
    285c:	3014      	adds	r0, #20
    285e:	b2c9      	uxtb	r1, r1
    2860:	f7ff fc7e 	bl	2160 <iqPutI>
    2864:	2800      	cmp	r0, #0
    2866:	db12      	blt.n	288e <Vector70+0x5e>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2868:	b662      	cpsie	i
      chnAddFlagsI(sdp, SD_OVERRUN_ERROR);
    osalSysUnlockFromISR();
  }

  if (u->S1 & UARTx_S1_TDRE) {
    286a:	7923      	ldrb	r3, [r4, #4]
    286c:	b25b      	sxtb	r3, r3
    286e:	2b00      	cmp	r3, #0
    2870:	db17      	blt.n	28a2 <Vector70+0x72>
    } else {
       u->D = b;
    }
  }

  if (u->S1 & UARTx_S1_IDLE)
    2872:	2310      	movs	r3, #16
    2874:	7922      	ldrb	r2, [r4, #4]
    2876:	4213      	tst	r3, r2
    2878:	d000      	beq.n	287c <Vector70+0x4c>
    u->S1 = UARTx_S1_IDLE;  // Clear IDLE (S1 bits are write-1-to-clear).
    287a:	7123      	strb	r3, [r4, #4]

  if (u->S1 & (UARTx_S1_OR | UARTx_S1_NF | UARTx_S1_FE | UARTx_S1_PF)) {
    287c:	230f      	movs	r3, #15
    287e:	7922      	ldrb	r2, [r4, #4]
    2880:	4213      	tst	r3, r2
    2882:	d000      	beq.n	2886 <Vector70+0x56>
    // FIXME: need to add set_error()
    // Clear flags (S1 bits are write-1-to-clear).
    u->S1 = UARTx_S1_OR | UARTx_S1_NF | UARTx_S1_FE | UARTx_S1_PF;
    2884:	7123      	strb	r3, [r4, #4]
#if KINETIS_SERIAL_USE_UART0 || defined(__DOXYGEN__)
OSAL_IRQ_HANDLER(Vector70) {

  OSAL_IRQ_PROLOGUE();
  serve_interrupt(&SD1);
  OSAL_IRQ_EPILOGUE();
    2886:	1c30      	adds	r0, r6, #0
    2888:	f7ff fb22 	bl	1ed0 <_port_irq_epilogue>
}
    288c:	bd70      	pop	{r4, r5, r6, pc}
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  osalDbgCheck(esp != NULL);

  esp->flags |= flags;
    288e:	2380      	movs	r3, #128	; 0x80
    2890:	686a      	ldr	r2, [r5, #4]
    2892:	4313      	orrs	r3, r2
    2894:	606b      	str	r3, [r5, #4]
  if (esp->cb != NULL) {
    2896:	68ab      	ldr	r3, [r5, #8]
    2898:	2b00      	cmp	r3, #0
    289a:	d0e5      	beq.n	2868 <Vector70+0x38>
    esp->cb(esp);
    289c:	1d28      	adds	r0, r5, #4
    289e:	4798      	blx	r3
    28a0:	e7e2      	b.n	2868 <Vector70+0x38>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    28a2:	b672      	cpsid	i

  if (u->S1 & UARTx_S1_TDRE) {
    msg_t b;

    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
    28a4:	1c28      	adds	r0, r5, #0
    28a6:	3034      	adds	r0, #52	; 0x34
    28a8:	f7ff fd0a 	bl	22c0 <oqGetI>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    28ac:	b662      	cpsie	i
    osalSysUnlockFromISR();

    if (b < Q_OK) {
    28ae:	2800      	cmp	r0, #0
    28b0:	db02      	blt.n	28b8 <Vector70+0x88>
      osalSysLockFromISR();
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      osalSysUnlockFromISR();
      u->C2 &= ~UARTx_C2_TIE;
    } else {
       u->D = b;
    28b2:	b2c0      	uxtb	r0, r0
    28b4:	71e0      	strb	r0, [r4, #7]
    28b6:	e7dc      	b.n	2872 <Vector70+0x42>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    28b8:	b672      	cpsid	i
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  osalDbgCheck(esp != NULL);

  esp->flags |= flags;
    28ba:	2308      	movs	r3, #8
    28bc:	686a      	ldr	r2, [r5, #4]
    28be:	4313      	orrs	r3, r2
    28c0:	606b      	str	r3, [r5, #4]
  if (esp->cb != NULL) {
    28c2:	68ab      	ldr	r3, [r5, #8]
    28c4:	2b00      	cmp	r3, #0
    28c6:	d001      	beq.n	28cc <Vector70+0x9c>
    esp->cb(esp);
    28c8:	1d28      	adds	r0, r5, #4
    28ca:	4798      	blx	r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    28cc:	b662      	cpsie	i

    if (b < Q_OK) {
      osalSysLockFromISR();
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      osalSysUnlockFromISR();
      u->C2 &= ~UARTx_C2_TIE;
    28ce:	227f      	movs	r2, #127	; 0x7f
    28d0:	78e3      	ldrb	r3, [r4, #3]
    28d2:	4013      	ands	r3, r2
    28d4:	70e3      	strb	r3, [r4, #3]
    28d6:	e7cc      	b.n	2872 <Vector70+0x42>
    28d8:	20000a2c 	.word	0x20000a2c
    28dc:	46c0      	nop			; (mov r8, r8)
    28de:	46c0      	nop			; (mov r8, r8)

000028e0 <sd_lld_init>:
/**
 * @brief   Low level serial driver initialization.
 *
 * @notapi
 */
void sd_lld_init(void) {
    28e0:	b510      	push	{r4, lr}

#if KINETIS_SERIAL_USE_UART0
  /* Driver initialization.*/
  sdObjectInit(&SD1, NULL, notify1);
    28e2:	4c04      	ldr	r4, [pc, #16]	; (28f4 <sd_lld_init+0x14>)
    28e4:	2100      	movs	r1, #0
    28e6:	1c20      	adds	r0, r4, #0
    28e8:	4a03      	ldr	r2, [pc, #12]	; (28f8 <sd_lld_init+0x18>)
    28ea:	f7ff fdf9 	bl	24e0 <sdObjectInit>
  SD1.uart = UART0;
    28ee:	4b03      	ldr	r3, [pc, #12]	; (28fc <sd_lld_init+0x1c>)
    28f0:	6763      	str	r3, [r4, #116]	; 0x74
#if KINETIS_SERIAL_USE_UART2
  /* Driver initialization.*/
  sdObjectInit(&SD3, NULL, notify3);
  SD3.uart = UART2;
#endif
}
    28f2:	bd10      	pop	{r4, pc}
    28f4:	20000a2c 	.word	0x20000a2c
    28f8:	000027e1 	.word	0x000027e1
    28fc:	4006a000 	.word	0x4006a000

00002900 <sd_lld_start>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {
    2900:	b538      	push	{r3, r4, r5, lr}

  if (config == NULL)
    2902:	2900      	cmp	r1, #0
    2904:	d037      	beq.n	2976 <sd_lld_start+0x76>
    config = &default_config;

  if (sdp->state == SD_STOP) {
    2906:	6903      	ldr	r3, [r0, #16]
    2908:	2b01      	cmp	r3, #1
    290a:	d000      	beq.n	290e <sd_lld_start+0xe>
#endif /* KINETIS_SERIAL_USE_UART2 */

  }
  /* Configures the peripheral.*/

}
    290c:	bd38      	pop	{r3, r4, r5, pc}

  if (sdp->state == SD_STOP) {
    /* Enables the peripheral.*/

#if KINETIS_SERIAL_USE_UART0
    if (sdp == &SD1) {
    290e:	4b1b      	ldr	r3, [pc, #108]	; (297c <sd_lld_start+0x7c>)
    2910:	4298      	cmp	r0, r3
    2912:	d1fb      	bne.n	290c <sd_lld_start+0xc>
      SIM->SCGC4 |= SIM_SCGC4_UART0;
    2914:	2580      	movs	r5, #128	; 0x80
    2916:	4a1a      	ldr	r2, [pc, #104]	; (2980 <sd_lld_start+0x80>)
    2918:	4c1a      	ldr	r4, [pc, #104]	; (2984 <sd_lld_start+0x84>)
    291a:	00ed      	lsls	r5, r5, #3
    291c:	5913      	ldr	r3, [r2, r4]
    291e:	432b      	orrs	r3, r5
    2920:	5113      	str	r3, [r2, r4]
      SIM->SOPT2 =
              (SIM->SOPT2 & ~SIM_SOPT2_UART0SRC_MASK) |
    2922:	4c19      	ldr	r4, [pc, #100]	; (2988 <sd_lld_start+0x88>)
    2924:	4b19      	ldr	r3, [pc, #100]	; (298c <sd_lld_start+0x8c>)
    2926:	5915      	ldr	r5, [r2, r4]
    2928:	402b      	ands	r3, r5
    292a:	2580      	movs	r5, #128	; 0x80
    292c:	04ed      	lsls	r5, r5, #19
    292e:	432b      	orrs	r3, r5
    /* Enables the peripheral.*/

#if KINETIS_SERIAL_USE_UART0
    if (sdp == &SD1) {
      SIM->SCGC4 |= SIM_SCGC4_UART0;
      SIM->SOPT2 =
    2930:	5113      	str	r3, [r2, r4]
 */
static void configure_uart(UARTLP_TypeDef *uart, const SerialConfig *config)
{
  uint32_t uart_clock;

  uart->C1 = 0;
    2932:	2300      	movs	r3, #0
    if (sdp == &SD1) {
      SIM->SCGC4 |= SIM_SCGC4_UART0;
      SIM->SOPT2 =
              (SIM->SOPT2 & ~SIM_SOPT2_UART0SRC_MASK) |
              SIM_SOPT2_UART0SRC(KINETIS_UART0_CLOCK_SRC);
      configure_uart(sdp->uart, config);
    2934:	6f44      	ldr	r4, [r0, #116]	; 0x74
 */
static void configure_uart(UARTLP_TypeDef *uart, const SerialConfig *config)
{
  uint32_t uart_clock;

  uart->C1 = 0;
    2936:	70a3      	strb	r3, [r4, #2]
  uart->C3 = UARTx_C3_ORIE | UARTx_C3_NEIE | UARTx_C3_FEIE | UARTx_C3_PEIE;
    2938:	230f      	movs	r3, #15
    293a:	71a3      	strb	r3, [r4, #6]
  uart->S1 = UARTx_S1_IDLE | UARTx_S1_OR | UARTx_S1_NF | UARTx_S1_FE | UARTx_S1_PF;
    293c:	231f      	movs	r3, #31
    293e:	7123      	strb	r3, [r4, #4]
  while (uart->S1 & UARTx_S1_RDRF) {
    2940:	7923      	ldrb	r3, [r4, #4]
    2942:	069b      	lsls	r3, r3, #26
    2944:	d504      	bpl.n	2950 <sd_lld_start+0x50>
    2946:	2220      	movs	r2, #32
    (void)uart->D;
    2948:	79e3      	ldrb	r3, [r4, #7]
  uint32_t uart_clock;

  uart->C1 = 0;
  uart->C3 = UARTx_C3_ORIE | UARTx_C3_NEIE | UARTx_C3_FEIE | UARTx_C3_PEIE;
  uart->S1 = UARTx_S1_IDLE | UARTx_S1_OR | UARTx_S1_NF | UARTx_S1_FE | UARTx_S1_PF;
  while (uart->S1 & UARTx_S1_RDRF) {
    294a:	7923      	ldrb	r3, [r4, #4]
    294c:	421a      	tst	r2, r3
    294e:	d1fb      	bne.n	2948 <sd_lld_start+0x48>
        uart_clock = KINETIS_BUSCLK_FREQUENCY;
    }
#endif

  /* FIXME: change fixed OSR = 16 to dynamic value based on baud */
  uint16_t divisor = (uart_clock / 16) / config->sc_speed;
    2950:	20b7      	movs	r0, #183	; 0xb7
    2952:	6809      	ldr	r1, [r1, #0]
    2954:	0380      	lsls	r0, r0, #14
    2956:	f7fd fe2b 	bl	5b0 <__aeabi_uidiv>
  uart->C4 = UARTx_C4_OSR & (16 - 1);
    295a:	230f      	movs	r3, #15
    295c:	72a3      	strb	r3, [r4, #10]
  uart->BDH = (divisor >> 8) & UARTx_BDH_SBR;
    295e:	04c3      	lsls	r3, r0, #19
    2960:	0edb      	lsrs	r3, r3, #27
    2962:	7023      	strb	r3, [r4, #0]
  uart->BDL = (divisor & UARTx_BDL_SBR);

  uart->C2 = UARTx_C2_RE | UARTx_C2_RIE | UARTx_C2_TE;
    2964:	232c      	movs	r3, #44	; 0x2c

  /* FIXME: change fixed OSR = 16 to dynamic value based on baud */
  uint16_t divisor = (uart_clock / 16) / config->sc_speed;
  uart->C4 = UARTx_C4_OSR & (16 - 1);
  uart->BDH = (divisor >> 8) & UARTx_BDH_SBR;
  uart->BDL = (divisor & UARTx_BDL_SBR);
    2966:	b2c0      	uxtb	r0, r0
    2968:	7060      	strb	r0, [r4, #1]
      SIM->SCGC4 |= SIM_SCGC4_UART0;
      SIM->SOPT2 =
              (SIM->SOPT2 & ~SIM_SOPT2_UART0SRC_MASK) |
              SIM_SOPT2_UART0SRC(KINETIS_UART0_CLOCK_SRC);
      configure_uart(sdp->uart, config);
      nvicEnableVector(UART0_IRQn, KINETIS_SERIAL_UART0_PRIORITY);
    296a:	2103      	movs	r1, #3
  uint16_t divisor = (uart_clock / 16) / config->sc_speed;
  uart->C4 = UARTx_C4_OSR & (16 - 1);
  uart->BDH = (divisor >> 8) & UARTx_BDH_SBR;
  uart->BDL = (divisor & UARTx_BDL_SBR);

  uart->C2 = UARTx_C2_RE | UARTx_C2_RIE | UARTx_C2_TE;
    296c:	70e3      	strb	r3, [r4, #3]
      SIM->SCGC4 |= SIM_SCGC4_UART0;
      SIM->SOPT2 =
              (SIM->SOPT2 & ~SIM_SOPT2_UART0SRC_MASK) |
              SIM_SOPT2_UART0SRC(KINETIS_UART0_CLOCK_SRC);
      configure_uart(sdp->uart, config);
      nvicEnableVector(UART0_IRQn, KINETIS_SERIAL_UART0_PRIORITY);
    296e:	200c      	movs	r0, #12
    2970:	f7ff fe06 	bl	2580 <nvicEnableVector>
    2974:	e7ca      	b.n	290c <sd_lld_start+0xc>
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;
    2976:	4906      	ldr	r1, [pc, #24]	; (2990 <sd_lld_start+0x90>)
    2978:	e7c5      	b.n	2906 <sd_lld_start+0x6>
    297a:	46c0      	nop			; (mov r8, r8)
    297c:	20000a2c 	.word	0x20000a2c
    2980:	40047000 	.word	0x40047000
    2984:	00001034 	.word	0x00001034
    2988:	00001004 	.word	0x00001004
    298c:	f3ffffff 	.word	0xf3ffffff
    2990:	00003d30 	.word	0x00003d30
    2994:	46c0      	nop			; (mov r8, r8)
    2996:	46c0      	nop			; (mov r8, r8)
    2998:	46c0      	nop			; (mov r8, r8)
    299a:	46c0      	nop			; (mov r8, r8)
    299c:	46c0      	nop			; (mov r8, r8)
    299e:	46c0      	nop			; (mov r8, r8)

000029a0 <VectorB8>:
static inline void irq_handler(PORT_TypeDef * const port, const unsigned port_width, const uint8_t *channel_map) {
  unsigned pin;
  uint32_t isfr = port->ISFR;

  /* Clear all pending interrupts on this port. */
  port->ISFR = 0xFFFFFFFF;
    29a0:	2101      	movs	r1, #1
 * @brief   PORTA interrupt handler.
 *
 * @isr
 */
#if defined(KINETIS_PORTA_IRQ_VECTOR) && KINETIS_EXT_PORTA_WIDTH > 0
OSAL_IRQ_HANDLER(KINETIS_PORTA_IRQ_VECTOR) {
    29a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    29a4:	464f      	mov	r7, r9
    29a6:	4646      	mov	r6, r8
/*
 * Generic interrupt handler.
 */
static inline void irq_handler(PORT_TypeDef * const port, const unsigned port_width, const uint8_t *channel_map) {
  unsigned pin;
  uint32_t isfr = port->ISFR;
    29a8:	23a0      	movs	r3, #160	; 0xa0
    29aa:	4a13      	ldr	r2, [pc, #76]	; (29f8 <VectorB8+0x58>)

  /* Clear all pending interrupts on this port. */
  port->ISFR = 0xFFFFFFFF;
    29ac:	4249      	negs	r1, r1
 * @brief   PORTA interrupt handler.
 *
 * @isr
 */
#if defined(KINETIS_PORTA_IRQ_VECTOR) && KINETIS_EXT_PORTA_WIDTH > 0
OSAL_IRQ_HANDLER(KINETIS_PORTA_IRQ_VECTOR) {
    29ae:	b4c0      	push	{r6, r7}
/*
 * Generic interrupt handler.
 */
static inline void irq_handler(PORT_TypeDef * const port, const unsigned port_width, const uint8_t *channel_map) {
  unsigned pin;
  uint32_t isfr = port->ISFR;
    29b0:	58d6      	ldr	r6, [r2, r3]

  /* Clear all pending interrupts on this port. */
  port->ISFR = 0xFFFFFFFF;
    29b2:	50d1      	str	r1, [r2, r3]

  for (pin = 0; pin < port_width; pin++) {
    if (isfr & (1 << pin)) {
      expchannel_t channel = channel_map[pin];
    29b4:	4b11      	ldr	r3, [pc, #68]	; (29fc <VectorB8+0x5c>)
 *
 * @isr
 */
#if defined(KINETIS_PORTA_IRQ_VECTOR) && KINETIS_EXT_PORTA_WIDTH > 0
OSAL_IRQ_HANDLER(KINETIS_PORTA_IRQ_VECTOR) {
  OSAL_IRQ_PROLOGUE();
    29b6:	46f1      	mov	r9, lr
  uint32_t isfr = port->ISFR;

  /* Clear all pending interrupts on this port. */
  port->ISFR = 0xFFFFFFFF;

  for (pin = 0; pin < port_width; pin++) {
    29b8:	2400      	movs	r4, #0
    if (isfr & (1 << pin)) {
    29ba:	2501      	movs	r5, #1
      expchannel_t channel = channel_map[pin];
    29bc:	4698      	mov	r8, r3
      EXTD1.config->channels[channel].cb(&EXTD1, channel);
    29be:	4f10      	ldr	r7, [pc, #64]	; (2a00 <VectorB8+0x60>)
    29c0:	e002      	b.n	29c8 <VectorB8+0x28>
  uint32_t isfr = port->ISFR;

  /* Clear all pending interrupts on this port. */
  port->ISFR = 0xFFFFFFFF;

  for (pin = 0; pin < port_width; pin++) {
    29c2:	3401      	adds	r4, #1
    29c4:	2c20      	cmp	r4, #32
    29c6:	d00f      	beq.n	29e8 <VectorB8+0x48>
    if (isfr & (1 << pin)) {
    29c8:	1c2b      	adds	r3, r5, #0
    29ca:	40a3      	lsls	r3, r4
    29cc:	421e      	tst	r6, r3
    29ce:	d0f8      	beq.n	29c2 <VectorB8+0x22>
      expchannel_t channel = channel_map[pin];
    29d0:	4643      	mov	r3, r8
      EXTD1.config->channels[channel].cb(&EXTD1, channel);
    29d2:	687a      	ldr	r2, [r7, #4]
  /* Clear all pending interrupts on this port. */
  port->ISFR = 0xFFFFFFFF;

  for (pin = 0; pin < port_width; pin++) {
    if (isfr & (1 << pin)) {
      expchannel_t channel = channel_map[pin];
    29d4:	5ce1      	ldrb	r1, [r4, r3]
      EXTD1.config->channels[channel].cb(&EXTD1, channel);
    29d6:	4694      	mov	ip, r2
    29d8:	010b      	lsls	r3, r1, #4
    29da:	4463      	add	r3, ip
    29dc:	685b      	ldr	r3, [r3, #4]
    29de:	1c38      	adds	r0, r7, #0
  uint32_t isfr = port->ISFR;

  /* Clear all pending interrupts on this port. */
  port->ISFR = 0xFFFFFFFF;

  for (pin = 0; pin < port_width; pin++) {
    29e0:	3401      	adds	r4, #1
    if (isfr & (1 << pin)) {
      expchannel_t channel = channel_map[pin];
      EXTD1.config->channels[channel].cb(&EXTD1, channel);
    29e2:	4798      	blx	r3
  uint32_t isfr = port->ISFR;

  /* Clear all pending interrupts on this port. */
  port->ISFR = 0xFFFFFFFF;

  for (pin = 0; pin < port_width; pin++) {
    29e4:	2c20      	cmp	r4, #32
    29e6:	d1ef      	bne.n	29c8 <VectorB8+0x28>
OSAL_IRQ_HANDLER(KINETIS_PORTA_IRQ_VECTOR) {
  OSAL_IRQ_PROLOGUE();

  irq_handler(PORTA, KINETIS_EXT_PORTA_WIDTH, porta_channel_map);

  OSAL_IRQ_EPILOGUE();
    29e8:	4648      	mov	r0, r9
    29ea:	f7ff fa71 	bl	1ed0 <_port_irq_epilogue>
}
    29ee:	bc0c      	pop	{r2, r3}
    29f0:	4690      	mov	r8, r2
    29f2:	4699      	mov	r9, r3
    29f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    29f6:	46c0      	nop			; (mov r8, r8)
    29f8:	40049000 	.word	0x40049000
    29fc:	20000acc 	.word	0x20000acc
    2a00:	20000aa4 	.word	0x20000aa4
    2a04:	46c0      	nop			; (mov r8, r8)
    2a06:	46c0      	nop			; (mov r8, r8)
    2a08:	46c0      	nop			; (mov r8, r8)
    2a0a:	46c0      	nop			; (mov r8, r8)
    2a0c:	46c0      	nop			; (mov r8, r8)
    2a0e:	46c0      	nop			; (mov r8, r8)

00002a10 <VectorBC>:
static inline void irq_handler(PORT_TypeDef * const port, const unsigned port_width, const uint8_t *channel_map) {
  unsigned pin;
  uint32_t isfr = port->ISFR;

  /* Clear all pending interrupts on this port. */
  port->ISFR = 0xFFFFFFFF;
    2a10:	2101      	movs	r1, #1
 * @brief   PORTB interrupt handler.
 *
 * @isr
 */
#if defined(KINETIS_PORTB_IRQ_VECTOR) && KINETIS_EXT_PORTB_WIDTH > 0
OSAL_IRQ_HANDLER(KINETIS_PORTB_IRQ_VECTOR) {
    2a12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a14:	464f      	mov	r7, r9
    2a16:	4646      	mov	r6, r8
/*
 * Generic interrupt handler.
 */
static inline void irq_handler(PORT_TypeDef * const port, const unsigned port_width, const uint8_t *channel_map) {
  unsigned pin;
  uint32_t isfr = port->ISFR;
    2a18:	23a0      	movs	r3, #160	; 0xa0
    2a1a:	4a13      	ldr	r2, [pc, #76]	; (2a68 <VectorBC+0x58>)

  /* Clear all pending interrupts on this port. */
  port->ISFR = 0xFFFFFFFF;
    2a1c:	4249      	negs	r1, r1
 * @brief   PORTB interrupt handler.
 *
 * @isr
 */
#if defined(KINETIS_PORTB_IRQ_VECTOR) && KINETIS_EXT_PORTB_WIDTH > 0
OSAL_IRQ_HANDLER(KINETIS_PORTB_IRQ_VECTOR) {
    2a1e:	b4c0      	push	{r6, r7}
/*
 * Generic interrupt handler.
 */
static inline void irq_handler(PORT_TypeDef * const port, const unsigned port_width, const uint8_t *channel_map) {
  unsigned pin;
  uint32_t isfr = port->ISFR;
    2a20:	58d6      	ldr	r6, [r2, r3]

  /* Clear all pending interrupts on this port. */
  port->ISFR = 0xFFFFFFFF;
    2a22:	50d1      	str	r1, [r2, r3]

  for (pin = 0; pin < port_width; pin++) {
    if (isfr & (1 << pin)) {
      expchannel_t channel = channel_map[pin];
    2a24:	4b11      	ldr	r3, [pc, #68]	; (2a6c <VectorBC+0x5c>)
 *
 * @isr
 */
#if defined(KINETIS_PORTB_IRQ_VECTOR) && KINETIS_EXT_PORTB_WIDTH > 0
OSAL_IRQ_HANDLER(KINETIS_PORTB_IRQ_VECTOR) {
  OSAL_IRQ_PROLOGUE();
    2a26:	46f1      	mov	r9, lr
  uint32_t isfr = port->ISFR;

  /* Clear all pending interrupts on this port. */
  port->ISFR = 0xFFFFFFFF;

  for (pin = 0; pin < port_width; pin++) {
    2a28:	2400      	movs	r4, #0
    if (isfr & (1 << pin)) {
    2a2a:	2501      	movs	r5, #1
      expchannel_t channel = channel_map[pin];
    2a2c:	4698      	mov	r8, r3
      EXTD1.config->channels[channel].cb(&EXTD1, channel);
    2a2e:	4f10      	ldr	r7, [pc, #64]	; (2a70 <VectorBC+0x60>)
    2a30:	e002      	b.n	2a38 <VectorBC+0x28>
  uint32_t isfr = port->ISFR;

  /* Clear all pending interrupts on this port. */
  port->ISFR = 0xFFFFFFFF;

  for (pin = 0; pin < port_width; pin++) {
    2a32:	3401      	adds	r4, #1
    2a34:	2c20      	cmp	r4, #32
    2a36:	d00f      	beq.n	2a58 <VectorBC+0x48>
    if (isfr & (1 << pin)) {
    2a38:	1c2b      	adds	r3, r5, #0
    2a3a:	40a3      	lsls	r3, r4
    2a3c:	421e      	tst	r6, r3
    2a3e:	d0f8      	beq.n	2a32 <VectorBC+0x22>
      expchannel_t channel = channel_map[pin];
    2a40:	4643      	mov	r3, r8
      EXTD1.config->channels[channel].cb(&EXTD1, channel);
    2a42:	687a      	ldr	r2, [r7, #4]
  /* Clear all pending interrupts on this port. */
  port->ISFR = 0xFFFFFFFF;

  for (pin = 0; pin < port_width; pin++) {
    if (isfr & (1 << pin)) {
      expchannel_t channel = channel_map[pin];
    2a44:	5ce1      	ldrb	r1, [r4, r3]
      EXTD1.config->channels[channel].cb(&EXTD1, channel);
    2a46:	4694      	mov	ip, r2
    2a48:	010b      	lsls	r3, r1, #4
    2a4a:	4463      	add	r3, ip
    2a4c:	685b      	ldr	r3, [r3, #4]
    2a4e:	1c38      	adds	r0, r7, #0
  uint32_t isfr = port->ISFR;

  /* Clear all pending interrupts on this port. */
  port->ISFR = 0xFFFFFFFF;

  for (pin = 0; pin < port_width; pin++) {
    2a50:	3401      	adds	r4, #1
    if (isfr & (1 << pin)) {
      expchannel_t channel = channel_map[pin];
      EXTD1.config->channels[channel].cb(&EXTD1, channel);
    2a52:	4798      	blx	r3
  uint32_t isfr = port->ISFR;

  /* Clear all pending interrupts on this port. */
  port->ISFR = 0xFFFFFFFF;

  for (pin = 0; pin < port_width; pin++) {
    2a54:	2c20      	cmp	r4, #32
    2a56:	d1ef      	bne.n	2a38 <VectorBC+0x28>
OSAL_IRQ_HANDLER(KINETIS_PORTB_IRQ_VECTOR) {
  OSAL_IRQ_PROLOGUE();

  irq_handler(PORTB, KINETIS_EXT_PORTB_WIDTH, portb_channel_map);

  OSAL_IRQ_EPILOGUE();
    2a58:	4648      	mov	r0, r9
    2a5a:	f7ff fa39 	bl	1ed0 <_port_irq_epilogue>
}
    2a5e:	bc0c      	pop	{r2, r3}
    2a60:	4690      	mov	r8, r2
    2a62:	4699      	mov	r9, r3
    2a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a66:	46c0      	nop			; (mov r8, r8)
    2a68:	4004a000 	.word	0x4004a000
    2a6c:	20000aac 	.word	0x20000aac
    2a70:	20000aa4 	.word	0x20000aa4
    2a74:	46c0      	nop			; (mov r8, r8)
    2a76:	46c0      	nop			; (mov r8, r8)
    2a78:	46c0      	nop			; (mov r8, r8)
    2a7a:	46c0      	nop			; (mov r8, r8)
    2a7c:	46c0      	nop			; (mov r8, r8)
    2a7e:	46c0      	nop			; (mov r8, r8)

00002a80 <ext_lld_init>:
/**
 * @brief   Low level EXT driver initialization.
 *
 * @notapi
 */
void ext_lld_init(void) {
    2a80:	b508      	push	{r3, lr}

  /* Driver initialization.*/
  extObjectInit(&EXTD1);
    2a82:	4802      	ldr	r0, [pc, #8]	; (2a8c <ext_lld_init+0xc>)
    2a84:	f7ff fcdc 	bl	2440 <extObjectInit>
}
    2a88:	bd08      	pop	{r3, pc}
    2a8a:	46c0      	nop			; (mov r8, r8)
    2a8c:	20000aa4 	.word	0x20000aa4

00002a90 <Vector7C>:
  OSAL_IRQ_PROLOGUE();
#endif

  ADCDriver *adcp = &ADCD1;
  
  GPIOB->PSOR |= (1 << 6);   // red
    2a90:	2340      	movs	r3, #64	; 0x40
    2a92:	4a19      	ldr	r2, [pc, #100]	; (2af8 <Vector7C+0x68>)
/**
 * @brief   ADC interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(KINETIS_ADC0_IRQ_VECTOR) {
    2a94:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
#endif

  ADCDriver *adcp = &ADCD1;
  
  GPIOB->PSOR |= (1 << 6);   // red
    2a96:	6851      	ldr	r1, [r2, #4]
  /* Read the sample into the buffer */
  adcp->samples[adcp->current_index++] = adcp->adc->RA;
    2a98:	4c18      	ldr	r4, [pc, #96]	; (2afc <Vector7C+0x6c>)
  OSAL_IRQ_PROLOGUE();
#endif

  ADCDriver *adcp = &ADCD1;
  
  GPIOB->PSOR |= (1 << 6);   // red
    2a9a:	430b      	orrs	r3, r1
    2a9c:	6053      	str	r3, [r2, #4]
  /* Read the sample into the buffer */
  adcp->samples[adcp->current_index++] = adcp->adc->RA;
    2a9e:	6961      	ldr	r1, [r4, #20]
    2aa0:	69e3      	ldr	r3, [r4, #28]
    2aa2:	68a0      	ldr	r0, [r4, #8]
    2aa4:	6909      	ldr	r1, [r1, #16]
    2aa6:	1c5a      	adds	r2, r3, #1
    2aa8:	005b      	lsls	r3, r3, #1
    2aaa:	61e2      	str	r2, [r4, #28]
    2aac:	5219      	strh	r1, [r3, r0]

  /*  At the end of the buffer then we may be finished */
  if(adcp->current_index == adcp->number_of_samples) {
    2aae:	69a3      	ldr	r3, [r4, #24]
    2ab0:	429a      	cmp	r2, r3
    2ab2:	d012      	beq.n	2ada <Vector7C+0x4a>
    _adc_isr_full_code(&ADCD1);
    adcp->current_index = 0;
  }
  
  if( adcp->current_index == (adcp->number_of_samples / 2) ) {
    2ab4:	085b      	lsrs	r3, r3, #1
    2ab6:	4293      	cmp	r3, r2
    2ab8:	d005      	beq.n	2ac6 <Vector7C+0x36>
    _adc_isr_half_code(&ADCD1);
  }
  GPIOB->PCOR |= (1 << 6);   // red
    2aba:	2340      	movs	r3, #64	; 0x40
    2abc:	4a0e      	ldr	r2, [pc, #56]	; (2af8 <Vector7C+0x68>)
    2abe:	6891      	ldr	r1, [r2, #8]
    2ac0:	430b      	orrs	r3, r1
    2ac2:	6093      	str	r3, [r2, #8]
  
#if !DEMOD_DEBUG
  OSAL_IRQ_EPILOGUE();
#endif
}
    2ac4:	bd10      	pop	{r4, pc}
    _adc_isr_full_code(&ADCD1);
    adcp->current_index = 0;
  }
  
  if( adcp->current_index == (adcp->number_of_samples / 2) ) {
    _adc_isr_half_code(&ADCD1);
    2ac6:	6923      	ldr	r3, [r4, #16]
    2ac8:	685b      	ldr	r3, [r3, #4]
    2aca:	2b00      	cmp	r3, #0
    2acc:	d0f5      	beq.n	2aba <Vector7C+0x2a>
    2ace:	68e2      	ldr	r2, [r4, #12]
    2ad0:	68a1      	ldr	r1, [r4, #8]
    2ad2:	0852      	lsrs	r2, r2, #1
    2ad4:	1c20      	adds	r0, r4, #0
    2ad6:	4798      	blx	r3
    2ad8:	e7ef      	b.n	2aba <Vector7C+0x2a>
  /* Read the sample into the buffer */
  adcp->samples[adcp->current_index++] = adcp->adc->RA;

  /*  At the end of the buffer then we may be finished */
  if(adcp->current_index == adcp->number_of_samples) {
    _adc_isr_full_code(&ADCD1);
    2ada:	68e3      	ldr	r3, [r4, #12]
    2adc:	085a      	lsrs	r2, r3, #1
    2ade:	6923      	ldr	r3, [r4, #16]
    2ae0:	8859      	ldrh	r1, [r3, #2]
    2ae2:	685b      	ldr	r3, [r3, #4]
    2ae4:	4351      	muls	r1, r2
    2ae6:	0049      	lsls	r1, r1, #1
    2ae8:	1841      	adds	r1, r0, r1
    2aea:	1c20      	adds	r0, r4, #0
    2aec:	4798      	blx	r3
    adcp->current_index = 0;
    2aee:	2300      	movs	r3, #0
    2af0:	2200      	movs	r2, #0
    2af2:	61e3      	str	r3, [r4, #28]
    2af4:	69a3      	ldr	r3, [r4, #24]
    2af6:	e7dd      	b.n	2ab4 <Vector7C+0x24>
    2af8:	400ff040 	.word	0x400ff040
    2afc:	20000aec 	.word	0x20000aec

00002b00 <adc_lld_init>:
/**
 * @brief   Low level ADC driver initialization.
 *
 * @notapi
 */
void adc_lld_init(void) {
    2b00:	b508      	push	{r3, lr}

#if KINETIS_ADC_USE_ADC0
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
    2b02:	4804      	ldr	r0, [pc, #16]	; (2b14 <adc_lld_init+0x14>)
    2b04:	f7ff fc6c 	bl	23e0 <adcObjectInit>
#endif

  /* The shared vector is initialized on driver initialization and never
     disabled.*/
  nvicEnableVector(ADC0_IRQn, KINETIS_ADC_IRQ_PRIORITY);
    2b08:	200f      	movs	r0, #15
    2b0a:	2100      	movs	r1, #0
    2b0c:	f7ff fd38 	bl	2580 <nvicEnableVector>
}
    2b10:	bd08      	pop	{r3, pc}
    2b12:	46c0      	nop			; (mov r8, r8)
    2b14:	20000aec 	.word	0x20000aec
    2b18:	46c0      	nop			; (mov r8, r8)
    2b1a:	46c0      	nop			; (mov r8, r8)
    2b1c:	46c0      	nop			; (mov r8, r8)
    2b1e:	46c0      	nop			; (mov r8, r8)

00002b20 <adc_lld_start>:
 * @notapi
 */
void adc_lld_start(ADCDriver *adcp) {

  /* If in stopped state then enables the ADC clock.*/
  if (adcp->state == ADC_STOP) {
    2b20:	6803      	ldr	r3, [r0, #0]
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 *
 * @notapi
 */
void adc_lld_start(ADCDriver *adcp) {
    2b22:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* If in stopped state then enables the ADC clock.*/
  if (adcp->state == ADC_STOP) {
    2b24:	2b01      	cmp	r3, #1
    2b26:	d000      	beq.n	2b2a <adc_lld_start+0xa>
        calibrate(adcp);
      }
    }
#endif /* KINETIS_ADC_USE_ADC0 */
  }
}
    2b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 */
void adc_lld_start(ADCDriver *adcp) {

  /* If in stopped state then enables the ADC clock.*/
  if (adcp->state == ADC_STOP) {
    SIM->SCGC6 |= SIM_SCGC6_ADC0;
    2b2a:	2480      	movs	r4, #128	; 0x80
    2b2c:	491c      	ldr	r1, [pc, #112]	; (2ba0 <adc_lld_start+0x80>)
    2b2e:	4a1d      	ldr	r2, [pc, #116]	; (2ba4 <adc_lld_start+0x84>)
    2b30:	0524      	lsls	r4, r4, #20
    2b32:	588b      	ldr	r3, [r1, r2]
    2b34:	4323      	orrs	r3, r4
    2b36:	508b      	str	r3, [r1, r2]

#if KINETIS_ADC_USE_ADC0
    if (&ADCD1 == adcp) {
    2b38:	4b1b      	ldr	r3, [pc, #108]	; (2ba8 <adc_lld_start+0x88>)
    2b3a:	4298      	cmp	r0, r3
    2b3c:	d1f4      	bne.n	2b28 <adc_lld_start+0x8>
      adcp->adc = ADC0;
      if (adcp->config->calibrate) {
    2b3e:	6843      	ldr	r3, [r0, #4]
  if (adcp->state == ADC_STOP) {
    SIM->SCGC6 |= SIM_SCGC6_ADC0;

#if KINETIS_ADC_USE_ADC0
    if (&ADCD1 == adcp) {
      adcp->adc = ADC0;
    2b40:	491a      	ldr	r1, [pc, #104]	; (2bac <adc_lld_start+0x8c>)
      if (adcp->config->calibrate) {
    2b42:	781b      	ldrb	r3, [r3, #0]
  if (adcp->state == ADC_STOP) {
    SIM->SCGC6 |= SIM_SCGC6_ADC0;

#if KINETIS_ADC_USE_ADC0
    if (&ADCD1 == adcp) {
      adcp->adc = ADC0;
    2b44:	6141      	str	r1, [r0, #20]
      if (adcp->config->calibrate) {
    2b46:	2b00      	cmp	r3, #0
    2b48:	d0ee      	beq.n	2b28 <adc_lld_start+0x8>

static void calibrate(ADCDriver *adcp) {

  /* Clock Divide by 8, Use Bus Clock Div 2 */
  /* At 48MHz this results in ADCCLK of 48/8/2 == 3MHz */
  adcp->adc->CFG1 = ADCx_CFG1_ADIV(ADCx_CFG1_ADIV_DIV_8) |
    2b4a:	2361      	movs	r3, #97	; 0x61
    2b4c:	608b      	str	r3, [r1, #8]
      ADCx_CFG1_ADICLK(ADCx_CFG1_ADIVCLK_BUS_CLOCK_DIV_2);

  /* Use software trigger and disable DMA etc. */
  adcp->adc->SC2 = 0;
    2b4e:	2300      	movs	r3, #0
    2b50:	620b      	str	r3, [r1, #32]

  /* Enable Hardware Average, Average 32 Samples, Calibrate */
  adcp->adc->SC3 = ADCx_SC3_AVGE |
    2b52:	2387      	movs	r3, #135	; 0x87
      ADCx_SC3_AVGS(ADCx_SC3_AVGS_AVERAGE_32_SAMPLES) |
      ADCx_SC3_CAL;

  /* FIXME: May take several ms. Use an interrupt instead of busy wait */
  /* Wait for calibration completion */
  while (!(adcp->adc->SC1A & ADCx_SC1n_COCO))
    2b54:	2080      	movs	r0, #128	; 0x80

  /* Use software trigger and disable DMA etc. */
  adcp->adc->SC2 = 0;

  /* Enable Hardware Average, Average 32 Samples, Calibrate */
  adcp->adc->SC3 = ADCx_SC3_AVGE |
    2b56:	624b      	str	r3, [r1, #36]	; 0x24
      ADCx_SC3_AVGS(ADCx_SC3_AVGS_AVERAGE_32_SAMPLES) |
      ADCx_SC3_CAL;

  /* FIXME: May take several ms. Use an interrupt instead of busy wait */
  /* Wait for calibration completion */
  while (!(adcp->adc->SC1A & ADCx_SC1n_COCO))
    2b58:	680a      	ldr	r2, [r1, #0]
    2b5a:	4b14      	ldr	r3, [pc, #80]	; (2bac <adc_lld_start+0x8c>)
    2b5c:	4210      	tst	r0, r2
    2b5e:	d0fb      	beq.n	2b58 <adc_lld_start+0x38>
    ;

  uint16_t gain = ((adcp->adc->CLP0 + adcp->adc->CLP1 + adcp->adc->CLP2 +
    2b60:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
    2b62:	6c9e      	ldr	r6, [r3, #72]	; 0x48
    2b64:	6c5d      	ldr	r5, [r3, #68]	; 0x44
    2b66:	1871      	adds	r1, r6, r1
      adcp->adc->CLP3 + adcp->adc->CLP4 + adcp->adc->CLPS) / 2) | 0x8000;
    2b68:	6c1c      	ldr	r4, [r3, #64]	; 0x40
  /* FIXME: May take several ms. Use an interrupt instead of busy wait */
  /* Wait for calibration completion */
  while (!(adcp->adc->SC1A & ADCx_SC1n_COCO))
    ;

  uint16_t gain = ((adcp->adc->CLP0 + adcp->adc->CLP1 + adcp->adc->CLP2 +
    2b6a:	1949      	adds	r1, r1, r5
      adcp->adc->CLP3 + adcp->adc->CLP4 + adcp->adc->CLPS) / 2) | 0x8000;
    2b6c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  /* FIXME: May take several ms. Use an interrupt instead of busy wait */
  /* Wait for calibration completion */
  while (!(adcp->adc->SC1A & ADCx_SC1n_COCO))
    ;

  uint16_t gain = ((adcp->adc->CLP0 + adcp->adc->CLP1 + adcp->adc->CLP2 +
    2b6e:	1909      	adds	r1, r1, r4
      adcp->adc->CLP3 + adcp->adc->CLP4 + adcp->adc->CLPS) / 2) | 0x8000;
    2b70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    2b72:	1809      	adds	r1, r1, r0
    2b74:	1889      	adds	r1, r1, r2
  /* FIXME: May take several ms. Use an interrupt instead of busy wait */
  /* Wait for calibration completion */
  while (!(adcp->adc->SC1A & ADCx_SC1n_COCO))
    ;

  uint16_t gain = ((adcp->adc->CLP0 + adcp->adc->CLP1 + adcp->adc->CLP2 +
    2b76:	4e0e      	ldr	r6, [pc, #56]	; (2bb0 <adc_lld_start+0x90>)
      adcp->adc->CLP3 + adcp->adc->CLP4 + adcp->adc->CLPS) / 2) | 0x8000;
    2b78:	0849      	lsrs	r1, r1, #1
  /* FIXME: May take several ms. Use an interrupt instead of busy wait */
  /* Wait for calibration completion */
  while (!(adcp->adc->SC1A & ADCx_SC1n_COCO))
    ;

  uint16_t gain = ((adcp->adc->CLP0 + adcp->adc->CLP1 + adcp->adc->CLP2 +
    2b7a:	4331      	orrs	r1, r6
      adcp->adc->CLP3 + adcp->adc->CLP4 + adcp->adc->CLPS) / 2) | 0x8000;
  adcp->adc->PG = gain;
    2b7c:	b289      	uxth	r1, r1
    2b7e:	62d9      	str	r1, [r3, #44]	; 0x2c

  gain = ((adcp->adc->CLM0 + adcp->adc->CLM1 + adcp->adc->CLM2 +
    2b80:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    2b82:	6e9f      	ldr	r7, [r3, #104]	; 0x68
    2b84:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    2b86:	1838      	adds	r0, r7, r0
      adcp->adc->CLM3 + adcp->adc->CLM4 + adcp->adc->CLMS) / 2) | 0x8000;
    2b88:	6e1d      	ldr	r5, [r3, #96]	; 0x60

  uint16_t gain = ((adcp->adc->CLP0 + adcp->adc->CLP1 + adcp->adc->CLP2 +
      adcp->adc->CLP3 + adcp->adc->CLP4 + adcp->adc->CLPS) / 2) | 0x8000;
  adcp->adc->PG = gain;

  gain = ((adcp->adc->CLM0 + adcp->adc->CLM1 + adcp->adc->CLM2 +
    2b8a:	1880      	adds	r0, r0, r2
      adcp->adc->CLM3 + adcp->adc->CLM4 + adcp->adc->CLMS) / 2) | 0x8000;
    2b8c:	6ddc      	ldr	r4, [r3, #92]	; 0x5c

  uint16_t gain = ((adcp->adc->CLP0 + adcp->adc->CLP1 + adcp->adc->CLP2 +
      adcp->adc->CLP3 + adcp->adc->CLP4 + adcp->adc->CLPS) / 2) | 0x8000;
  adcp->adc->PG = gain;

  gain = ((adcp->adc->CLM0 + adcp->adc->CLM1 + adcp->adc->CLM2 +
    2b8e:	1940      	adds	r0, r0, r5
      adcp->adc->CLM3 + adcp->adc->CLM4 + adcp->adc->CLMS) / 2) | 0x8000;
    2b90:	6d99      	ldr	r1, [r3, #88]	; 0x58
    2b92:	1900      	adds	r0, r0, r4
    2b94:	1842      	adds	r2, r0, r1
    2b96:	0852      	lsrs	r2, r2, #1

  uint16_t gain = ((adcp->adc->CLP0 + adcp->adc->CLP1 + adcp->adc->CLP2 +
      adcp->adc->CLP3 + adcp->adc->CLP4 + adcp->adc->CLPS) / 2) | 0x8000;
  adcp->adc->PG = gain;

  gain = ((adcp->adc->CLM0 + adcp->adc->CLM1 + adcp->adc->CLM2 +
    2b98:	4332      	orrs	r2, r6
      adcp->adc->CLM3 + adcp->adc->CLM4 + adcp->adc->CLMS) / 2) | 0x8000;
  adcp->adc->MG = gain;
    2b9a:	b292      	uxth	r2, r2
    2b9c:	631a      	str	r2, [r3, #48]	; 0x30
    2b9e:	e7c3      	b.n	2b28 <adc_lld_start+0x8>
    2ba0:	40047000 	.word	0x40047000
    2ba4:	0000103c 	.word	0x0000103c
    2ba8:	20000aec 	.word	0x20000aec
    2bac:	4003b000 	.word	0x4003b000
    2bb0:	ffff8000 	.word	0xffff8000
    2bb4:	46c0      	nop			; (mov r8, r8)
    2bb6:	46c0      	nop			; (mov r8, r8)
    2bb8:	46c0      	nop			; (mov r8, r8)
    2bba:	46c0      	nop			; (mov r8, r8)
    2bbc:	46c0      	nop			; (mov r8, r8)
    2bbe:	46c0      	nop			; (mov r8, r8)

00002bc0 <adc_lld_start_conversion>:
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 *
 * @notapi
 */
void adc_lld_start_conversion(ADCDriver *adcp) {
    2bc0:	b570      	push	{r4, r5, r6, lr}
  const ADCConversionGroup *grpp = adcp->grpp;
    2bc2:	6906      	ldr	r6, [r0, #16]
    2bc4:	68f1      	ldr	r1, [r6, #12]

  /* Enable the Bandgap Buffer if channel mask includes BANDGAP */
  if (grpp->channel_mask & ADC_BANDGAP) {
    2bc6:	010b      	lsls	r3, r1, #4
    2bc8:	d505      	bpl.n	2bd6 <adc_lld_start_conversion+0x16>
    PMC->REGSC |= PMC_REGSC_BGBE;
    2bca:	2301      	movs	r3, #1
    2bcc:	4a11      	ldr	r2, [pc, #68]	; (2c14 <adc_lld_start_conversion+0x54>)
    2bce:	7891      	ldrb	r1, [r2, #2]
    2bd0:	430b      	orrs	r3, r1
    2bd2:	7093      	strb	r3, [r2, #2]
    2bd4:	68f1      	ldr	r1, [r6, #12]
  }

  adcp->number_of_samples = adcp->depth * grpp->num_channels;
    2bd6:	8873      	ldrh	r3, [r6, #2]
    2bd8:	68c2      	ldr	r2, [r0, #12]
    2bda:	4353      	muls	r3, r2
    2bdc:	6183      	str	r3, [r0, #24]
  adcp->current_index = 0;
    2bde:	2300      	movs	r3, #0
    2be0:	61c3      	str	r3, [r0, #28]

  /* Skip to the next channel */
  adcp->current_channel = 0;
    2be2:	6203      	str	r3, [r0, #32]
  while (((1 << adcp->current_channel) & grpp->channel_mask) == 0) {
    2be4:	2301      	movs	r3, #1
    2be6:	400b      	ands	r3, r1
    2be8:	d111      	bne.n	2c0e <adc_lld_start_conversion+0x4e>
    adcp->current_channel = (adcp->current_channel + 1) & ADC_CHANNEL_MASK;
    2bea:	251f      	movs	r5, #31
  adcp->number_of_samples = adcp->depth * grpp->num_channels;
  adcp->current_index = 0;

  /* Skip to the next channel */
  adcp->current_channel = 0;
  while (((1 << adcp->current_channel) & grpp->channel_mask) == 0) {
    2bec:	2401      	movs	r4, #1
    2bee:	1c22      	adds	r2, r4, #0
    adcp->current_channel = (adcp->current_channel + 1) & ADC_CHANNEL_MASK;
    2bf0:	3301      	adds	r3, #1
    2bf2:	402b      	ands	r3, r5
  adcp->number_of_samples = adcp->depth * grpp->num_channels;
  adcp->current_index = 0;

  /* Skip to the next channel */
  adcp->current_channel = 0;
  while (((1 << adcp->current_channel) & grpp->channel_mask) == 0) {
    2bf4:	409a      	lsls	r2, r3
    2bf6:	420a      	tst	r2, r1
    2bf8:	d0f9      	beq.n	2bee <adc_lld_start_conversion+0x2e>
    2bfa:	2240      	movs	r2, #64	; 0x40
    2bfc:	6203      	str	r3, [r0, #32]
    2bfe:	4313      	orrs	r3, r2
    adcp->current_channel = (adcp->current_channel + 1) & ADC_CHANNEL_MASK;
  }

  /* Set clock speed and conversion size */
  adcp->adc->CFG1 = grpp->cfg1;
    2c00:	6931      	ldr	r1, [r6, #16]
    2c02:	6942      	ldr	r2, [r0, #20]
    2c04:	6091      	str	r1, [r2, #8]

  /* Set averaging */
  adcp->adc->SC3 = grpp->sc3;
    2c06:	6971      	ldr	r1, [r6, #20]
    2c08:	6251      	str	r1, [r2, #36]	; 0x24

  /* Enable Interrupt, Select Channel */
  adcp->adc->SC1A = ADCx_SC1n_AIEN | ADCx_SC1n_ADCH(adcp->current_channel);
    2c0a:	6013      	str	r3, [r2, #0]
}
    2c0c:	bd70      	pop	{r4, r5, r6, pc}
  adcp->number_of_samples = adcp->depth * grpp->num_channels;
  adcp->current_index = 0;

  /* Skip to the next channel */
  adcp->current_channel = 0;
  while (((1 << adcp->current_channel) & grpp->channel_mask) == 0) {
    2c0e:	2340      	movs	r3, #64	; 0x40
    2c10:	e7f6      	b.n	2c00 <adc_lld_start_conversion+0x40>
    2c12:	46c0      	nop			; (mov r8, r8)
    2c14:	4007d000 	.word	0x4007d000
    2c18:	46c0      	nop			; (mov r8, r8)
    2c1a:	46c0      	nop			; (mov r8, r8)
    2c1c:	46c0      	nop			; (mov r8, r8)
    2c1e:	46c0      	nop			; (mov r8, r8)

00002c20 <SysTick_Handler>:
 * @brief   System Timer vector.
 * @details This interrupt is used for system tick in periodic mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(SysTick_Handler) {
    2c20:	b510      	push	{r4, lr}
    2c22:	4674      	mov	r4, lr
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2c24:	b672      	cpsid	i
 *          service from the HAL.
 */
#if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
static inline void osalOsTimerHandlerI(void) {

  chSysTimerHandlerI();
    2c26:	f7ff f9b3 	bl	1f90 <chSysTimerHandlerI>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2c2a:	b662      	cpsie	i
    }
  }
#endif

#if 1
  OSAL_IRQ_EPILOGUE();
    2c2c:	1c20      	adds	r0, r4, #0
    2c2e:	f7ff f94f 	bl	1ed0 <_port_irq_epilogue>
#endif
}
    2c32:	bd10      	pop	{r4, pc}
    2c34:	46c0      	nop			; (mov r8, r8)
    2c36:	46c0      	nop			; (mov r8, r8)
    2c38:	46c0      	nop			; (mov r8, r8)
    2c3a:	46c0      	nop			; (mov r8, r8)
    2c3c:	46c0      	nop			; (mov r8, r8)
    2c3e:	46c0      	nop			; (mov r8, r8)

00002c40 <st_lld_init>:
/**
 * @brief   Low level ST driver initialization.
 *
 * @notapi
 */
void st_lld_init(void) {
    2c40:	b508      	push	{r3, lr}
#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (KINETIS_SYSCLK_FREQUENCY / OSAL_ST_FREQUENCY) - 1;
    2c42:	4a06      	ldr	r2, [pc, #24]	; (2c5c <st_lld_init+0x1c>)
    2c44:	4b06      	ldr	r3, [pc, #24]	; (2c60 <st_lld_init+0x20>)
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
                  SysTick_CTRL_ENABLE_Msk |
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, KINETIS_ST_IRQ_PRIORITY);
    2c46:	200b      	movs	r0, #11
 */
void st_lld_init(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (KINETIS_SYSCLK_FREQUENCY / OSAL_ST_FREQUENCY) - 1;
    2c48:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
    2c4a:	2200      	movs	r2, #0
    2c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
    2c4e:	2207      	movs	r2, #7
                  SysTick_CTRL_ENABLE_Msk |
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, KINETIS_ST_IRQ_PRIORITY);
    2c50:	2108      	movs	r1, #8
#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (KINETIS_SYSCLK_FREQUENCY / OSAL_ST_FREQUENCY) - 1;
  SysTick->VAL = 0;
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
    2c52:	601a      	str	r2, [r3, #0]
                  SysTick_CTRL_ENABLE_Msk |
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, KINETIS_ST_IRQ_PRIORITY);
    2c54:	f7ff fcc4 	bl	25e0 <nvicSetSystemHandlerPriority>
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
}
    2c58:	bd08      	pop	{r3, pc}
    2c5a:	46c0      	nop			; (mov r8, r8)
    2c5c:	0000bb63 	.word	0x0000bb63
    2c60:	e000e010 	.word	0xe000e010
    2c64:	46c0      	nop			; (mov r8, r8)
    2c66:	46c0      	nop			; (mov r8, r8)
    2c68:	46c0      	nop			; (mov r8, r8)
    2c6a:	46c0      	nop			; (mov r8, r8)
    2c6c:	46c0      	nop			; (mov r8, r8)
    2c6e:	46c0      	nop			; (mov r8, r8)

00002c70 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {
    2c70:	b508      	push	{r3, lr}

  kl2x_clock_init();
    2c72:	f7ff fccd 	bl	2610 <kl2x_clock_init>
}
    2c76:	bd08      	pop	{r3, pc}
    2c78:	46c0      	nop			; (mov r8, r8)
    2c7a:	46c0      	nop			; (mov r8, r8)
    2c7c:	46c0      	nop			; (mov r8, r8)
    2c7e:	46c0      	nop			; (mov r8, r8)

00002c80 <boardInit>:
/**
 * @brief   Board-specific initialization code.
 * @todo    Add your board-specific code, if any.
 */
void boardInit(void) {
}
    2c80:	4770      	bx	lr
    2c82:	46c0      	nop			; (mov r8, r8)
    2c84:	46c0      	nop			; (mov r8, r8)
    2c86:	46c0      	nop			; (mov r8, r8)
    2c88:	46c0      	nop			; (mov r8, r8)
    2c8a:	46c0      	nop			; (mov r8, r8)
    2c8c:	46c0      	nop			; (mov r8, r8)
    2c8e:	46c0      	nop			; (mov r8, r8)

00002c90 <tfp_format>:
  while ((ch= *bf++))
    putf(putp,ch);
}

void tfp_format(void* putp,putcf putf,char *fmt, va_list va)
{
    2c90:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c92:	465f      	mov	r7, fp
    2c94:	4656      	mov	r6, sl
    2c96:	464d      	mov	r5, r9
    2c98:	4644      	mov	r4, r8
    2c9a:	4693      	mov	fp, r2
    2c9c:	b4f0      	push	{r4, r5, r6, r7}
    2c9e:	1c1d      	adds	r5, r3, #0
    2ca0:	1c06      	adds	r6, r0, #0
    2ca2:	1c0f      	adds	r7, r1, #0
    2ca4:	b08b      	sub	sp, #44	; 0x2c
  char bf[12];

  char ch;


  while ((ch=*(fmt++))) {
    2ca6:	465b      	mov	r3, fp
    2ca8:	7819      	ldrb	r1, [r3, #0]
    2caa:	2900      	cmp	r1, #0
    2cac:	d00a      	beq.n	2cc4 <tfp_format+0x34>
    if (ch!='%')
    2cae:	2925      	cmp	r1, #37	; 0x25
    2cb0:	d00f      	beq.n	2cd2 <tfp_format+0x42>
  char bf[12];

  char ch;


  while ((ch=*(fmt++))) {
    2cb2:	2301      	movs	r3, #1
    2cb4:	469c      	mov	ip, r3
    if (ch!='%')
      putf(putp,ch);
    2cb6:	1c30      	adds	r0, r6, #0
  char bf[12];

  char ch;


  while ((ch=*(fmt++))) {
    2cb8:	44e3      	add	fp, ip
    if (ch!='%')
      putf(putp,ch);
    2cba:	47b8      	blx	r7
  char bf[12];

  char ch;


  while ((ch=*(fmt++))) {
    2cbc:	465b      	mov	r3, fp
    2cbe:	7819      	ldrb	r1, [r3, #0]
    2cc0:	2900      	cmp	r1, #0
    2cc2:	d1f4      	bne.n	2cae <tfp_format+0x1e>
        break;
      }
    }
  }
 abort:;
}
    2cc4:	b00b      	add	sp, #44	; 0x2c
    2cc6:	bc3c      	pop	{r2, r3, r4, r5}
    2cc8:	4690      	mov	r8, r2
    2cca:	4699      	mov	r9, r3
    2ccc:	46a2      	mov	sl, r4
    2cce:	46ab      	mov	fp, r5
    2cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      char lz=0;
      #ifdef  PRINTF_LONG_SUPPORT
      char lng=0;
      #endif
      int w=0;
      ch=*(fmt++);
    2cd2:	465b      	mov	r3, fp
    2cd4:	785b      	ldrb	r3, [r3, #1]
    2cd6:	4699      	mov	r9, r3
      if (ch=='0') {
    2cd8:	2b30      	cmp	r3, #48	; 0x30
    2cda:	d100      	bne.n	2cde <tfp_format+0x4e>
    2cdc:	e0c0      	b.n	2e60 <tfp_format+0x1d0>
      char lz=0;
      #ifdef  PRINTF_LONG_SUPPORT
      char lng=0;
      #endif
      int w=0;
      ch=*(fmt++);
    2cde:	2302      	movs	r3, #2
    2ce0:	469c      	mov	ip, r3

  while ((ch=*(fmt++))) {
    if (ch!='%')
      putf(putp,ch);
    else {
      char lz=0;
    2ce2:	2300      	movs	r3, #0
      #ifdef  PRINTF_LONG_SUPPORT
      char lng=0;
      #endif
      int w=0;
      ch=*(fmt++);
    2ce4:	44e3      	add	fp, ip

  while ((ch=*(fmt++))) {
    if (ch!='%')
      putf(putp,ch);
    else {
      char lz=0;
    2ce6:	9301      	str	r3, [sp, #4]
      ch=*(fmt++);
      if (ch=='0') {
        ch=*(fmt++);
        lz=1;
      }
      if (ch>='0' && ch<='9') {
    2ce8:	464b      	mov	r3, r9
    2cea:	3b30      	subs	r3, #48	; 0x30
    2cec:	b2da      	uxtb	r2, r3
    else {
      char lz=0;
      #ifdef  PRINTF_LONG_SUPPORT
      char lng=0;
      #endif
      int w=0;
    2cee:	2400      	movs	r4, #0
      ch=*(fmt++);
      if (ch=='0') {
        ch=*(fmt++);
        lz=1;
      }
      if (ch>='0' && ch<='9') {
    2cf0:	2a09      	cmp	r2, #9
    2cf2:	d800      	bhi.n	2cf6 <tfp_format+0x66>
    2cf4:	e08c      	b.n	2e10 <tfp_format+0x180>
      if (ch=='l') {
        ch=*(fmt++);
        lng=1;
      }
      #endif
      switch (ch) {
    2cf6:	464b      	mov	r3, r9
    2cf8:	2b63      	cmp	r3, #99	; 0x63
    2cfa:	d100      	bne.n	2cfe <tfp_format+0x6e>
    2cfc:	e09e      	b.n	2e3c <tfp_format+0x1ac>
    2cfe:	2b63      	cmp	r3, #99	; 0x63
    2d00:	d97c      	bls.n	2dfc <tfp_format+0x16c>
    2d02:	464b      	mov	r3, r9
    2d04:	2b73      	cmp	r3, #115	; 0x73
    2d06:	d100      	bne.n	2d0a <tfp_format+0x7a>
    2d08:	e102      	b.n	2f10 <tfp_format+0x280>
    2d0a:	d800      	bhi.n	2d0e <tfp_format+0x7e>
    2d0c:	e0b1      	b.n	2e72 <tfp_format+0x1e2>
    2d0e:	464b      	mov	r3, r9
    2d10:	2b75      	cmp	r3, #117	; 0x75
    2d12:	d000      	beq.n	2d16 <tfp_format+0x86>
    2d14:	e12b      	b.n	2f6e <tfp_format+0x2de>
        #ifdef  PRINTF_LONG_SUPPORT
        if (lng)
          uli2a(va_arg(va, unsigned long int),10,0,bf);
        else
        #endif
        ui2a(va_arg(va, unsigned int),10,0,bf);
    2d16:	1d2b      	adds	r3, r5, #4
    2d18:	9303      	str	r3, [sp, #12]
    2d1a:	682b      	ldr	r3, [r5, #0]

static void ui2a(unsigned int num, unsigned int base, int uc,char * bf)
{
  int n=0;
  unsigned int d=1;
  while (num/d >= base)
    2d1c:	2501      	movs	r5, #1
        #ifdef  PRINTF_LONG_SUPPORT
        if (lng)
          uli2a(va_arg(va, unsigned long int),10,0,bf);
        else
        #endif
        ui2a(va_arg(va, unsigned int),10,0,bf);
    2d1e:	4699      	mov	r9, r3

static void ui2a(unsigned int num, unsigned int base, int uc,char * bf)
{
  int n=0;
  unsigned int d=1;
  while (num/d >= base)
    2d20:	2b09      	cmp	r3, #9
    2d22:	d90f      	bls.n	2d44 <tfp_format+0xb4>
    2d24:	46a0      	mov	r8, r4
    2d26:	1c1c      	adds	r4, r3, #0
    d*=base;
    2d28:	00ab      	lsls	r3, r5, #2
    2d2a:	195d      	adds	r5, r3, r5
    2d2c:	006d      	lsls	r5, r5, #1

static void ui2a(unsigned int num, unsigned int base, int uc,char * bf)
{
  int n=0;
  unsigned int d=1;
  while (num/d >= base)
    2d2e:	1c20      	adds	r0, r4, #0
    2d30:	1c29      	adds	r1, r5, #0
    2d32:	f7fd fc3d 	bl	5b0 <__aeabi_uidiv>
    2d36:	2809      	cmp	r0, #9
    2d38:	d8f6      	bhi.n	2d28 <tfp_format+0x98>
    2d3a:	46a1      	mov	r9, r4
    2d3c:	4644      	mov	r4, r8
    d*=base;
  while (d!=0) {
    2d3e:	2d00      	cmp	r5, #0
    2d40:	d100      	bne.n	2d44 <tfp_format+0xb4>
    2d42:	e232      	b.n	31aa <tfp_format+0x51a>
    int dgt = num / d;
    num%= d;
    d/=base;
    if (n || dgt>0 || d==0) {
    2d44:	2200      	movs	r2, #0
    2d46:	ab07      	add	r3, sp, #28
    2d48:	4692      	mov	sl, r2
    2d4a:	9302      	str	r3, [sp, #8]
    2d4c:	1c32      	adds	r2, r6, #0
    2d4e:	4698      	mov	r8, r3
    2d50:	1c3b      	adds	r3, r7, #0
    2d52:	464e      	mov	r6, r9
    2d54:	4657      	mov	r7, sl
    2d56:	4691      	mov	r9, r2
    2d58:	469a      	mov	sl, r3
    2d5a:	9404      	str	r4, [sp, #16]
  int n=0;
  unsigned int d=1;
  while (num/d >= base)
    d*=base;
  while (d!=0) {
    int dgt = num / d;
    2d5c:	1c29      	adds	r1, r5, #0
    2d5e:	1c30      	adds	r0, r6, #0
    2d60:	f7fd fc26 	bl	5b0 <__aeabi_uidiv>
    num%= d;
    2d64:	1c29      	adds	r1, r5, #0
  int n=0;
  unsigned int d=1;
  while (num/d >= base)
    d*=base;
  while (d!=0) {
    int dgt = num / d;
    2d66:	1c04      	adds	r4, r0, #0
    num%= d;
    2d68:	1c30      	adds	r0, r6, #0
    2d6a:	f7fd fca7 	bl	6bc <__aeabi_uidivmod>
    d/=base;
    2d6e:	1c28      	adds	r0, r5, #0
  unsigned int d=1;
  while (num/d >= base)
    d*=base;
  while (d!=0) {
    int dgt = num / d;
    num%= d;
    2d70:	1c0e      	adds	r6, r1, #0
    d/=base;
    2d72:	210a      	movs	r1, #10
    2d74:	f7fd fc1c 	bl	5b0 <__aeabi_uidiv>
    2d78:	1c05      	adds	r5, r0, #0
    if (n || dgt>0 || d==0) {
    2d7a:	2f00      	cmp	r7, #0
    2d7c:	d101      	bne.n	2d82 <tfp_format+0xf2>
    2d7e:	2c00      	cmp	r4, #0
    2d80:	dd0c      	ble.n	2d9c <tfp_format+0x10c>
      *bf++ = dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10);
    2d82:	4643      	mov	r3, r8
    2d84:	1c5a      	adds	r2, r3, #1
    2d86:	2357      	movs	r3, #87	; 0x57
    2d88:	2c09      	cmp	r4, #9
    2d8a:	dd0b      	ble.n	2da4 <tfp_format+0x114>
    2d8c:	191c      	adds	r4, r3, r4
    2d8e:	4643      	mov	r3, r8
      ++n;
    2d90:	3701      	adds	r7, #1
  while (d!=0) {
    int dgt = num / d;
    num%= d;
    d/=base;
    if (n || dgt>0 || d==0) {
      *bf++ = dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10);
    2d92:	701c      	strb	r4, [r3, #0]
{
  int n=0;
  unsigned int d=1;
  while (num/d >= base)
    d*=base;
  while (d!=0) {
    2d94:	2d00      	cmp	r5, #0
    2d96:	d00c      	beq.n	2db2 <tfp_format+0x122>
    int dgt = num / d;
    num%= d;
    d/=base;
    if (n || dgt>0 || d==0) {
    2d98:	4690      	mov	r8, r2
    2d9a:	e7df      	b.n	2d5c <tfp_format+0xcc>
    2d9c:	4642      	mov	r2, r8
    2d9e:	2800      	cmp	r0, #0
    2da0:	d1fa      	bne.n	2d98 <tfp_format+0x108>
      *bf++ = dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10);
    2da2:	3201      	adds	r2, #1
    2da4:	2330      	movs	r3, #48	; 0x30
    2da6:	191c      	adds	r4, r3, r4
    2da8:	4643      	mov	r3, r8
      ++n;
    2daa:	3701      	adds	r7, #1
  while (d!=0) {
    int dgt = num / d;
    num%= d;
    d/=base;
    if (n || dgt>0 || d==0) {
      *bf++ = dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10);
    2dac:	701c      	strb	r4, [r3, #0]
{
  int n=0;
  unsigned int d=1;
  while (num/d >= base)
    d*=base;
  while (d!=0) {
    2dae:	2d00      	cmp	r5, #0
    2db0:	d1f2      	bne.n	2d98 <tfp_format+0x108>
    2db2:	464e      	mov	r6, r9
    2db4:	4657      	mov	r7, sl
    2db6:	9c04      	ldr	r4, [sp, #16]
    if (n || dgt>0 || d==0) {
      *bf++ = dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10);
      ++n;
    }
  }
  *bf=0;
    2db8:	2300      	movs	r3, #0
    2dba:	7013      	strb	r3, [r2, #0]
  return ch;
}

static void putchw(void* putp,putcf putf,int n, char z, char* bf)
{
  char fc=z? '0' : ' ';
    2dbc:	2330      	movs	r3, #48	; 0x30
    2dbe:	4698      	mov	r8, r3
    2dc0:	9b01      	ldr	r3, [sp, #4]
    2dc2:	2b00      	cmp	r3, #0
    2dc4:	d101      	bne.n	2dca <tfp_format+0x13a>
    2dc6:	2320      	movs	r3, #32
    2dc8:	4698      	mov	r8, r3
  char ch;
  char* p=bf;
  while (*p++ && n > 0)
    2dca:	9b02      	ldr	r3, [sp, #8]
    2dcc:	781d      	ldrb	r5, [r3, #0]
    2dce:	2d00      	cmp	r5, #0
    2dd0:	d106      	bne.n	2de0 <tfp_format+0x150>
    2dd2:	e203      	b.n	31dc <tfp_format+0x54c>
    2dd4:	785a      	ldrb	r2, [r3, #1]
    n--;
    2dd6:	3c01      	subs	r4, #1
static void putchw(void* putp,putcf putf,int n, char z, char* bf)
{
  char fc=z? '0' : ' ';
  char ch;
  char* p=bf;
  while (*p++ && n > 0)
    2dd8:	2a00      	cmp	r2, #0
    2dda:	d100      	bne.n	2dde <tfp_format+0x14e>
    2ddc:	e1cc      	b.n	3178 <tfp_format+0x4e8>
    2dde:	3301      	adds	r3, #1
    2de0:	2c00      	cmp	r4, #0
    2de2:	d1f7      	bne.n	2dd4 <tfp_format+0x144>
    2de4:	1c29      	adds	r1, r5, #0
    2de6:	ab06      	add	r3, sp, #24
    2de8:	1d5c      	adds	r4, r3, #5
    n--;
  while (n-- > 0)
    putf(putp,fc);
  while ((ch= *bf++))
    putf(putp,ch);
    2dea:	1c30      	adds	r0, r6, #0
    2dec:	3401      	adds	r4, #1
    2dee:	47b8      	blx	r7
    2df0:	1e63      	subs	r3, r4, #1
  char* p=bf;
  while (*p++ && n > 0)
    n--;
  while (n-- > 0)
    putf(putp,fc);
  while ((ch= *bf++))
    2df2:	7819      	ldrb	r1, [r3, #0]
    2df4:	2900      	cmp	r1, #0
    2df6:	d1f8      	bne.n	2dea <tfp_format+0x15a>
        #ifdef  PRINTF_LONG_SUPPORT
        if (lng)
          uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
        else
        #endif
        ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
    2df8:	9d03      	ldr	r5, [sp, #12]
    2dfa:	e754      	b.n	2ca6 <tfp_format+0x16>
      if (ch=='l') {
        ch=*(fmt++);
        lng=1;
      }
      #endif
      switch (ch) {
    2dfc:	2b25      	cmp	r3, #37	; 0x25
    2dfe:	d100      	bne.n	2e02 <tfp_format+0x172>
    2e00:	e0fb      	b.n	2ffa <tfp_format+0x36a>
    2e02:	2b58      	cmp	r3, #88	; 0x58
    2e04:	d100      	bne.n	2e08 <tfp_format+0x178>
    2e06:	e0b5      	b.n	2f74 <tfp_format+0x2e4>
    2e08:	2b00      	cmp	r3, #0
    2e0a:	d100      	bne.n	2e0e <tfp_format+0x17e>
    2e0c:	e75a      	b.n	2cc4 <tfp_format+0x34>
    2e0e:	e74a      	b.n	2ca6 <tfp_format+0x16>
    2e10:	4659      	mov	r1, fp
    2e12:	464a      	mov	r2, r9
    2e14:	46ac      	mov	ip, r5
  ui2a(num,10,0,bf);
}

static int a2d(char ch)
{
  if (ch>='0' && ch<='9')
    2e16:	b2d8      	uxtb	r0, r3
    2e18:	1c0d      	adds	r5, r1, #0
    2e1a:	2809      	cmp	r0, #9
    2e1c:	d917      	bls.n	2e4e <tfp_format+0x1be>
    return ch-'0';
  else if (ch>='a' && ch<='f')
    2e1e:	1c13      	adds	r3, r2, #0
    2e20:	3b61      	subs	r3, #97	; 0x61
    2e22:	2b05      	cmp	r3, #5
    2e24:	d910      	bls.n	2e48 <tfp_format+0x1b8>
    return ch-'a'+10;
  else if (ch>='A' && ch<='F')
    2e26:	1c13      	adds	r3, r2, #0
    2e28:	3b41      	subs	r3, #65	; 0x41
    2e2a:	2b05      	cmp	r3, #5
    2e2c:	d90c      	bls.n	2e48 <tfp_format+0x1b8>
    2e2e:	4691      	mov	r9, r2
      if (ch=='l') {
        ch=*(fmt++);
        lng=1;
      }
      #endif
      switch (ch) {
    2e30:	464b      	mov	r3, r9
    2e32:	46ab      	mov	fp, r5
    2e34:	4665      	mov	r5, ip
    2e36:	2b63      	cmp	r3, #99	; 0x63
    2e38:	d000      	beq.n	2e3c <tfp_format+0x1ac>
    2e3a:	e760      	b.n	2cfe <tfp_format+0x6e>
        #endif
        ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
        putchw(putp,putf,w,lz,bf);
        break;
      case 'c' :
        putf(putp,(char)(va_arg(va, int)));
    2e3c:	7829      	ldrb	r1, [r5, #0]
    2e3e:	1d2c      	adds	r4, r5, #4
    2e40:	1c30      	adds	r0, r6, #0
    2e42:	47b8      	blx	r7
    2e44:	1c25      	adds	r5, r4, #0
        break;
    2e46:	e72e      	b.n	2ca6 <tfp_format+0x16>
  if (ch>='0' && ch<='9')
    return ch-'0';
  else if (ch>='a' && ch<='f')
    return ch-'a'+10;
  else if (ch>='A' && ch<='F')
    return ch-'A'+10;
    2e48:	330a      	adds	r3, #10
{
  char* p= *src;
  int num=0;
  int digit;
  while ((digit=a2d(ch))>=0) {
    if (digit>base) break;
    2e4a:	2b0a      	cmp	r3, #10
    2e4c:	dcef      	bgt.n	2e2e <tfp_format+0x19e>
    num=num*base+digit;
    2e4e:	00a2      	lsls	r2, r4, #2
    2e50:	1914      	adds	r4, r2, r4
    ch=*p++;
    2e52:	780a      	ldrb	r2, [r1, #0]
  char* p= *src;
  int num=0;
  int digit;
  while ((digit=a2d(ch))>=0) {
    if (digit>base) break;
    num=num*base+digit;
    2e54:	0064      	lsls	r4, r4, #1
    2e56:	191c      	adds	r4, r3, r4
    2e58:	1c13      	adds	r3, r2, #0
    2e5a:	3101      	adds	r1, #1
    2e5c:	3b30      	subs	r3, #48	; 0x30
    2e5e:	e7da      	b.n	2e16 <tfp_format+0x186>
      char lng=0;
      #endif
      int w=0;
      ch=*(fmt++);
      if (ch=='0') {
        ch=*(fmt++);
    2e60:	465b      	mov	r3, fp
    2e62:	789b      	ldrb	r3, [r3, #2]
    2e64:	4699      	mov	r9, r3
    2e66:	2303      	movs	r3, #3
    2e68:	469c      	mov	ip, r3
        lz=1;
    2e6a:	2301      	movs	r3, #1
      char lng=0;
      #endif
      int w=0;
      ch=*(fmt++);
      if (ch=='0') {
        ch=*(fmt++);
    2e6c:	44e3      	add	fp, ip
        lz=1;
    2e6e:	9301      	str	r3, [sp, #4]
    2e70:	e73a      	b.n	2ce8 <tfp_format+0x58>
      if (ch=='l') {
        ch=*(fmt++);
        lng=1;
      }
      #endif
      switch (ch) {
    2e72:	2b64      	cmp	r3, #100	; 0x64
    2e74:	d000      	beq.n	2e78 <tfp_format+0x1e8>
    2e76:	e716      	b.n	2ca6 <tfp_format+0x16>
        #ifdef  PRINTF_LONG_SUPPORT
        if (lng)
          li2a(va_arg(va, unsigned long int),bf);
        else
        #endif
        i2a(va_arg(va, int),bf);
    2e78:	1d2b      	adds	r3, r5, #4
    2e7a:	9303      	str	r3, [sp, #12]
    2e7c:	682b      	ldr	r3, [r5, #0]
    2e7e:	4698      	mov	r8, r3
  *bf=0;
}

static void i2a (int num, char * bf)
{
  if (num<0) {
    2e80:	2b00      	cmp	r3, #0
    2e82:	da00      	bge.n	2e86 <tfp_format+0x1f6>
    2e84:	e10a      	b.n	309c <tfp_format+0x40c>
    2e86:	ab07      	add	r3, sp, #28
    2e88:	9302      	str	r3, [sp, #8]
    2e8a:	9304      	str	r3, [sp, #16]

static void ui2a(unsigned int num, unsigned int base, int uc,char * bf)
{
  int n=0;
  unsigned int d=1;
  while (num/d >= base)
    2e8c:	4643      	mov	r3, r8
{
  if (num<0) {
    num=-num;
    *bf++ = '-';
  }
  ui2a(num,10,0,bf);
    2e8e:	46c1      	mov	r9, r8

static void ui2a(unsigned int num, unsigned int base, int uc,char * bf)
{
  int n=0;
  unsigned int d=1;
  while (num/d >= base)
    2e90:	2501      	movs	r5, #1
    2e92:	2b09      	cmp	r3, #9
    2e94:	dd0f      	ble.n	2eb6 <tfp_format+0x226>
    2e96:	1c23      	adds	r3, r4, #0
    2e98:	4644      	mov	r4, r8
    2e9a:	4698      	mov	r8, r3
    d*=base;
    2e9c:	00ab      	lsls	r3, r5, #2
    2e9e:	195d      	adds	r5, r3, r5
    2ea0:	006d      	lsls	r5, r5, #1

static void ui2a(unsigned int num, unsigned int base, int uc,char * bf)
{
  int n=0;
  unsigned int d=1;
  while (num/d >= base)
    2ea2:	1c20      	adds	r0, r4, #0
    2ea4:	1c29      	adds	r1, r5, #0
    2ea6:	f7fd fb83 	bl	5b0 <__aeabi_uidiv>
    2eaa:	2809      	cmp	r0, #9
    2eac:	d8f6      	bhi.n	2e9c <tfp_format+0x20c>
    2eae:	4644      	mov	r4, r8
    d*=base;
  while (d!=0) {
    2eb0:	2d00      	cmp	r5, #0
    2eb2:	d100      	bne.n	2eb6 <tfp_format+0x226>
    2eb4:	e184      	b.n	31c0 <tfp_format+0x530>
    int dgt = num / d;
    num%= d;
    d/=base;
    if (n || dgt>0 || d==0) {
    2eb6:	2300      	movs	r3, #0
    2eb8:	469a      	mov	sl, r3
    2eba:	9b04      	ldr	r3, [sp, #16]
    2ebc:	1c32      	adds	r2, r6, #0
    2ebe:	4698      	mov	r8, r3
    2ec0:	1c3b      	adds	r3, r7, #0
    2ec2:	464e      	mov	r6, r9
    2ec4:	4657      	mov	r7, sl
    2ec6:	4691      	mov	r9, r2
    2ec8:	469a      	mov	sl, r3
    2eca:	9405      	str	r4, [sp, #20]
  int n=0;
  unsigned int d=1;
  while (num/d >= base)
    d*=base;
  while (d!=0) {
    int dgt = num / d;
    2ecc:	1c29      	adds	r1, r5, #0
    2ece:	1c30      	adds	r0, r6, #0
    2ed0:	f7fd fb6e 	bl	5b0 <__aeabi_uidiv>
    num%= d;
    2ed4:	1c29      	adds	r1, r5, #0
  int n=0;
  unsigned int d=1;
  while (num/d >= base)
    d*=base;
  while (d!=0) {
    int dgt = num / d;
    2ed6:	1c04      	adds	r4, r0, #0
    num%= d;
    2ed8:	1c30      	adds	r0, r6, #0
    2eda:	f7fd fbef 	bl	6bc <__aeabi_uidivmod>
    d/=base;
    2ede:	1c28      	adds	r0, r5, #0
  unsigned int d=1;
  while (num/d >= base)
    d*=base;
  while (d!=0) {
    int dgt = num / d;
    num%= d;
    2ee0:	1c0e      	adds	r6, r1, #0
    d/=base;
    2ee2:	210a      	movs	r1, #10
    2ee4:	f7fd fb64 	bl	5b0 <__aeabi_uidiv>
    2ee8:	1c05      	adds	r5, r0, #0
    if (n || dgt>0 || d==0) {
    2eea:	2f00      	cmp	r7, #0
    2eec:	d102      	bne.n	2ef4 <tfp_format+0x264>
    2eee:	2c00      	cmp	r4, #0
    2ef0:	dc00      	bgt.n	2ef4 <tfp_format+0x264>
    2ef2:	e0de      	b.n	30b2 <tfp_format+0x422>
      *bf++ = dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10);
    2ef4:	4643      	mov	r3, r8
    2ef6:	1c5a      	adds	r2, r3, #1
    2ef8:	2357      	movs	r3, #87	; 0x57
    2efa:	2c09      	cmp	r4, #9
    2efc:	dc00      	bgt.n	2f00 <tfp_format+0x270>
    2efe:	e0dd      	b.n	30bc <tfp_format+0x42c>
    2f00:	191c      	adds	r4, r3, r4
    2f02:	4643      	mov	r3, r8
      ++n;
    2f04:	3701      	adds	r7, #1
  while (d!=0) {
    int dgt = num / d;
    num%= d;
    d/=base;
    if (n || dgt>0 || d==0) {
      *bf++ = dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10);
    2f06:	701c      	strb	r4, [r3, #0]
{
  int n=0;
  unsigned int d=1;
  while (num/d >= base)
    d*=base;
  while (d!=0) {
    2f08:	2d00      	cmp	r5, #0
    2f0a:	d07a      	beq.n	3002 <tfp_format+0x372>
    int dgt = num / d;
    num%= d;
    d/=base;
    if (n || dgt>0 || d==0) {
    2f0c:	4690      	mov	r8, r2
    2f0e:	e7dd      	b.n	2ecc <tfp_format+0x23c>
        break;
      case 'c' :
        putf(putp,(char)(va_arg(va, int)));
        break;
      case 's' :
        putchw(putp,putf,w,0,va_arg(va, char*));
    2f10:	1d2b      	adds	r3, r5, #4
    2f12:	4699      	mov	r9, r3
    2f14:	682b      	ldr	r3, [r5, #0]
    2f16:	469a      	mov	sl, r3
static void putchw(void* putp,putcf putf,int n, char z, char* bf)
{
  char fc=z? '0' : ' ';
  char ch;
  char* p=bf;
  while (*p++ && n > 0)
    2f18:	2301      	movs	r3, #1
    2f1a:	4453      	add	r3, sl
    2f1c:	4698      	mov	r8, r3
    2f1e:	4653      	mov	r3, sl
    2f20:	7819      	ldrb	r1, [r3, #0]
    2f22:	2900      	cmp	r1, #0
    2f24:	d100      	bne.n	2f28 <tfp_format+0x298>
    2f26:	e153      	b.n	31d0 <tfp_format+0x540>
    2f28:	2c00      	cmp	r4, #0
    2f2a:	d016      	beq.n	2f5a <tfp_format+0x2ca>
    2f2c:	4643      	mov	r3, r8
    2f2e:	e002      	b.n	2f36 <tfp_format+0x2a6>
    2f30:	3301      	adds	r3, #1
    2f32:	2c00      	cmp	r4, #0
    2f34:	d011      	beq.n	2f5a <tfp_format+0x2ca>
    2f36:	781a      	ldrb	r2, [r3, #0]
    n--;
    2f38:	3c01      	subs	r4, #1
static void putchw(void* putp,putcf putf,int n, char z, char* bf)
{
  char fc=z? '0' : ' ';
  char ch;
  char* p=bf;
  while (*p++ && n > 0)
    2f3a:	2a00      	cmp	r2, #0
    2f3c:	d1f8      	bne.n	2f30 <tfp_format+0x2a0>
    n--;
  while (n-- > 0)
    2f3e:	1e65      	subs	r5, r4, #1
    2f40:	2c00      	cmp	r4, #0
    2f42:	d00a      	beq.n	2f5a <tfp_format+0x2ca>
    putf(putp,fc);
    2f44:	1c30      	adds	r0, r6, #0
    2f46:	2120      	movs	r1, #32
  char fc=z? '0' : ' ';
  char ch;
  char* p=bf;
  while (*p++ && n > 0)
    n--;
  while (n-- > 0)
    2f48:	3d01      	subs	r5, #1
    putf(putp,fc);
    2f4a:	47b8      	blx	r7
    2f4c:	1c6b      	adds	r3, r5, #1
  char fc=z? '0' : ' ';
  char ch;
  char* p=bf;
  while (*p++ && n > 0)
    n--;
  while (n-- > 0)
    2f4e:	2b00      	cmp	r3, #0
    2f50:	dcf8      	bgt.n	2f44 <tfp_format+0x2b4>
    2f52:	4653      	mov	r3, sl
    2f54:	7819      	ldrb	r1, [r3, #0]
    putf(putp,fc);
  while ((ch= *bf++))
    2f56:	2900      	cmp	r1, #0
    2f58:	d007      	beq.n	2f6a <tfp_format+0x2da>
    2f5a:	4645      	mov	r5, r8
    putf(putp,ch);
    2f5c:	1c30      	adds	r0, r6, #0
    2f5e:	3501      	adds	r5, #1
    2f60:	47b8      	blx	r7
    2f62:	1e6b      	subs	r3, r5, #1
  char* p=bf;
  while (*p++ && n > 0)
    n--;
  while (n-- > 0)
    putf(putp,fc);
  while ((ch= *bf++))
    2f64:	7819      	ldrb	r1, [r3, #0]
    2f66:	2900      	cmp	r1, #0
    2f68:	d1f8      	bne.n	2f5c <tfp_format+0x2cc>
        break;
      case 'c' :
        putf(putp,(char)(va_arg(va, int)));
        break;
      case 's' :
        putchw(putp,putf,w,0,va_arg(va, char*));
    2f6a:	464d      	mov	r5, r9
    2f6c:	e69b      	b.n	2ca6 <tfp_format+0x16>
      if (ch=='l') {
        ch=*(fmt++);
        lng=1;
      }
      #endif
      switch (ch) {
    2f6e:	2b78      	cmp	r3, #120	; 0x78
    2f70:	d000      	beq.n	2f74 <tfp_format+0x2e4>
    2f72:	e698      	b.n	2ca6 <tfp_format+0x16>
        #ifdef  PRINTF_LONG_SUPPORT
        if (lng)
          uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
        else
        #endif
        ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
    2f74:	1d2b      	adds	r3, r5, #4
    2f76:	9303      	str	r3, [sp, #12]
    2f78:	682b      	ldr	r3, [r5, #0]

static void ui2a(unsigned int num, unsigned int base, int uc,char * bf)
{
  int n=0;
  unsigned int d=1;
  while (num/d >= base)
    2f7a:	2501      	movs	r5, #1
        #ifdef  PRINTF_LONG_SUPPORT
        if (lng)
          uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
        else
        #endif
        ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
    2f7c:	4698      	mov	r8, r3

static void ui2a(unsigned int num, unsigned int base, int uc,char * bf)
{
  int n=0;
  unsigned int d=1;
  while (num/d >= base)
    2f7e:	2b0f      	cmp	r3, #15
    2f80:	d90f      	bls.n	2fa2 <tfp_format+0x312>
    2f82:	1c23      	adds	r3, r4, #0
    2f84:	4644      	mov	r4, r8
    2f86:	4698      	mov	r8, r3
    d*=base;
    2f88:	012d      	lsls	r5, r5, #4

static void ui2a(unsigned int num, unsigned int base, int uc,char * bf)
{
  int n=0;
  unsigned int d=1;
  while (num/d >= base)
    2f8a:	1c20      	adds	r0, r4, #0
    2f8c:	1c29      	adds	r1, r5, #0
    2f8e:	f7fd fb0f 	bl	5b0 <__aeabi_uidiv>
    2f92:	280f      	cmp	r0, #15
    2f94:	d8f8      	bhi.n	2f88 <tfp_format+0x2f8>
    2f96:	4643      	mov	r3, r8
    2f98:	46a0      	mov	r8, r4
    2f9a:	1c1c      	adds	r4, r3, #0
    d*=base;
  while (d!=0) {
    2f9c:	2d00      	cmp	r5, #0
    2f9e:	d100      	bne.n	2fa2 <tfp_format+0x312>
    2fa0:	e107      	b.n	31b2 <tfp_format+0x522>
    2fa2:	464b      	mov	r3, r9
    2fa4:	2b58      	cmp	r3, #88	; 0x58
    2fa6:	d051      	beq.n	304c <tfp_format+0x3bc>
#endif

static void ui2a(unsigned int num, unsigned int base, int uc,char * bf)
{
  int n=0;
  unsigned int d=1;
    2fa8:	ab07      	add	r3, sp, #28
    2faa:	1c32      	adds	r2, r6, #0
    2fac:	9302      	str	r3, [sp, #8]
    2fae:	469a      	mov	sl, r3
    2fb0:	2300      	movs	r3, #0
    2fb2:	4646      	mov	r6, r8
    2fb4:	46b9      	mov	r9, r7
    2fb6:	4690      	mov	r8, r2
    2fb8:	1c1f      	adds	r7, r3, #0
    2fba:	9404      	str	r4, [sp, #16]
  while (num/d >= base)
    d*=base;
  while (d!=0) {
    int dgt = num / d;
    2fbc:	1c29      	adds	r1, r5, #0
    2fbe:	1c30      	adds	r0, r6, #0
    2fc0:	f7fd faf6 	bl	5b0 <__aeabi_uidiv>
    num%= d;
    2fc4:	1c29      	adds	r1, r5, #0
  int n=0;
  unsigned int d=1;
  while (num/d >= base)
    d*=base;
  while (d!=0) {
    int dgt = num / d;
    2fc6:	1c04      	adds	r4, r0, #0
    num%= d;
    2fc8:	1c30      	adds	r0, r6, #0
    2fca:	f7fd fb77 	bl	6bc <__aeabi_uidivmod>
    d/=base;
    2fce:	092d      	lsrs	r5, r5, #4
  unsigned int d=1;
  while (num/d >= base)
    d*=base;
  while (d!=0) {
    int dgt = num / d;
    num%= d;
    2fd0:	1c0e      	adds	r6, r1, #0
    d/=base;
    if (n || dgt>0 || d==0) {
    2fd2:	2f00      	cmp	r7, #0
    2fd4:	d102      	bne.n	2fdc <tfp_format+0x34c>
    2fd6:	2c00      	cmp	r4, #0
    2fd8:	dc00      	bgt.n	2fdc <tfp_format+0x34c>
    2fda:	e09e      	b.n	311a <tfp_format+0x48a>
      *bf++ = dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10);
    2fdc:	4653      	mov	r3, sl
    2fde:	2230      	movs	r2, #48	; 0x30
    2fe0:	3301      	adds	r3, #1
    2fe2:	2c09      	cmp	r4, #9
    2fe4:	dd00      	ble.n	2fe8 <tfp_format+0x358>
    2fe6:	2257      	movs	r2, #87	; 0x57
    2fe8:	1914      	adds	r4, r2, r4
    2fea:	4652      	mov	r2, sl
      ++n;
    2fec:	3701      	adds	r7, #1
  while (d!=0) {
    int dgt = num / d;
    num%= d;
    d/=base;
    if (n || dgt>0 || d==0) {
      *bf++ = dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10);
    2fee:	7014      	strb	r4, [r2, #0]
{
  int n=0;
  unsigned int d=1;
  while (num/d >= base)
    d*=base;
  while (d!=0) {
    2ff0:	2d00      	cmp	r5, #0
    2ff2:	d100      	bne.n	2ff6 <tfp_format+0x366>
    2ff4:	e0e0      	b.n	31b8 <tfp_format+0x528>
#endif

static void ui2a(unsigned int num, unsigned int base, int uc,char * bf)
{
  int n=0;
  unsigned int d=1;
    2ff6:	469a      	mov	sl, r3
    2ff8:	e7e0      	b.n	2fbc <tfp_format+0x32c>
        break;
      case 's' :
        putchw(putp,putf,w,0,va_arg(va, char*));
        break;
      case '%' :
        putf(putp,ch);
    2ffa:	1c30      	adds	r0, r6, #0
    2ffc:	2125      	movs	r1, #37	; 0x25
    2ffe:	47b8      	blx	r7
    3000:	e651      	b.n	2ca6 <tfp_format+0x16>
    3002:	464e      	mov	r6, r9
    3004:	4657      	mov	r7, sl
    3006:	9c05      	ldr	r4, [sp, #20]
    if (n || dgt>0 || d==0) {
      *bf++ = dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10);
      ++n;
    }
  }
  *bf=0;
    3008:	2300      	movs	r3, #0
    300a:	7013      	strb	r3, [r2, #0]
  return ch;
}

static void putchw(void* putp,putcf putf,int n, char z, char* bf)
{
  char fc=z? '0' : ' ';
    300c:	2330      	movs	r3, #48	; 0x30
    300e:	4698      	mov	r8, r3
    3010:	9b01      	ldr	r3, [sp, #4]
    3012:	2b00      	cmp	r3, #0
    3014:	d101      	bne.n	301a <tfp_format+0x38a>
    3016:	2320      	movs	r3, #32
    3018:	4698      	mov	r8, r3
  char ch;
  char* p=bf;
  while (*p++ && n > 0)
    301a:	9b02      	ldr	r3, [sp, #8]
    301c:	781d      	ldrb	r5, [r3, #0]
    301e:	2d00      	cmp	r5, #0
    3020:	d106      	bne.n	3030 <tfp_format+0x3a0>
    3022:	e0e1      	b.n	31e8 <tfp_format+0x558>
    3024:	785a      	ldrb	r2, [r3, #1]
    n--;
    3026:	3c01      	subs	r4, #1
static void putchw(void* putp,putcf putf,int n, char z, char* bf)
{
  char fc=z? '0' : ' ';
  char ch;
  char* p=bf;
  while (*p++ && n > 0)
    3028:	2a00      	cmp	r2, #0
    302a:	d100      	bne.n	302e <tfp_format+0x39e>
    302c:	e08e      	b.n	314c <tfp_format+0x4bc>
    302e:	3301      	adds	r3, #1
    3030:	2c00      	cmp	r4, #0
    3032:	d1f7      	bne.n	3024 <tfp_format+0x394>
    3034:	1c29      	adds	r1, r5, #0
    3036:	ab06      	add	r3, sp, #24
    3038:	1d5c      	adds	r4, r3, #5
    n--;
  while (n-- > 0)
    putf(putp,fc);
  while ((ch= *bf++))
    putf(putp,ch);
    303a:	1c30      	adds	r0, r6, #0
    303c:	3401      	adds	r4, #1
    303e:	47b8      	blx	r7
    3040:	1e63      	subs	r3, r4, #1
  char* p=bf;
  while (*p++ && n > 0)
    n--;
  while (n-- > 0)
    putf(putp,fc);
  while ((ch= *bf++))
    3042:	7819      	ldrb	r1, [r3, #0]
    3044:	2900      	cmp	r1, #0
    3046:	d1f8      	bne.n	303a <tfp_format+0x3aa>
        #ifdef  PRINTF_LONG_SUPPORT
        if (lng)
          uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
        else
        #endif
        ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
    3048:	9d03      	ldr	r5, [sp, #12]
    304a:	e62c      	b.n	2ca6 <tfp_format+0x16>
    d*=base;
  while (d!=0) {
    int dgt = num / d;
    num%= d;
    d/=base;
    if (n || dgt>0 || d==0) {
    304c:	ab07      	add	r3, sp, #28
    304e:	1c32      	adds	r2, r6, #0
    3050:	9302      	str	r3, [sp, #8]
    3052:	469a      	mov	sl, r3
    3054:	2300      	movs	r3, #0
    3056:	4646      	mov	r6, r8
    3058:	46b9      	mov	r9, r7
    305a:	4690      	mov	r8, r2
    305c:	1c1f      	adds	r7, r3, #0
    305e:	9404      	str	r4, [sp, #16]
  int n=0;
  unsigned int d=1;
  while (num/d >= base)
    d*=base;
  while (d!=0) {
    int dgt = num / d;
    3060:	1c29      	adds	r1, r5, #0
    3062:	1c30      	adds	r0, r6, #0
    3064:	f7fd faa4 	bl	5b0 <__aeabi_uidiv>
    num%= d;
    3068:	1c29      	adds	r1, r5, #0
  int n=0;
  unsigned int d=1;
  while (num/d >= base)
    d*=base;
  while (d!=0) {
    int dgt = num / d;
    306a:	1c04      	adds	r4, r0, #0
    num%= d;
    306c:	1c30      	adds	r0, r6, #0
    306e:	f7fd fb25 	bl	6bc <__aeabi_uidivmod>
    d/=base;
    3072:	092d      	lsrs	r5, r5, #4
  unsigned int d=1;
  while (num/d >= base)
    d*=base;
  while (d!=0) {
    int dgt = num / d;
    num%= d;
    3074:	1c0e      	adds	r6, r1, #0
    d/=base;
    if (n || dgt>0 || d==0) {
    3076:	2f00      	cmp	r7, #0
    3078:	d101      	bne.n	307e <tfp_format+0x3ee>
    307a:	2c00      	cmp	r4, #0
    307c:	dd20      	ble.n	30c0 <tfp_format+0x430>
      *bf++ = dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10);
    307e:	4653      	mov	r3, sl
    3080:	2230      	movs	r2, #48	; 0x30
    3082:	3301      	adds	r3, #1
    3084:	2c09      	cmp	r4, #9
    3086:	dd00      	ble.n	308a <tfp_format+0x3fa>
    3088:	2237      	movs	r2, #55	; 0x37
    308a:	1914      	adds	r4, r2, r4
    308c:	4652      	mov	r2, sl
      ++n;
    308e:	3701      	adds	r7, #1
  while (d!=0) {
    int dgt = num / d;
    num%= d;
    d/=base;
    if (n || dgt>0 || d==0) {
      *bf++ = dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10);
    3090:	7014      	strb	r4, [r2, #0]
{
  int n=0;
  unsigned int d=1;
  while (num/d >= base)
    d*=base;
  while (d!=0) {
    3092:	2d00      	cmp	r5, #0
    3094:	d100      	bne.n	3098 <tfp_format+0x408>
    3096:	e08f      	b.n	31b8 <tfp_format+0x528>
    int dgt = num / d;
    num%= d;
    d/=base;
    if (n || dgt>0 || d==0) {
    3098:	469a      	mov	sl, r3
    309a:	e7e1      	b.n	3060 <tfp_format+0x3d0>
}

static void i2a (int num, char * bf)
{
  if (num<0) {
    num=-num;
    309c:	425b      	negs	r3, r3
    309e:	4698      	mov	r8, r3
    *bf++ = '-';
    30a0:	ab07      	add	r3, sp, #28
    30a2:	1c1a      	adds	r2, r3, #0
    30a4:	9302      	str	r3, [sp, #8]
    30a6:	232d      	movs	r3, #45	; 0x2d
    30a8:	7013      	strb	r3, [r2, #0]
    30aa:	ab06      	add	r3, sp, #24
    30ac:	3305      	adds	r3, #5
    30ae:	9304      	str	r3, [sp, #16]
    30b0:	e6ec      	b.n	2e8c <tfp_format+0x1fc>
    d*=base;
  while (d!=0) {
    int dgt = num / d;
    num%= d;
    d/=base;
    if (n || dgt>0 || d==0) {
    30b2:	4642      	mov	r2, r8
    30b4:	2800      	cmp	r0, #0
    30b6:	d000      	beq.n	30ba <tfp_format+0x42a>
    30b8:	e728      	b.n	2f0c <tfp_format+0x27c>
      *bf++ = dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10);
    30ba:	3201      	adds	r2, #1
    30bc:	2330      	movs	r3, #48	; 0x30
    30be:	e71f      	b.n	2f00 <tfp_format+0x270>
    d*=base;
  while (d!=0) {
    int dgt = num / d;
    num%= d;
    d/=base;
    if (n || dgt>0 || d==0) {
    30c0:	2d00      	cmp	r5, #0
    30c2:	d16f      	bne.n	31a4 <tfp_format+0x514>
    30c4:	464f      	mov	r7, r9
    30c6:	46a1      	mov	r9, r4
      *bf++ = dgt+(dgt<10 ? '0' : (uc ? 'A' : 'a')-10);
    30c8:	464a      	mov	r2, r9
    30ca:	4653      	mov	r3, sl
    30cc:	4651      	mov	r1, sl
    30ce:	4646      	mov	r6, r8
    30d0:	3230      	adds	r2, #48	; 0x30
    30d2:	9c04      	ldr	r4, [sp, #16]
    30d4:	3301      	adds	r3, #1
    30d6:	700a      	strb	r2, [r1, #0]
      ++n;
    }
  }
  *bf=0;
    30d8:	2200      	movs	r2, #0
    30da:	701a      	strb	r2, [r3, #0]
  return ch;
}

static void putchw(void* putp,putcf putf,int n, char z, char* bf)
{
  char fc=z? '0' : ' ';
    30dc:	2330      	movs	r3, #48	; 0x30
    30de:	4698      	mov	r8, r3
    30e0:	9b01      	ldr	r3, [sp, #4]
    30e2:	2b00      	cmp	r3, #0
    30e4:	d101      	bne.n	30ea <tfp_format+0x45a>
    30e6:	2320      	movs	r3, #32
    30e8:	4698      	mov	r8, r3
  char ch;
  char* p=bf;
  while (*p++ && n > 0)
    30ea:	9b02      	ldr	r3, [sp, #8]
    30ec:	781d      	ldrb	r5, [r3, #0]
    30ee:	2d00      	cmp	r5, #0
    30f0:	d105      	bne.n	30fe <tfp_format+0x46e>
    30f2:	e067      	b.n	31c4 <tfp_format+0x534>
    30f4:	785a      	ldrb	r2, [r3, #1]
    n--;
    30f6:	3c01      	subs	r4, #1
static void putchw(void* putp,putcf putf,int n, char z, char* bf)
{
  char fc=z? '0' : ' ';
  char ch;
  char* p=bf;
  while (*p++ && n > 0)
    30f8:	2a00      	cmp	r2, #0
    30fa:	d013      	beq.n	3124 <tfp_format+0x494>
    30fc:	3301      	adds	r3, #1
    30fe:	2c00      	cmp	r4, #0
    3100:	d1f8      	bne.n	30f4 <tfp_format+0x464>
    3102:	1c29      	adds	r1, r5, #0
    3104:	ab06      	add	r3, sp, #24
    3106:	1d5c      	adds	r4, r3, #5
    n--;
  while (n-- > 0)
    putf(putp,fc);
  while ((ch= *bf++))
    putf(putp,ch);
    3108:	1c30      	adds	r0, r6, #0
    310a:	3401      	adds	r4, #1
    310c:	47b8      	blx	r7
    310e:	1e63      	subs	r3, r4, #1
  char* p=bf;
  while (*p++ && n > 0)
    n--;
  while (n-- > 0)
    putf(putp,fc);
  while ((ch= *bf++))
    3110:	7819      	ldrb	r1, [r3, #0]
    3112:	2900      	cmp	r1, #0
    3114:	d1f8      	bne.n	3108 <tfp_format+0x478>
        #ifdef  PRINTF_LONG_SUPPORT
        if (lng)
          uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
        else
        #endif
        ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
    3116:	9d03      	ldr	r5, [sp, #12]
    3118:	e5c5      	b.n	2ca6 <tfp_format+0x16>
    d*=base;
  while (d!=0) {
    int dgt = num / d;
    num%= d;
    d/=base;
    if (n || dgt>0 || d==0) {
    311a:	2d00      	cmp	r5, #0
    311c:	d0d2      	beq.n	30c4 <tfp_format+0x434>
    311e:	4653      	mov	r3, sl
#endif

static void ui2a(unsigned int num, unsigned int base, int uc,char * bf)
{
  int n=0;
  unsigned int d=1;
    3120:	469a      	mov	sl, r3
    3122:	e74b      	b.n	2fbc <tfp_format+0x32c>
  char fc=z? '0' : ' ';
  char ch;
  char* p=bf;
  while (*p++ && n > 0)
    n--;
  while (n-- > 0)
    3124:	1e63      	subs	r3, r4, #1
    3126:	4699      	mov	r9, r3
    3128:	2c00      	cmp	r4, #0
    312a:	d0ea      	beq.n	3102 <tfp_format+0x472>
    312c:	1c2b      	adds	r3, r5, #0
    312e:	464c      	mov	r4, r9
    3130:	4645      	mov	r5, r8
    3132:	4698      	mov	r8, r3
    putf(putp,fc);
    3134:	1c30      	adds	r0, r6, #0
    3136:	1c29      	adds	r1, r5, #0
  char fc=z? '0' : ' ';
  char ch;
  char* p=bf;
  while (*p++ && n > 0)
    n--;
  while (n-- > 0)
    3138:	3c01      	subs	r4, #1
    putf(putp,fc);
    313a:	47b8      	blx	r7
    313c:	1c63      	adds	r3, r4, #1
  char fc=z? '0' : ' ';
  char ch;
  char* p=bf;
  while (*p++ && n > 0)
    n--;
  while (n-- > 0)
    313e:	2b00      	cmp	r3, #0
    3140:	dcf8      	bgt.n	3134 <tfp_format+0x4a4>
    3142:	4645      	mov	r5, r8
    putf(putp,fc);
  while ((ch= *bf++))
    3144:	2d00      	cmp	r5, #0
    3146:	d1dc      	bne.n	3102 <tfp_format+0x472>
        #ifdef  PRINTF_LONG_SUPPORT
        if (lng)
          uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
        else
        #endif
        ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
    3148:	9d03      	ldr	r5, [sp, #12]
    314a:	e5ac      	b.n	2ca6 <tfp_format+0x16>
  char fc=z? '0' : ' ';
  char ch;
  char* p=bf;
  while (*p++ && n > 0)
    n--;
  while (n-- > 0)
    314c:	1e63      	subs	r3, r4, #1
    314e:	4699      	mov	r9, r3
    3150:	2c00      	cmp	r4, #0
    3152:	d100      	bne.n	3156 <tfp_format+0x4c6>
    3154:	e76e      	b.n	3034 <tfp_format+0x3a4>
    3156:	1c2b      	adds	r3, r5, #0
    3158:	464c      	mov	r4, r9
    315a:	4645      	mov	r5, r8
    315c:	4698      	mov	r8, r3
    putf(putp,fc);
    315e:	1c30      	adds	r0, r6, #0
    3160:	1c29      	adds	r1, r5, #0
  char fc=z? '0' : ' ';
  char ch;
  char* p=bf;
  while (*p++ && n > 0)
    n--;
  while (n-- > 0)
    3162:	3c01      	subs	r4, #1
    putf(putp,fc);
    3164:	47b8      	blx	r7
    3166:	1c63      	adds	r3, r4, #1
  char fc=z? '0' : ' ';
  char ch;
  char* p=bf;
  while (*p++ && n > 0)
    n--;
  while (n-- > 0)
    3168:	2b00      	cmp	r3, #0
    316a:	dcf8      	bgt.n	315e <tfp_format+0x4ce>
    316c:	4645      	mov	r5, r8
    putf(putp,fc);
  while ((ch= *bf++))
    316e:	2d00      	cmp	r5, #0
    3170:	d000      	beq.n	3174 <tfp_format+0x4e4>
    3172:	e75f      	b.n	3034 <tfp_format+0x3a4>
        #ifdef  PRINTF_LONG_SUPPORT
        if (lng)
          uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
        else
        #endif
        ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
    3174:	9d03      	ldr	r5, [sp, #12]
    3176:	e596      	b.n	2ca6 <tfp_format+0x16>
  char fc=z? '0' : ' ';
  char ch;
  char* p=bf;
  while (*p++ && n > 0)
    n--;
  while (n-- > 0)
    3178:	1e63      	subs	r3, r4, #1
    317a:	4699      	mov	r9, r3
    317c:	2c00      	cmp	r4, #0
    317e:	d100      	bne.n	3182 <tfp_format+0x4f2>
    3180:	e630      	b.n	2de4 <tfp_format+0x154>
    3182:	1c2b      	adds	r3, r5, #0
    3184:	464c      	mov	r4, r9
    3186:	4645      	mov	r5, r8
    3188:	4698      	mov	r8, r3
    putf(putp,fc);
    318a:	1c30      	adds	r0, r6, #0
    318c:	1c29      	adds	r1, r5, #0
  char fc=z? '0' : ' ';
  char ch;
  char* p=bf;
  while (*p++ && n > 0)
    n--;
  while (n-- > 0)
    318e:	3c01      	subs	r4, #1
    putf(putp,fc);
    3190:	47b8      	blx	r7
    3192:	1c63      	adds	r3, r4, #1
  char fc=z? '0' : ' ';
  char ch;
  char* p=bf;
  while (*p++ && n > 0)
    n--;
  while (n-- > 0)
    3194:	2b00      	cmp	r3, #0
    3196:	dcf8      	bgt.n	318a <tfp_format+0x4fa>
    3198:	4645      	mov	r5, r8
    putf(putp,fc);
  while ((ch= *bf++))
    319a:	2d00      	cmp	r5, #0
    319c:	d000      	beq.n	31a0 <tfp_format+0x510>
    319e:	e621      	b.n	2de4 <tfp_format+0x154>
        #ifdef  PRINTF_LONG_SUPPORT
        if (lng)
          uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
        else
        #endif
        ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
    31a0:	9d03      	ldr	r5, [sp, #12]
    31a2:	e580      	b.n	2ca6 <tfp_format+0x16>
    d*=base;
  while (d!=0) {
    int dgt = num / d;
    num%= d;
    d/=base;
    if (n || dgt>0 || d==0) {
    31a4:	4653      	mov	r3, sl
    31a6:	469a      	mov	sl, r3
    31a8:	e75a      	b.n	3060 <tfp_format+0x3d0>
{
  int n=0;
  unsigned int d=1;
  while (num/d >= base)
    d*=base;
  while (d!=0) {
    31aa:	ab07      	add	r3, sp, #28
    31ac:	9302      	str	r3, [sp, #8]
    31ae:	1c1a      	adds	r2, r3, #0
    31b0:	e602      	b.n	2db8 <tfp_format+0x128>
    31b2:	ab07      	add	r3, sp, #28
    31b4:	9302      	str	r3, [sp, #8]
    31b6:	e78f      	b.n	30d8 <tfp_format+0x448>
    31b8:	9c04      	ldr	r4, [sp, #16]
    31ba:	4646      	mov	r6, r8
    31bc:	464f      	mov	r7, r9
    31be:	e78b      	b.n	30d8 <tfp_format+0x448>
    31c0:	9a04      	ldr	r2, [sp, #16]
    31c2:	e721      	b.n	3008 <tfp_format+0x378>
  char fc=z? '0' : ' ';
  char ch;
  char* p=bf;
  while (*p++ && n > 0)
    n--;
  while (n-- > 0)
    31c4:	1e63      	subs	r3, r4, #1
    31c6:	4699      	mov	r9, r3
    31c8:	2c00      	cmp	r4, #0
    31ca:	d1af      	bne.n	312c <tfp_format+0x49c>
        #ifdef  PRINTF_LONG_SUPPORT
        if (lng)
          uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
        else
        #endif
        ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
    31cc:	9d03      	ldr	r5, [sp, #12]
    31ce:	e56a      	b.n	2ca6 <tfp_format+0x16>
  char fc=z? '0' : ' ';
  char ch;
  char* p=bf;
  while (*p++ && n > 0)
    n--;
  while (n-- > 0)
    31d0:	1e65      	subs	r5, r4, #1
    31d2:	2c00      	cmp	r4, #0
    31d4:	d000      	beq.n	31d8 <tfp_format+0x548>
    31d6:	e6b5      	b.n	2f44 <tfp_format+0x2b4>
        break;
      case 'c' :
        putf(putp,(char)(va_arg(va, int)));
        break;
      case 's' :
        putchw(putp,putf,w,0,va_arg(va, char*));
    31d8:	464d      	mov	r5, r9
    31da:	e564      	b.n	2ca6 <tfp_format+0x16>
  char fc=z? '0' : ' ';
  char ch;
  char* p=bf;
  while (*p++ && n > 0)
    n--;
  while (n-- > 0)
    31dc:	1e63      	subs	r3, r4, #1
    31de:	4699      	mov	r9, r3
    31e0:	2c00      	cmp	r4, #0
    31e2:	d1ce      	bne.n	3182 <tfp_format+0x4f2>
        #ifdef  PRINTF_LONG_SUPPORT
        if (lng)
          uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
        else
        #endif
        ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
    31e4:	9d03      	ldr	r5, [sp, #12]
    31e6:	e55e      	b.n	2ca6 <tfp_format+0x16>
  char fc=z? '0' : ' ';
  char ch;
  char* p=bf;
  while (*p++ && n > 0)
    n--;
  while (n-- > 0)
    31e8:	1e63      	subs	r3, r4, #1
    31ea:	4699      	mov	r9, r3
    31ec:	2c00      	cmp	r4, #0
    31ee:	d1b2      	bne.n	3156 <tfp_format+0x4c6>
        #ifdef  PRINTF_LONG_SUPPORT
        if (lng)
          uli2a(va_arg(va, unsigned long int),16,(ch=='X'),bf);
        else
        #endif
        ui2a(va_arg(va, unsigned int),16,(ch=='X'),bf);
    31f0:	9d03      	ldr	r5, [sp, #12]
    31f2:	e558      	b.n	2ca6 <tfp_format+0x16>
    31f4:	46c0      	nop			; (mov r8, r8)
    31f6:	46c0      	nop			; (mov r8, r8)
    31f8:	46c0      	nop			; (mov r8, r8)
    31fa:	46c0      	nop			; (mov r8, r8)
    31fc:	46c0      	nop			; (mov r8, r8)
    31fe:	46c0      	nop			; (mov r8, r8)

00003200 <init_printf>:
}


void init_printf(void* putp,void (*putf) (void*,char))
{
  stdout_putf=putf;
    3200:	4b02      	ldr	r3, [pc, #8]	; (320c <init_printf+0xc>)
    3202:	6019      	str	r1, [r3, #0]
  stdout_putp=putp;
    3204:	4b02      	ldr	r3, [pc, #8]	; (3210 <init_printf+0x10>)
    3206:	6018      	str	r0, [r3, #0]
}
    3208:	4770      	bx	lr
    320a:	46c0      	nop			; (mov r8, r8)
    320c:	20000b10 	.word	0x20000b10
    3210:	20000b14 	.word	0x20000b14
    3214:	46c0      	nop			; (mov r8, r8)
    3216:	46c0      	nop			; (mov r8, r8)
    3218:	46c0      	nop			; (mov r8, r8)
    321a:	46c0      	nop			; (mov r8, r8)
    321c:	46c0      	nop			; (mov r8, r8)
    321e:	46c0      	nop			; (mov r8, r8)

00003220 <tfp_printf>:

void tfp_printf(char *fmt, ...)
{
    3220:	b40f      	push	{r0, r1, r2, r3}
    3222:	b500      	push	{lr}
  va_list va;
  va_start(va,fmt);
  tfp_format(stdout_putp,stdout_putf,fmt,va);
    3224:	4906      	ldr	r1, [pc, #24]	; (3240 <tfp_printf+0x20>)
  stdout_putf=putf;
  stdout_putp=putp;
}

void tfp_printf(char *fmt, ...)
{
    3226:	b083      	sub	sp, #12
    3228:	ab04      	add	r3, sp, #16
  va_list va;
  va_start(va,fmt);
  tfp_format(stdout_putp,stdout_putf,fmt,va);
    322a:	6808      	ldr	r0, [r1, #0]
    322c:	4905      	ldr	r1, [pc, #20]	; (3244 <tfp_printf+0x24>)
  stdout_putf=putf;
  stdout_putp=putp;
}

void tfp_printf(char *fmt, ...)
{
    322e:	cb04      	ldmia	r3!, {r2}
  va_list va;
  va_start(va,fmt);
  tfp_format(stdout_putp,stdout_putf,fmt,va);
    3230:	6809      	ldr	r1, [r1, #0]
}

void tfp_printf(char *fmt, ...)
{
  va_list va;
  va_start(va,fmt);
    3232:	9301      	str	r3, [sp, #4]
  tfp_format(stdout_putp,stdout_putf,fmt,va);
    3234:	f7ff fd2c 	bl	2c90 <tfp_format>
  va_end(va);
}
    3238:	b003      	add	sp, #12
    323a:	bc08      	pop	{r3}
    323c:	b004      	add	sp, #16
    323e:	4718      	bx	r3
    3240:	20000b14 	.word	0x20000b14
    3244:	20000b10 	.word	0x20000b10
    3248:	46c0      	nop			; (mov r8, r8)
    324a:	46c0      	nop			; (mov r8, r8)
    324c:	46c0      	nop			; (mov r8, r8)
    324e:	46c0      	nop			; (mov r8, r8)

00003250 <FlashInit>:
/* End of file */
#endif

uint32_t FlashInit (PFLASH_SSD_CONFIG pSSDConfig)
{
    pSSDConfig->DFlashSize = 0x0U;
    3250:	2300      	movs	r3, #0
    3252:	6103      	str	r3, [r0, #16]
    pSSDConfig->EEESize = 0x0U;
    3254:	6183      	str	r3, [r0, #24]
    
    return(0x0000U);
}
    3256:	2000      	movs	r0, #0
    3258:	4770      	bx	lr
    325a:	46c0      	nop			; (mov r8, r8)
    325c:	46c0      	nop			; (mov r8, r8)
    325e:	46c0      	nop			; (mov r8, r8)

00003260 <FlashProgram>:
uint32_t SIZE_OPTIMIZATION FlashProgram(PFLASH_SSD_CONFIG pSSDConfig, \
                                   uint32_t dest, \
                                   uint32_t size, \
                                   uint8_t* pData, \
                                   pFLASHCOMMANDSEQUENCE pFlashCommandSequence)
{
    3260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3262:	4657      	mov	r7, sl
    3264:	4646      	mov	r6, r8
    3266:	1c04      	adds	r4, r0, #0
    3268:	b4c0      	push	{r6, r7}
    326a:	1c1d      	adds	r5, r3, #0
    326c:	1c17      	adds	r7, r2, #0
    uint32_t ret = FTFx_OK;      /* return code variable */
    uint8_t i;
    uint32_t temp;

    if (size & (PGM_SIZE_BYTE - 0x01U))
    326e:	0793      	lsls	r3, r2, #30
    3270:	d005      	beq.n	327e <FlashProgram+0x1e>
    {
       ret = FTFx_ERR_SIZE;
    3272:	2080      	movs	r0, #128	; 0x80
    3274:	0180      	lsls	r0, r0, #6
        ENTER_DEBUG_MODE;
    }
#endif

    return(ret);
}
    3276:	bc0c      	pop	{r2, r3}
    3278:	4690      	mov	r8, r2
    327a:	469a      	mov	sl, r3
    327c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            dest = dest - temp + 0x800000U;
        }
        else
#endif
        {
            temp = WORD2BYTE(pSSDConfig->PFlashBase);
    327e:	6846      	ldr	r6, [r0, #4]
    3280:	2020      	movs	r0, #32
            if((dest >= temp) && (dest < (temp + pSSDConfig->PFlashSize)))
    3282:	42b1      	cmp	r1, r6
    3284:	d3f7      	bcc.n	3276 <FlashProgram+0x16>
    3286:	68a3      	ldr	r3, [r4, #8]
    3288:	18f3      	adds	r3, r6, r3
    328a:	4299      	cmp	r1, r3
    328c:	d2f3      	bcs.n	3276 <FlashProgram+0x16>
            {
                dest -= temp;
    328e:	1b8e      	subs	r6, r1, r6
            else
            {
                ret = FTFx_ERR_ACCERR;
            }
        }
        while((size > 0x0U) && (FTFx_OK == ret))
    3290:	2a00      	cmp	r2, #0
    3292:	d02c      	beq.n	32ee <FlashProgram+0x8e>
        {
            /* clear RDCOLERR & ACCERR & FPVIOL flag in flash status register. Write 1 to clear*/
            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FSTAT_OFFSET;
            REG_WRITE(temp, FTFx_SSD_FSTAT_ERROR_BITS);
    3294:	2331      	movs	r3, #49	; 0x31
    3296:	469a      	mov	sl, r3
#if (PGM_SIZE_BYTE == FTFx_PHRASE_SIZE)
            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB0_OFFSET;
            REG_WRITE(temp, FTFx_PROGRAM_PHRASE);
#else
            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB0_OFFSET;
            REG_WRITE(temp, FTFx_PROGRAM_LONGWORD);
    3298:	2306      	movs	r3, #6
    329a:	4698      	mov	r8, r3
    329c:	e001      	b.n	32a2 <FlashProgram+0x42>
            else
            {
                ret = FTFx_ERR_ACCERR;
            }
        }
        while((size > 0x0U) && (FTFx_OK == ret))
    329e:	2800      	cmp	r0, #0
    32a0:	d1e9      	bne.n	3276 <FlashProgram+0x16>
        {
            /* clear RDCOLERR & ACCERR & FPVIOL flag in flash status register. Write 1 to clear*/
            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FSTAT_OFFSET;
            REG_WRITE(temp, FTFx_SSD_FSTAT_ERROR_BITS);
    32a2:	4651      	mov	r1, sl
    32a4:	6823      	ldr	r3, [r4, #0]
#else
            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB0_OFFSET;
            REG_WRITE(temp, FTFx_PROGRAM_LONGWORD);
#endif
            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB1_OFFSET;
            REG_WRITE(temp, GET_BIT_16_23(dest));
    32a6:	0c32      	lsrs	r2, r6, #16
        }
        while((size > 0x0U) && (FTFx_OK == ret))
        {
            /* clear RDCOLERR & ACCERR & FPVIOL flag in flash status register. Write 1 to clear*/
            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FSTAT_OFFSET;
            REG_WRITE(temp, FTFx_SSD_FSTAT_ERROR_BITS);
    32a8:	7019      	strb	r1, [r3, #0]
#if (PGM_SIZE_BYTE == FTFx_PHRASE_SIZE)
            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB0_OFFSET;
            REG_WRITE(temp, FTFx_PROGRAM_PHRASE);
#else
            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB0_OFFSET;
            REG_WRITE(temp, FTFx_PROGRAM_LONGWORD);
    32aa:	4641      	mov	r1, r8
            /* passing parameter to the command */
#if (PGM_SIZE_BYTE == FTFx_PHRASE_SIZE)
            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB0_OFFSET;
            REG_WRITE(temp, FTFx_PROGRAM_PHRASE);
#else
            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB0_OFFSET;
    32ac:	6823      	ldr	r3, [r4, #0]
            REG_WRITE(temp, FTFx_PROGRAM_LONGWORD);
#endif
            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB1_OFFSET;
            REG_WRITE(temp, GET_BIT_16_23(dest));
    32ae:	b2d2      	uxtb	r2, r2
#if (PGM_SIZE_BYTE == FTFx_PHRASE_SIZE)
            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB0_OFFSET;
            REG_WRITE(temp, FTFx_PROGRAM_PHRASE);
#else
            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB0_OFFSET;
            REG_WRITE(temp, FTFx_PROGRAM_LONGWORD);
    32b0:	71d9      	strb	r1, [r3, #7]
#endif
            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB1_OFFSET;
    32b2:	6821      	ldr	r1, [r4, #0]
            REG_WRITE(temp, GET_BIT_16_23(dest));
            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB2_OFFSET;
            REG_WRITE(temp, GET_BIT_8_15(dest));
    32b4:	0a33      	lsrs	r3, r6, #8
#else
            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB0_OFFSET;
            REG_WRITE(temp, FTFx_PROGRAM_LONGWORD);
#endif
            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB1_OFFSET;
            REG_WRITE(temp, GET_BIT_16_23(dest));
    32b6:	718a      	strb	r2, [r1, #6]
            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB2_OFFSET;
    32b8:	6822      	ldr	r2, [r4, #0]
            REG_WRITE(temp, GET_BIT_8_15(dest));
    32ba:	b2db      	uxtb	r3, r3
    32bc:	7153      	strb	r3, [r2, #5]
            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB3_OFFSET;
    32be:	6823      	ldr	r3, [r4, #0]
            REG_WRITE(temp, GET_BIT_0_7(dest));
    32c0:	b2f2      	uxtb	r2, r6
    32c2:	711a      	strb	r2, [r3, #4]

            for (i = 0x0U; i <  PGM_SIZE_BYTE; i++)
            {
                temp = pSSDConfig->ftfxRegBase + i + 0x08U;
                REG_WRITE(temp, *(pData + i));
    32c4:	782a      	ldrb	r2, [r5, #0]
            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB3_OFFSET;
            REG_WRITE(temp, GET_BIT_0_7(dest));

            for (i = 0x0U; i <  PGM_SIZE_BYTE; i++)
            {
                temp = pSSDConfig->ftfxRegBase + i + 0x08U;
    32c6:	6823      	ldr	r3, [r4, #0]
            ret = pFlashCommandSequence(pSSDConfig);

            /* update destination address for next iteration */
            dest += PGM_SIZE_BYTE;
            /* update size for next iteration */
            size -= PGM_SIZE_BYTE;
    32c8:	3f04      	subs	r7, #4
            REG_WRITE(temp, GET_BIT_0_7(dest));

            for (i = 0x0U; i <  PGM_SIZE_BYTE; i++)
            {
                temp = pSSDConfig->ftfxRegBase + i + 0x08U;
                REG_WRITE(temp, *(pData + i));
    32ca:	721a      	strb	r2, [r3, #8]
    32cc:	786a      	ldrb	r2, [r5, #1]
            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB3_OFFSET;
            REG_WRITE(temp, GET_BIT_0_7(dest));

            for (i = 0x0U; i <  PGM_SIZE_BYTE; i++)
            {
                temp = pSSDConfig->ftfxRegBase + i + 0x08U;
    32ce:	6823      	ldr	r3, [r4, #0]
                REG_WRITE(temp, *(pData + i));
            }

            /* calling flash command sequence function to execute the command */
            ret = pFlashCommandSequence(pSSDConfig);
    32d0:	1c20      	adds	r0, r4, #0
            REG_WRITE(temp, GET_BIT_0_7(dest));

            for (i = 0x0U; i <  PGM_SIZE_BYTE; i++)
            {
                temp = pSSDConfig->ftfxRegBase + i + 0x08U;
                REG_WRITE(temp, *(pData + i));
    32d2:	725a      	strb	r2, [r3, #9]
    32d4:	78aa      	ldrb	r2, [r5, #2]
            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB3_OFFSET;
            REG_WRITE(temp, GET_BIT_0_7(dest));

            for (i = 0x0U; i <  PGM_SIZE_BYTE; i++)
            {
                temp = pSSDConfig->ftfxRegBase + i + 0x08U;
    32d6:	6823      	ldr	r3, [r4, #0]

            /* calling flash command sequence function to execute the command */
            ret = pFlashCommandSequence(pSSDConfig);

            /* update destination address for next iteration */
            dest += PGM_SIZE_BYTE;
    32d8:	3604      	adds	r6, #4
            REG_WRITE(temp, GET_BIT_0_7(dest));

            for (i = 0x0U; i <  PGM_SIZE_BYTE; i++)
            {
                temp = pSSDConfig->ftfxRegBase + i + 0x08U;
                REG_WRITE(temp, *(pData + i));
    32da:	729a      	strb	r2, [r3, #10]
            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB3_OFFSET;
            REG_WRITE(temp, GET_BIT_0_7(dest));

            for (i = 0x0U; i <  PGM_SIZE_BYTE; i++)
            {
                temp = pSSDConfig->ftfxRegBase + i + 0x08U;
    32dc:	6823      	ldr	r3, [r4, #0]
                REG_WRITE(temp, *(pData + i));
    32de:	78ea      	ldrb	r2, [r5, #3]
            /* update destination address for next iteration */
            dest += PGM_SIZE_BYTE;
            /* update size for next iteration */
            size -= PGM_SIZE_BYTE;
                            /* increment the source address by 1 */
            pData += PGM_SIZE_BYTE;
    32e0:	3504      	adds	r5, #4
            REG_WRITE(temp, GET_BIT_0_7(dest));

            for (i = 0x0U; i <  PGM_SIZE_BYTE; i++)
            {
                temp = pSSDConfig->ftfxRegBase + i + 0x08U;
                REG_WRITE(temp, *(pData + i));
    32e2:	72da      	strb	r2, [r3, #11]
            }

            /* calling flash command sequence function to execute the command */
            ret = pFlashCommandSequence(pSSDConfig);
    32e4:	9b08      	ldr	r3, [sp, #32]
    32e6:	4798      	blx	r3
            else
            {
                ret = FTFx_ERR_ACCERR;
            }
        }
        while((size > 0x0U) && (FTFx_OK == ret))
    32e8:	2f00      	cmp	r7, #0
    32ea:	d1d8      	bne.n	329e <FlashProgram+0x3e>
    32ec:	e7c3      	b.n	3276 <FlashProgram+0x16>
                                   uint32_t dest, \
                                   uint32_t size, \
                                   uint8_t* pData, \
                                   pFLASHCOMMANDSEQUENCE pFlashCommandSequence)
{
    uint32_t ret = FTFx_OK;      /* return code variable */
    32ee:	2000      	movs	r0, #0
    32f0:	e7c1      	b.n	3276 <FlashProgram+0x16>
    32f2:	46c0      	nop			; (mov r8, r8)
    32f4:	46c0      	nop			; (mov r8, r8)
    32f6:	46c0      	nop			; (mov r8, r8)
    32f8:	46c0      	nop			; (mov r8, r8)
    32fa:	46c0      	nop			; (mov r8, r8)
    32fc:	46c0      	nop			; (mov r8, r8)
    32fe:	46c0      	nop			; (mov r8, r8)

00003300 <FlashProgramCheck>:
                                                uint32_t  size, \
                                                uint8_t*  pExpectedData, \
                                                uint32_t* pFailAddr, \
                                                uint8_t   marginLevel, \
                                                pFLASHCOMMANDSEQUENCE pFlashCommandSequence)
{
    3300:	b5f0      	push	{r4, r5, r6, r7, lr}
    3302:	465f      	mov	r7, fp
    3304:	4656      	mov	r6, sl
    3306:	464d      	mov	r5, r9
    3308:	4644      	mov	r4, r8
    330a:	b4f0      	push	{r4, r5, r6, r7}
    330c:	1c17      	adds	r7, r2, #0
    330e:	b083      	sub	sp, #12
    3310:	ae0c      	add	r6, sp, #48	; 0x30
    3312:	ce04      	ldmia	r6!, {r2}
    3314:	1c1d      	adds	r5, r3, #0
    3316:	7833      	ldrb	r3, [r6, #0]
    3318:	4693      	mov	fp, r2
    331a:	1c04      	adds	r4, r0, #0
    331c:	469a      	mov	sl, r3
    uint32_t offsetAddr ; /* offset address to convert to internal memory address */
    uint32_t temp;        /* temporary variable */
    uint8_t i;
    /* convert to byte address */
    dest = WORD2BYTE(dest);
    if (size & (PGMCHK_ALIGN_SIZE - 0x01U))
    331e:	07bb      	lsls	r3, r7, #30
    3320:	d008      	beq.n	3334 <FlashProgramCheck+0x34>
    {
        ret = FTFx_ERR_SIZE;
    3322:	2080      	movs	r0, #128	; 0x80
    3324:	0180      	lsls	r0, r0, #6
        ENTER_DEBUG_MODE;
    }
#endif

    return(ret);
}
    3326:	b003      	add	sp, #12
    3328:	bc3c      	pop	{r2, r3, r4, r5}
    332a:	4690      	mov	r8, r2
    332c:	4699      	mov	r9, r3
    332e:	46a2      	mov	sl, r4
    3330:	46ab      	mov	fp, r5
    3332:	bdf0      	pop	{r4, r5, r6, r7, pc}
            dest = dest - offsetAddr + 0x800000U;
        }
        else
#endif
        {
            offsetAddr = WORD2BYTE(pSSDConfig->PFlashBase);
    3334:	6843      	ldr	r3, [r0, #4]
    3336:	2020      	movs	r0, #32
    3338:	9301      	str	r3, [sp, #4]
            if((dest >= offsetAddr) && (dest < offsetAddr + pSSDConfig->PFlashSize))
    333a:	4299      	cmp	r1, r3
    333c:	d3f3      	bcc.n	3326 <FlashProgramCheck+0x26>
    333e:	1c1a      	adds	r2, r3, #0
    3340:	4694      	mov	ip, r2
    3342:	68a3      	ldr	r3, [r4, #8]
    3344:	4463      	add	r3, ip
    3346:	4299      	cmp	r1, r3
    3348:	d2ed      	bcs.n	3326 <FlashProgramCheck+0x26>
            {
                dest -= offsetAddr;
    334a:	1a8e      	subs	r6, r1, r2
            {
                ret = FTFx_ERR_ACCERR;
                size = 0x0U;
            }
        }
        while (size)
    334c:	2f00      	cmp	r7, #0
    334e:	d0ea      	beq.n	3326 <FlashProgramCheck+0x26>
        {
            /* clear RDCOLERR & ACCERR & FPVIOL flag in flash status register. Write 1 to clear*/
            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FSTAT_OFFSET;
            REG_WRITE(temp, FTFx_SSD_FSTAT_ERROR_BITS);
    3350:	2331      	movs	r3, #49	; 0x31
    3352:	4699      	mov	r9, r3

            /* passing parameter to the command */
            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB0_OFFSET;
            REG_WRITE(temp, FTFx_PROGRAM_CHECK);
    3354:	2302      	movs	r3, #2
    3356:	4698      	mov	r8, r3
        }
        while (size)
        {
            /* clear RDCOLERR & ACCERR & FPVIOL flag in flash status register. Write 1 to clear*/
            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FSTAT_OFFSET;
            REG_WRITE(temp, FTFx_SSD_FSTAT_ERROR_BITS);
    3358:	4649      	mov	r1, r9
    335a:	6822      	ldr	r2, [r4, #0]
            /* passing parameter to the command */
            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB0_OFFSET;
            REG_WRITE(temp, FTFx_PROGRAM_CHECK);

            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB1_OFFSET;
            REG_WRITE(temp, GET_BIT_16_23(dest));
    335c:	0c33      	lsrs	r3, r6, #16
        }
        while (size)
        {
            /* clear RDCOLERR & ACCERR & FPVIOL flag in flash status register. Write 1 to clear*/
            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FSTAT_OFFSET;
            REG_WRITE(temp, FTFx_SSD_FSTAT_ERROR_BITS);
    335e:	7011      	strb	r1, [r2, #0]

            /* passing parameter to the command */
            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB0_OFFSET;
            REG_WRITE(temp, FTFx_PROGRAM_CHECK);
    3360:	4641      	mov	r1, r8
            /* clear RDCOLERR & ACCERR & FPVIOL flag in flash status register. Write 1 to clear*/
            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FSTAT_OFFSET;
            REG_WRITE(temp, FTFx_SSD_FSTAT_ERROR_BITS);

            /* passing parameter to the command */
            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB0_OFFSET;
    3362:	6822      	ldr	r2, [r4, #0]
            REG_WRITE(temp, FTFx_PROGRAM_CHECK);

            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB1_OFFSET;
            REG_WRITE(temp, GET_BIT_16_23(dest));
    3364:	b2db      	uxtb	r3, r3
            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FSTAT_OFFSET;
            REG_WRITE(temp, FTFx_SSD_FSTAT_ERROR_BITS);

            /* passing parameter to the command */
            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB0_OFFSET;
            REG_WRITE(temp, FTFx_PROGRAM_CHECK);
    3366:	71d1      	strb	r1, [r2, #7]

            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB1_OFFSET;
    3368:	6822      	ldr	r2, [r4, #0]
            {
                temp = pSSDConfig->ftfxRegBase + i + 0x0CU;
                REG_WRITE(temp, *(pExpectedData + i));
            }
            /* calling flash command sequence function to execute the command */
            ret = pFlashCommandSequence(pSSDConfig);
    336a:	1c20      	adds	r0, r4, #0
            /* passing parameter to the command */
            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB0_OFFSET;
            REG_WRITE(temp, FTFx_PROGRAM_CHECK);

            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB1_OFFSET;
            REG_WRITE(temp, GET_BIT_16_23(dest));
    336c:	7193      	strb	r3, [r2, #6]

            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB2_OFFSET;
    336e:	6822      	ldr	r2, [r4, #0]
            REG_WRITE(temp, GET_BIT_8_15(dest));
    3370:	0a33      	lsrs	r3, r6, #8
    3372:	b2db      	uxtb	r3, r3
    3374:	7153      	strb	r3, [r2, #5]

            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB3_OFFSET;
    3376:	6823      	ldr	r3, [r4, #0]
            REG_WRITE(temp, GET_BIT_0_7(dest));
    3378:	b2f2      	uxtb	r2, r6
    337a:	711a      	strb	r2, [r3, #4]

            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB4_OFFSET;
            REG_WRITE(temp, marginLevel);
    337c:	4652      	mov	r2, sl
            REG_WRITE(temp, GET_BIT_8_15(dest));

            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB3_OFFSET;
            REG_WRITE(temp, GET_BIT_0_7(dest));

            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB4_OFFSET;
    337e:	6823      	ldr	r3, [r4, #0]
                {
                    *pFailAddr = BYTE2WORD(dest + offsetAddr);
                    size = PGMCHK_ALIGN_SIZE;
                }
            }
            size -= PGMCHK_ALIGN_SIZE;
    3380:	3f04      	subs	r7, #4

            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB3_OFFSET;
            REG_WRITE(temp, GET_BIT_0_7(dest));

            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB4_OFFSET;
            REG_WRITE(temp, marginLevel);
    3382:	72da      	strb	r2, [r3, #11]

            for (i = 0x0U; i < PGMCHK_ALIGN_SIZE; i++)
            {
                temp = pSSDConfig->ftfxRegBase + i + 0x0CU;
                REG_WRITE(temp, *(pExpectedData + i));
    3384:	782a      	ldrb	r2, [r5, #0]
            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB4_OFFSET;
            REG_WRITE(temp, marginLevel);

            for (i = 0x0U; i < PGMCHK_ALIGN_SIZE; i++)
            {
                temp = pSSDConfig->ftfxRegBase + i + 0x0CU;
    3386:	6823      	ldr	r3, [r4, #0]
                REG_WRITE(temp, *(pExpectedData + i));
    3388:	731a      	strb	r2, [r3, #12]
    338a:	786a      	ldrb	r2, [r5, #1]
            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB4_OFFSET;
            REG_WRITE(temp, marginLevel);

            for (i = 0x0U; i < PGMCHK_ALIGN_SIZE; i++)
            {
                temp = pSSDConfig->ftfxRegBase + i + 0x0CU;
    338c:	6823      	ldr	r3, [r4, #0]
                REG_WRITE(temp, *(pExpectedData + i));
    338e:	735a      	strb	r2, [r3, #13]
    3390:	78aa      	ldrb	r2, [r5, #2]
            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB4_OFFSET;
            REG_WRITE(temp, marginLevel);

            for (i = 0x0U; i < PGMCHK_ALIGN_SIZE; i++)
            {
                temp = pSSDConfig->ftfxRegBase + i + 0x0CU;
    3392:	6823      	ldr	r3, [r4, #0]
                REG_WRITE(temp, *(pExpectedData + i));
    3394:	739a      	strb	r2, [r3, #14]
            temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB4_OFFSET;
            REG_WRITE(temp, marginLevel);

            for (i = 0x0U; i < PGMCHK_ALIGN_SIZE; i++)
            {
                temp = pSSDConfig->ftfxRegBase + i + 0x0CU;
    3396:	6823      	ldr	r3, [r4, #0]
                REG_WRITE(temp, *(pExpectedData + i));
    3398:	78ea      	ldrb	r2, [r5, #3]
                    *pFailAddr = BYTE2WORD(dest + offsetAddr);
                    size = PGMCHK_ALIGN_SIZE;
                }
            }
            size -= PGMCHK_ALIGN_SIZE;
            pExpectedData += PGMCHK_ALIGN_SIZE;
    339a:	3504      	adds	r5, #4
            REG_WRITE(temp, marginLevel);

            for (i = 0x0U; i < PGMCHK_ALIGN_SIZE; i++)
            {
                temp = pSSDConfig->ftfxRegBase + i + 0x0CU;
                REG_WRITE(temp, *(pExpectedData + i));
    339c:	73da      	strb	r2, [r3, #15]
            }
            /* calling flash command sequence function to execute the command */
            ret = pFlashCommandSequence(pSSDConfig);
    339e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    33a0:	4798      	blx	r3

            /* checking for the success of command execution */
            if(FTFx_OK != ret)
    33a2:	2800      	cmp	r0, #0
    33a4:	d005      	beq.n	33b2 <FlashProgramCheck+0xb2>
                    size = PGMCHK_ALIGN_SIZE;
                }
                else
#endif
                {
                    *pFailAddr = BYTE2WORD(dest + offsetAddr);
    33a6:	9b01      	ldr	r3, [sp, #4]
    33a8:	469c      	mov	ip, r3
    33aa:	465b      	mov	r3, fp
    33ac:	4466      	add	r6, ip
    33ae:	601e      	str	r6, [r3, #0]
    33b0:	e7b9      	b.n	3326 <FlashProgramCheck+0x26>
                    size = PGMCHK_ALIGN_SIZE;
                }
            }
            size -= PGMCHK_ALIGN_SIZE;
            pExpectedData += PGMCHK_ALIGN_SIZE;
            dest += PGMCHK_ALIGN_SIZE;
    33b2:	3604      	adds	r6, #4
            {
                ret = FTFx_ERR_ACCERR;
                size = 0x0U;
            }
        }
        while (size)
    33b4:	2f00      	cmp	r7, #0
    33b6:	d1cf      	bne.n	3358 <FlashProgramCheck+0x58>
    33b8:	e7b5      	b.n	3326 <FlashProgramCheck+0x26>
    33ba:	46c0      	nop			; (mov r8, r8)
    33bc:	46c0      	nop			; (mov r8, r8)
    33be:	46c0      	nop			; (mov r8, r8)

000033c0 <FlashVerifySection>:
uint32_t SIZE_OPTIMIZATION FlashVerifySection(PFLASH_SSD_CONFIG pSSDConfig, \
                                    uint32_t dest, \
                                    uint16_t number, \
                                    uint8_t marginLevel, \
                                    pFLASHCOMMANDSEQUENCE pFlashCommandSequence)
{
    33c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        dest = dest - temp + 0x800000U;
    }
    else
#endif
    {
        temp = WORD2BYTE(pSSDConfig->PFlashBase);
    33c2:	6844      	ldr	r4, [r0, #4]
    33c4:	2520      	movs	r5, #32
        if((dest >= temp) && (dest < (temp + pSSDConfig->PFlashSize)))
    33c6:	42a1      	cmp	r1, r4
    33c8:	d320      	bcc.n	340c <FlashVerifySection+0x4c>
    33ca:	6886      	ldr	r6, [r0, #8]
    33cc:	19a6      	adds	r6, r4, r6
    33ce:	42b1      	cmp	r1, r6
    33d0:	d21c      	bcs.n	340c <FlashVerifySection+0x4c>
    }
    if(FTFx_OK == ret)
    {
       /* clear RDCOLERR & ACCERR & FPVIOL flag in flash status register. Write 1 to clear*/
        temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FSTAT_OFFSET;
        REG_WRITE(temp, FTFx_SSD_FSTAT_ERROR_BITS);
    33d2:	2731      	movs	r7, #49	; 0x31

        /* passing parameter to the command */
        temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB0_OFFSET;
        REG_WRITE(temp, FTFx_VERIFY_SECTION);
    33d4:	2601      	movs	r6, #1
    }
    if(FTFx_OK == ret)
    {
       /* clear RDCOLERR & ACCERR & FPVIOL flag in flash status register. Write 1 to clear*/
        temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FSTAT_OFFSET;
        REG_WRITE(temp, FTFx_SSD_FSTAT_ERROR_BITS);
    33d6:	6805      	ldr	r5, [r0, #0]
#endif
    {
        temp = WORD2BYTE(pSSDConfig->PFlashBase);
        if((dest >= temp) && (dest < (temp + pSSDConfig->PFlashSize)))
        {
            dest -= temp;
    33d8:	1b09      	subs	r1, r1, r4
    }
    if(FTFx_OK == ret)
    {
       /* clear RDCOLERR & ACCERR & FPVIOL flag in flash status register. Write 1 to clear*/
        temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FSTAT_OFFSET;
        REG_WRITE(temp, FTFx_SSD_FSTAT_ERROR_BITS);
    33da:	702f      	strb	r7, [r5, #0]

        /* passing parameter to the command */
        temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB0_OFFSET;
    33dc:	6805      	ldr	r5, [r0, #0]
        REG_WRITE(temp, FTFx_VERIFY_SECTION);
        temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB1_OFFSET;
        REG_WRITE(temp, GET_BIT_16_23(dest));
    33de:	0c0c      	lsrs	r4, r1, #16
        temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FSTAT_OFFSET;
        REG_WRITE(temp, FTFx_SSD_FSTAT_ERROR_BITS);

        /* passing parameter to the command */
        temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB0_OFFSET;
        REG_WRITE(temp, FTFx_VERIFY_SECTION);
    33e0:	71ee      	strb	r6, [r5, #7]
        temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB1_OFFSET;
    33e2:	6805      	ldr	r5, [r0, #0]
        REG_WRITE(temp, GET_BIT_16_23(dest));
    33e4:	b2e4      	uxtb	r4, r4
    33e6:	71ac      	strb	r4, [r5, #6]
        temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB2_OFFSET;
    33e8:	6805      	ldr	r5, [r0, #0]
        REG_WRITE(temp, GET_BIT_8_15(dest));
    33ea:	0a0c      	lsrs	r4, r1, #8
    33ec:	b2e4      	uxtb	r4, r4
    33ee:	716c      	strb	r4, [r5, #5]
        temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB3_OFFSET;
    33f0:	6804      	ldr	r4, [r0, #0]
        REG_WRITE(temp, GET_BIT_0_7(dest));
    33f2:	b2c9      	uxtb	r1, r1
    33f4:	7121      	strb	r1, [r4, #4]
        temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB4_OFFSET;
    33f6:	6801      	ldr	r1, [r0, #0]
        REG_WRITE(temp, GET_BIT_8_15(number));
    33f8:	0a14      	lsrs	r4, r2, #8
    33fa:	72cc      	strb	r4, [r1, #11]
        temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB5_OFFSET;
    33fc:	6801      	ldr	r1, [r0, #0]
        REG_WRITE(temp, GET_BIT_0_7(number));
    33fe:	b2d2      	uxtb	r2, r2
    3400:	728a      	strb	r2, [r1, #10]
        temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB6_OFFSET;
    3402:	6802      	ldr	r2, [r0, #0]
        REG_WRITE(temp, marginLevel);
    3404:	7253      	strb	r3, [r2, #9]

        /* calling flash command sequence function to execute the command */
        ret = pFlashCommandSequence(pSSDConfig);
    3406:	9b06      	ldr	r3, [sp, #24]
    3408:	4798      	blx	r3
    340a:	1c05      	adds	r5, r0, #0
        ENTER_DEBUG_MODE;
    }
#endif

    return(ret);
}
    340c:	1c28      	adds	r0, r5, #0
    340e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003410 <FlashEraseSector>:

uint32_t SIZE_OPTIMIZATION FlashEraseSector(PFLASH_SSD_CONFIG pSSDConfig, \
                                  uint32_t dest, \
                                  uint32_t size, \
                                  pFLASHCOMMANDSEQUENCE pFlashCommandSequence)
{
    3410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3412:	464f      	mov	r7, r9
    3414:	4646      	mov	r6, r8
        sectorSize = FTFx_DSECTOR_SIZE;
    }
    else
#endif
    {
        temp = WORD2BYTE(pSSDConfig->PFlashBase);
    3416:	6845      	ldr	r5, [r0, #4]

uint32_t SIZE_OPTIMIZATION FlashEraseSector(PFLASH_SSD_CONFIG pSSDConfig, \
                                  uint32_t dest, \
                                  uint32_t size, \
                                  pFLASHCOMMANDSEQUENCE pFlashCommandSequence)
{
    3418:	b4c0      	push	{r6, r7}
    341a:	1c04      	adds	r4, r0, #0
    341c:	1c16      	adds	r6, r2, #0
    341e:	1c1f      	adds	r7, r3, #0
    3420:	2020      	movs	r0, #32
    }
    else
#endif
    {
        temp = WORD2BYTE(pSSDConfig->PFlashBase);
        if((dest >= temp) && (dest < (temp + pSSDConfig->PFlashSize)))
    3422:	42a9      	cmp	r1, r5
    3424:	d308      	bcc.n	3438 <FlashEraseSector+0x28>
    3426:	68a3      	ldr	r3, [r4, #8]
    3428:	18eb      	adds	r3, r5, r3
    342a:	4299      	cmp	r1, r3
    342c:	d204      	bcs.n	3438 <FlashEraseSector+0x28>

    /* check if the size is sector alignment or not */
    if(size & (sectorSize - 0x01U))
    {
        /* return an error code FTFx_ERR_SIZE */
        ret = FTFx_ERR_SIZE;
    342e:	2080      	movs	r0, #128	; 0x80
            size = 0x0U;
        }
    }

    /* check if the size is sector alignment or not */
    if(size & (sectorSize - 0x01U))
    3430:	0593      	lsls	r3, r2, #22
    {
        /* return an error code FTFx_ERR_SIZE */
        ret = FTFx_ERR_SIZE;
    3432:	0180      	lsls	r0, r0, #6
            size = 0x0U;
        }
    }

    /* check if the size is sector alignment or not */
    if(size & (sectorSize - 0x01U))
    3434:	2b00      	cmp	r3, #0
    3436:	d003      	beq.n	3440 <FlashEraseSector+0x30>
        ENTER_DEBUG_MODE;
    }
#endif

    return(ret);
}
    3438:	bc0c      	pop	{r2, r3}
    343a:	4690      	mov	r8, r2
    343c:	4699      	mov	r9, r3
    343e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#endif
    {
        temp = WORD2BYTE(pSSDConfig->PFlashBase);
        if((dest >= temp) && (dest < (temp + pSSDConfig->PFlashSize)))
        {
            dest -= temp;
    3440:	1b4d      	subs	r5, r1, r5
                                  uint32_t dest, \
                                  uint32_t size, \
                                  pFLASHCOMMANDSEQUENCE pFlashCommandSequence)
{

    uint32_t ret = FTFx_OK;     /* return code variable */
    3442:	2000      	movs	r0, #0
    {
        /* return an error code FTFx_ERR_SIZE */
        ret = FTFx_ERR_SIZE;
    }

    while((size > 0x0U) && (FTFx_OK == ret))
    3444:	2a00      	cmp	r2, #0
    3446:	d0f7      	beq.n	3438 <FlashEraseSector+0x28>
    {
        /* clear RDCOLERR & ACCERR & FPVIOL flag in flash status register. Write 1 to clear*/
        temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FSTAT_OFFSET;
        REG_WRITE(temp, FTFx_SSD_FSTAT_ERROR_BITS);
    3448:	2331      	movs	r3, #49	; 0x31
    344a:	4699      	mov	r9, r3

        /* passing parameter to the command */
        temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB0_OFFSET;
        REG_WRITE(temp, FTFx_ERASE_SECTOR);
    344c:	2309      	movs	r3, #9
    344e:	4698      	mov	r8, r3
    3450:	e001      	b.n	3456 <FlashEraseSector+0x46>
    {
        /* return an error code FTFx_ERR_SIZE */
        ret = FTFx_ERR_SIZE;
    }

    while((size > 0x0U) && (FTFx_OK == ret))
    3452:	2800      	cmp	r0, #0
    3454:	d1f0      	bne.n	3438 <FlashEraseSector+0x28>
    {
        /* clear RDCOLERR & ACCERR & FPVIOL flag in flash status register. Write 1 to clear*/
        temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FSTAT_OFFSET;
        REG_WRITE(temp, FTFx_SSD_FSTAT_ERROR_BITS);
    3456:	4649      	mov	r1, r9
    3458:	6822      	ldr	r2, [r4, #0]
        /* passing parameter to the command */
        temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB0_OFFSET;
        REG_WRITE(temp, FTFx_ERASE_SECTOR);

        temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB1_OFFSET;
        REG_WRITE(temp, GET_BIT_16_23(dest));
    345a:	0c2b      	lsrs	r3, r5, #16

    while((size > 0x0U) && (FTFx_OK == ret))
    {
        /* clear RDCOLERR & ACCERR & FPVIOL flag in flash status register. Write 1 to clear*/
        temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FSTAT_OFFSET;
        REG_WRITE(temp, FTFx_SSD_FSTAT_ERROR_BITS);
    345c:	7011      	strb	r1, [r2, #0]

        /* passing parameter to the command */
        temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB0_OFFSET;
        REG_WRITE(temp, FTFx_ERASE_SECTOR);
    345e:	4641      	mov	r1, r8
        /* clear RDCOLERR & ACCERR & FPVIOL flag in flash status register. Write 1 to clear*/
        temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FSTAT_OFFSET;
        REG_WRITE(temp, FTFx_SSD_FSTAT_ERROR_BITS);

        /* passing parameter to the command */
        temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB0_OFFSET;
    3460:	6822      	ldr	r2, [r4, #0]
        REG_WRITE(temp, FTFx_ERASE_SECTOR);

        temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB1_OFFSET;
        REG_WRITE(temp, GET_BIT_16_23(dest));
    3462:	b2db      	uxtb	r3, r3
        temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FSTAT_OFFSET;
        REG_WRITE(temp, FTFx_SSD_FSTAT_ERROR_BITS);

        /* passing parameter to the command */
        temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB0_OFFSET;
        REG_WRITE(temp, FTFx_ERASE_SECTOR);
    3464:	71d1      	strb	r1, [r2, #7]

        temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB1_OFFSET;
    3466:	6822      	ldr	r2, [r4, #0]
        REG_WRITE(temp, GET_BIT_16_23(dest));

        temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB2_OFFSET;
        REG_WRITE(temp, GET_BIT_8_15(dest));
    3468:	0a29      	lsrs	r1, r5, #8
        /* passing parameter to the command */
        temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB0_OFFSET;
        REG_WRITE(temp, FTFx_ERASE_SECTOR);

        temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB1_OFFSET;
        REG_WRITE(temp, GET_BIT_16_23(dest));
    346a:	7193      	strb	r3, [r2, #6]

        temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB2_OFFSET;
    346c:	6823      	ldr	r3, [r4, #0]
        REG_WRITE(temp, GET_BIT_8_15(dest));
    346e:	b2c9      	uxtb	r1, r1
    3470:	7159      	strb	r1, [r3, #5]

        temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB3_OFFSET;
    3472:	6823      	ldr	r3, [r4, #0]
        REG_WRITE(temp, GET_BIT_0_7(dest));
    3474:	b2ea      	uxtb	r2, r5

        /* calling flash command sequence function to execute the command */
        ret = pFlashCommandSequence(pSSDConfig);

        /* update size and destination address */
        size -= sectorSize;
    3476:	4906      	ldr	r1, [pc, #24]	; (3490 <FlashEraseSector+0x80>)

        temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB2_OFFSET;
        REG_WRITE(temp, GET_BIT_8_15(dest));

        temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB3_OFFSET;
        REG_WRITE(temp, GET_BIT_0_7(dest));
    3478:	711a      	strb	r2, [r3, #4]
        /* calling flash command sequence function to execute the command */
        ret = pFlashCommandSequence(pSSDConfig);

        /* update size and destination address */
        size -= sectorSize;
        dest += sectorSize;
    347a:	2380      	movs	r3, #128	; 0x80

        /* calling flash command sequence function to execute the command */
        ret = pFlashCommandSequence(pSSDConfig);

        /* update size and destination address */
        size -= sectorSize;
    347c:	468c      	mov	ip, r1
        dest += sectorSize;
    347e:	00db      	lsls	r3, r3, #3

        /* calling flash command sequence function to execute the command */
        ret = pFlashCommandSequence(pSSDConfig);

        /* update size and destination address */
        size -= sectorSize;
    3480:	4466      	add	r6, ip
        dest += sectorSize;
    3482:	469c      	mov	ip, r3

        temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB3_OFFSET;
        REG_WRITE(temp, GET_BIT_0_7(dest));

        /* calling flash command sequence function to execute the command */
        ret = pFlashCommandSequence(pSSDConfig);
    3484:	1c20      	adds	r0, r4, #0

        /* update size and destination address */
        size -= sectorSize;
        dest += sectorSize;
    3486:	4465      	add	r5, ip

        temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FCCOB3_OFFSET;
        REG_WRITE(temp, GET_BIT_0_7(dest));

        /* calling flash command sequence function to execute the command */
        ret = pFlashCommandSequence(pSSDConfig);
    3488:	47b8      	blx	r7
    {
        /* return an error code FTFx_ERR_SIZE */
        ret = FTFx_ERR_SIZE;
    }

    while((size > 0x0U) && (FTFx_OK == ret))
    348a:	2e00      	cmp	r6, #0
    348c:	d1e1      	bne.n	3452 <FlashEraseSector+0x42>
    348e:	e7d3      	b.n	3438 <FlashEraseSector+0x28>
    3490:	fffffc00 	.word	0xfffffc00
    3494:	46c0      	nop			; (mov r8, r8)
    3496:	46c0      	nop			; (mov r8, r8)
    3498:	46c0      	nop			; (mov r8, r8)
    349a:	46c0      	nop			; (mov r8, r8)
    349c:	46c0      	nop			; (mov r8, r8)
    349e:	46c0      	nop			; (mov r8, r8)

000034a0 <FlashCommandSequence>:
#pragma optimization_level 4
#endif /* End of CPU_CORE */

uint32_t SIZE_OPTIMIZATION FlashCommandSequence (PFLASH_SSD_CONFIG pSSDConfig )

{
    34a0:	b538      	push	{r3, r4, r5, lr}
    uint32_t ret;       /* return code variable */
    uint32_t temp;      /* temporary variable */

    /* clear CCIF to launch command */
    temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FSTAT_OFFSET;
    REG_BIT_SET(temp, FTFx_SSD_FSTAT_CCIF);
    34a2:	2380      	movs	r3, #128	; 0x80
    34a4:	6802      	ldr	r2, [r0, #0]
#pragma optimization_level 4
#endif /* End of CPU_CORE */

uint32_t SIZE_OPTIMIZATION FlashCommandSequence (PFLASH_SSD_CONFIG pSSDConfig )

{
    34a6:	1c04      	adds	r4, r0, #0
    uint32_t ret;       /* return code variable */
    uint32_t temp;      /* temporary variable */

    /* clear CCIF to launch command */
    temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FSTAT_OFFSET;
    REG_BIT_SET(temp, FTFx_SSD_FSTAT_CCIF);
    34a8:	7811      	ldrb	r1, [r2, #0]
    34aa:	430b      	orrs	r3, r1
    34ac:	7013      	strb	r3, [r2, #0]
    34ae:	6805      	ldr	r5, [r0, #0]

    /* wait for completion of this command */
    temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FSTAT_OFFSET;
    while(0x0U == (REG_BIT_GET(temp, FTFx_SSD_FSTAT_CCIF)))
    34b0:	e002      	b.n	34b8 <FlashCommandSequence+0x18>
    {
        /* wait till CCIF bit is set */
        /* serve callback function if counter reaches limitation */
        if(NULL_CALLBACK != pSSDConfig->CallBack)
    34b2:	6a23      	ldr	r3, [r4, #32]
    34b4:	1c5a      	adds	r2, r3, #1
    34b6:	d108      	bne.n	34ca <FlashCommandSequence+0x2a>
    temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FSTAT_OFFSET;
    REG_BIT_SET(temp, FTFx_SSD_FSTAT_CCIF);

    /* wait for completion of this command */
    temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FSTAT_OFFSET;
    while(0x0U == (REG_BIT_GET(temp, FTFx_SSD_FSTAT_CCIF)))
    34b8:	782b      	ldrb	r3, [r5, #0]
    34ba:	b25b      	sxtb	r3, r3
    34bc:	2b00      	cmp	r3, #0
    34be:	daf8      	bge.n	34b2 <FlashCommandSequence+0x12>
            (pSSDConfig->CallBack)();
        }
    }

    temp = pSSDConfig->ftfxRegBase + FTFx_SSD_FSTAT_OFFSET;
    ret = ((uint32_t)(REG_READ(temp)) & FTFx_SSD_FSTAT_ERROR_BITS);
    34c0:	2031      	movs	r0, #49	; 0x31
    34c2:	6823      	ldr	r3, [r4, #0]
    34c4:	781b      	ldrb	r3, [r3, #0]
    34c6:	4018      	ands	r0, r3
    return(ret);
}
    34c8:	bd38      	pop	{r3, r4, r5, pc}
    {
        /* wait till CCIF bit is set */
        /* serve callback function if counter reaches limitation */
        if(NULL_CALLBACK != pSSDConfig->CallBack)
        {
            (pSSDConfig->CallBack)();
    34ca:	4798      	blx	r3
    34cc:	e7f4      	b.n	34b8 <FlashCommandSequence+0x18>
    34ce:	46c0      	nop			; (mov r8, r8)

000034d0 <RelocateFunction>:
#pragma optimize_for_size on
#pragma optimization_level 4
#endif /* end of CPU_CORE */

uint32_t SIZE_OPTIMIZATION RelocateFunction(uint32_t dest, uint32_t size, uint32_t src)
{
    34d0:	b530      	push	{r4, r5, lr}
    uint32_t temp;
    uint16_t value, i, *pSrc, *pDest;
    temp = PGM2DATA((uint32_t)src - LAUNCH_COMMAND_OFFSET);
    pSrc = (uint16_t *)temp;
    pDest = (uint16_t *)dest;
    temp = size >>1;
    34d2:	0849      	lsrs	r1, r1, #1

uint32_t SIZE_OPTIMIZATION RelocateFunction(uint32_t dest, uint32_t size, uint32_t src)
{
    uint32_t temp;
    uint16_t value, i, *pSrc, *pDest;
    temp = PGM2DATA((uint32_t)src - LAUNCH_COMMAND_OFFSET);
    34d4:	3a01      	subs	r2, #1
    pSrc = (uint16_t *)temp;
    pDest = (uint16_t *)dest;
    34d6:	1c05      	adds	r5, r0, #0
    temp = size >>1;
    for (i = 0x0U; i < temp; i++)
    34d8:	2300      	movs	r3, #0
    34da:	2900      	cmp	r1, #0
    34dc:	d008      	beq.n	34f0 <RelocateFunction+0x20>
    {
        value = READ16(pSrc);
    34de:	8814      	ldrh	r4, [r2, #0]
    uint16_t value, i, *pSrc, *pDest;
    temp = PGM2DATA((uint32_t)src - LAUNCH_COMMAND_OFFSET);
    pSrc = (uint16_t *)temp;
    pDest = (uint16_t *)dest;
    temp = size >>1;
    for (i = 0x0U; i < temp; i++)
    34e0:	3301      	adds	r3, #1
    {
        value = READ16(pSrc);
    34e2:	b2a4      	uxth	r4, r4
    uint16_t value, i, *pSrc, *pDest;
    temp = PGM2DATA((uint32_t)src - LAUNCH_COMMAND_OFFSET);
    pSrc = (uint16_t *)temp;
    pDest = (uint16_t *)dest;
    temp = size >>1;
    for (i = 0x0U; i < temp; i++)
    34e4:	b29b      	uxth	r3, r3
    {
        value = READ16(pSrc);
        pSrc++;
        WRITE16(pDest, value);
    34e6:	802c      	strh	r4, [r5, #0]
    pDest = (uint16_t *)dest;
    temp = size >>1;
    for (i = 0x0U; i < temp; i++)
    {
        value = READ16(pSrc);
        pSrc++;
    34e8:	3202      	adds	r2, #2
        WRITE16(pDest, value);
        pDest++;
    34ea:	3502      	adds	r5, #2
    uint16_t value, i, *pSrc, *pDest;
    temp = PGM2DATA((uint32_t)src - LAUNCH_COMMAND_OFFSET);
    pSrc = (uint16_t *)temp;
    pDest = (uint16_t *)dest;
    temp = size >>1;
    for (i = 0x0U; i < temp; i++)
    34ec:	4299      	cmp	r1, r3
    34ee:	d8f6      	bhi.n	34de <RelocateFunction+0xe>
        value = READ16(pSrc);
        pSrc++;
        WRITE16(pDest, value);
        pDest++;
    }
    return ((uint32_t)DATA2PGM((uint32_t)dest + LAUNCH_COMMAND_OFFSET));
    34f0:	3001      	adds	r0, #1
}
    34f2:	bd30      	pop	{r4, r5, pc}
    34f4:	46c0      	nop			; (mov r8, r8)
    34f6:	46c0      	nop			; (mov r8, r8)
    34f8:	46c0      	nop			; (mov r8, r8)
    34fa:	46c0      	nop			; (mov r8, r8)
    34fc:	46c0      	nop			; (mov r8, r8)
    34fe:	46c0      	nop			; (mov r8, r8)

00003500 <__aeabi_memcpy8@@LIBC_N>:
}
int __attribute__((weak))
__aeabi_atexit_impl2(void *object, void (*destructor) (void *), void *dso_handle) {
    return __cxa_atexit(destructor, object, dso_handle);
}
void __attribute__((weak)) __aeabi_memcpy8_impl(void *dest, const void *src, size_t n) {
    3500:	b508      	push	{r3, lr}
    memcpy(dest, src, n);
    3502:	f000 f9a5 	bl	3850 <memcpy>
}
    3506:	bd08      	pop	{r3, pc}
    3508:	46c0      	nop			; (mov r8, r8)
    350a:	46c0      	nop			; (mov r8, r8)
    350c:	46c0      	nop			; (mov r8, r8)
    350e:	46c0      	nop			; (mov r8, r8)

00003510 <__aeabi_memcpy4@@LIBC_N>:
void __attribute__((weak)) __aeabi_memcpy4_impl(void *dest, const void *src, size_t n) {
    3510:	b508      	push	{r3, lr}
    memcpy(dest, src, n);
    3512:	f000 f99d 	bl	3850 <memcpy>
}
    3516:	bd08      	pop	{r3, pc}
    3518:	46c0      	nop			; (mov r8, r8)
    351a:	46c0      	nop			; (mov r8, r8)
    351c:	46c0      	nop			; (mov r8, r8)
    351e:	46c0      	nop			; (mov r8, r8)

00003520 <__aeabi_memcpy@@LIBC_N>:
void __attribute__((weak)) __aeabi_memcpy_impl(void *dest, const void *src, size_t n) {
    3520:	b508      	push	{r3, lr}
    memcpy(dest, src, n);
    3522:	f000 f995 	bl	3850 <memcpy>
}
    3526:	bd08      	pop	{r3, pc}
    3528:	46c0      	nop			; (mov r8, r8)
    352a:	46c0      	nop			; (mov r8, r8)
    352c:	46c0      	nop			; (mov r8, r8)
    352e:	46c0      	nop			; (mov r8, r8)

00003530 <__aeabi_memmove8@@LIBC_N>:
    memcpy(dest, src, n);
}
void __attribute__((weak)) __aeabi_memcpy_impl2(void *dest, const void *src, size_t n) {
    memcpy(dest, src, n);
}
void __attribute__((weak)) __aeabi_memmove8_impl(void *dest, const void *src, size_t n) {
    3530:	b508      	push	{r3, lr}
    memmove(dest, src, n);
    3532:	f000 f99d 	bl	3870 <memmove>
}
    3536:	bd08      	pop	{r3, pc}
    3538:	46c0      	nop			; (mov r8, r8)
    353a:	46c0      	nop			; (mov r8, r8)
    353c:	46c0      	nop			; (mov r8, r8)
    353e:	46c0      	nop			; (mov r8, r8)

00003540 <__aeabi_memmove4@@LIBC_N>:
void __attribute__((weak)) __aeabi_memmove4_impl(void *dest, const void *src, size_t n) {
    3540:	b508      	push	{r3, lr}
    memmove(dest, src, n);
    3542:	f000 f995 	bl	3870 <memmove>
}
    3546:	bd08      	pop	{r3, pc}
    3548:	46c0      	nop			; (mov r8, r8)
    354a:	46c0      	nop			; (mov r8, r8)
    354c:	46c0      	nop			; (mov r8, r8)
    354e:	46c0      	nop			; (mov r8, r8)

00003550 <__aeabi_memmove@@LIBC_N>:
void __attribute__((weak)) __aeabi_memmove_impl(void *dest, const void *src, size_t n) {
    3550:	b508      	push	{r3, lr}
    memmove(dest, src, n);
    3552:	f000 f98d 	bl	3870 <memmove>
}
    3556:	bd08      	pop	{r3, pc}
    3558:	46c0      	nop			; (mov r8, r8)
    355a:	46c0      	nop			; (mov r8, r8)
    355c:	46c0      	nop			; (mov r8, r8)
    355e:	46c0      	nop			; (mov r8, r8)

00003560 <__aeabi_memset8@@LIBC_N>:
}
/*
 * __aeabi_memset has the order of its second and third arguments reversed.
 *  This allows __aeabi_memclr to tail-call __aeabi_memset
 */
void __attribute__((weak)) __aeabi_memset8_impl(void *dest, size_t n, int c) {
    3560:	b508      	push	{r3, lr}
    3562:	1c0b      	adds	r3, r1, #0
    memset(dest, c, n);
    3564:	1c11      	adds	r1, r2, #0
    3566:	1c1a      	adds	r2, r3, #0
    3568:	f000 f99a 	bl	38a0 <memset>
}
    356c:	bd08      	pop	{r3, pc}
    356e:	46c0      	nop			; (mov r8, r8)

00003570 <__aeabi_memset4@@LIBC_N>:
void __attribute__((weak)) __aeabi_memset4_impl(void *dest, size_t n, int c) {
    3570:	b508      	push	{r3, lr}
    3572:	1c0b      	adds	r3, r1, #0
    memset(dest, c, n);
    3574:	1c11      	adds	r1, r2, #0
    3576:	1c1a      	adds	r2, r3, #0
    3578:	f000 f992 	bl	38a0 <memset>
}
    357c:	bd08      	pop	{r3, pc}
    357e:	46c0      	nop			; (mov r8, r8)

00003580 <__aeabi_memset@@LIBC_N>:
void __attribute__((weak)) __aeabi_memset_impl(void *dest, size_t n, int c) {
    3580:	b508      	push	{r3, lr}
    3582:	1c0b      	adds	r3, r1, #0
    memset(dest, c, n);
    3584:	1c11      	adds	r1, r2, #0
    3586:	1c1a      	adds	r2, r3, #0
    3588:	f000 f98a 	bl	38a0 <memset>
}
    358c:	bd08      	pop	{r3, pc}
    358e:	46c0      	nop			; (mov r8, r8)

00003590 <__aeabi_memclr8@@LIBC_N>:
    memset(dest, c, n);
}
void __attribute__((weak)) __aeabi_memset_impl2(void *dest, size_t n, int c) {
    memset(dest, c, n);
}
void __attribute__((weak)) __aeabi_memclr8_impl(void *dest, size_t n) {
    3590:	b508      	push	{r3, lr}
    __aeabi_memset8_impl(dest, n, 0);
    3592:	2200      	movs	r2, #0
    3594:	f7ff ffe4 	bl	3560 <__aeabi_memset8@@LIBC_N>
}
    3598:	bd08      	pop	{r3, pc}
    359a:	46c0      	nop			; (mov r8, r8)
    359c:	46c0      	nop			; (mov r8, r8)
    359e:	46c0      	nop			; (mov r8, r8)

000035a0 <__aeabi_memclr4@@LIBC_N>:
void __attribute__((weak)) __aeabi_memclr4_impl(void *dest, size_t n) {
    35a0:	b508      	push	{r3, lr}
    __aeabi_memset4_impl(dest, n, 0);
    35a2:	2200      	movs	r2, #0
    35a4:	f7ff ffe4 	bl	3570 <__aeabi_memset4@@LIBC_N>
}
    35a8:	bd08      	pop	{r3, pc}
    35aa:	46c0      	nop			; (mov r8, r8)
    35ac:	46c0      	nop			; (mov r8, r8)
    35ae:	46c0      	nop			; (mov r8, r8)

000035b0 <__aeabi_memclr@@LIBC_N>:
void __attribute__((weak)) __aeabi_memclr_impl(void *dest, size_t n) {
    35b0:	b508      	push	{r3, lr}
    __aeabi_memset_impl(dest, n, 0);
    35b2:	2200      	movs	r2, #0
    35b4:	f7ff ffe4 	bl	3580 <__aeabi_memset@@LIBC_N>
}
    35b8:	bd08      	pop	{r3, pc}
    35ba:	46c0      	nop			; (mov r8, r8)
    35bc:	46c0      	nop			; (mov r8, r8)
    35be:	46c0      	nop			; (mov r8, r8)

000035c0 <_Z15attachInterruptiPFvvE8irq_mode>:

#include "Arduino.h"

void attachInterrupt(int irq, void (*func)(void), enum irq_mode mode) {
  return;
}
    35c0:	4770      	bx	lr
    35c2:	46c0      	nop			; (mov r8, r8)
    35c4:	46c0      	nop			; (mov r8, r8)
    35c6:	46c0      	nop			; (mov r8, r8)
    35c8:	46c0      	nop			; (mov r8, r8)
    35ca:	46c0      	nop			; (mov r8, r8)
    35cc:	46c0      	nop			; (mov r8, r8)
    35ce:	46c0      	nop			; (mov r8, r8)

000035d0 <_Z15detachInterrupti>:

void detachInterrupt(int irq) {
  return;
}
    35d0:	4770      	bx	lr
    35d2:	46c0      	nop			; (mov r8, r8)
    35d4:	46c0      	nop			; (mov r8, r8)
    35d6:	46c0      	nop			; (mov r8, r8)
    35d8:	46c0      	nop			; (mov r8, r8)
    35da:	46c0      	nop			; (mov r8, r8)
    35dc:	46c0      	nop			; (mov r8, r8)
    35de:	46c0      	nop			; (mov r8, r8)

000035e0 <_Z6millisv>:
#include "kl02.h"
#include "Arduino.h"

unsigned long millis(void) {
  return 0;
}
    35e0:	2000      	movs	r0, #0
    35e2:	4770      	bx	lr
    35e4:	46c0      	nop			; (mov r8, r8)
    35e6:	46c0      	nop			; (mov r8, r8)
    35e8:	46c0      	nop			; (mov r8, r8)
    35ea:	46c0      	nop			; (mov r8, r8)
    35ec:	46c0      	nop			; (mov r8, r8)
    35ee:	46c0      	nop			; (mov r8, r8)

000035f0 <_Z6microsv>:

unsigned long micros(void) {
  return 0;
}
    35f0:	2000      	movs	r0, #0
    35f2:	4770      	bx	lr
    35f4:	46c0      	nop			; (mov r8, r8)
    35f6:	46c0      	nop			; (mov r8, r8)
    35f8:	46c0      	nop			; (mov r8, r8)
    35fa:	46c0      	nop			; (mov r8, r8)
    35fc:	46c0      	nop			; (mov r8, r8)
    35fe:	46c0      	nop			; (mov r8, r8)

00003600 <_Z5delaym>:

void delay(unsigned long msecs) {
    3600:	4b02      	ldr	r3, [pc, #8]	; (360c <_Z5delaym+0xc>)
  int i;
  for (i = 0; i < 1000000; i++)
    asm("nop");
    3602:	46c0      	nop			; (mov r8, r8)
    3604:	3b01      	subs	r3, #1
  return 0;
}

void delay(unsigned long msecs) {
  int i;
  for (i = 0; i < 1000000; i++)
    3606:	2b00      	cmp	r3, #0
    3608:	d1fb      	bne.n	3602 <_Z5delaym+0x2>
    asm("nop");
}
    360a:	4770      	bx	lr
    360c:	000f4240 	.word	0x000f4240

00003610 <_Z17delayMicrosecondsj>:

void delayMicroseconds(unsigned int usecs) {
    3610:	2364      	movs	r3, #100	; 0x64
  int i;
  for (i = 0; i < 100; i++)
    asm("nop");
    3612:	46c0      	nop			; (mov r8, r8)
    3614:	3b01      	subs	r3, #1
    asm("nop");
}

void delayMicroseconds(unsigned int usecs) {
  int i;
  for (i = 0; i < 100; i++)
    3616:	2b00      	cmp	r3, #0
    3618:	d1fb      	bne.n	3612 <_Z17delayMicrosecondsj+0x2>
    asm("nop");
}
    361a:	4770      	bx	lr
    361c:	46c0      	nop			; (mov r8, r8)
    361e:	46c0      	nop			; (mov r8, r8)

00003620 <_Z7pinModei8pin_mode>:

void pinMode(int pin, enum pin_mode mode) {

  pin = pin_to_hwpin(pin);

  switch (BANK_NUMBER(pin)) {
    3620:	0603      	lsls	r3, r0, #24
    3622:	0f5b      	lsrs	r3, r3, #29
    3624:	d016      	beq.n	3654 <_Z7pinModei8pin_mode+0x34>
    3626:	2b01      	cmp	r3, #1
    3628:	d113      	bne.n	3652 <_Z7pinModei8pin_mode+0x32>

    break;

  case 1: /* PTB */
    /* Set pin mux to GPIO, and set pull */
    if (mode == INPUT_PULLUP)
    362a:	2902      	cmp	r1, #2
    362c:	d03c      	beq.n	36a8 <_Z7pinModei8pin_mode+0x88>
      writel(0x00000103, PORTB_PCR(PIN_NUMBER(pin)));
    else if (mode == INPUT_PULLDOWN)
    362e:	2903      	cmp	r1, #3
    3630:	d02f      	beq.n	3692 <_Z7pinModei8pin_mode+0x72>
      writel(0x00000102, PORTB_PCR(PIN_NUMBER(pin)));
    else
      writel(0x00000100, PORTB_PCR(PIN_NUMBER(pin)));
    3632:	231f      	movs	r3, #31
	return *(volatile uint16_t *)addr;
}

static inline void writel(uint32_t value, uint32_t addr)
{
	*((volatile uint32_t *)addr) = value;
    3634:	2280      	movs	r2, #128	; 0x80
    3636:	4018      	ands	r0, r3
    3638:	4b25      	ldr	r3, [pc, #148]	; (36d0 <_Z7pinModei8pin_mode+0xb0>)
    363a:	0052      	lsls	r2, r2, #1
    363c:	18c3      	adds	r3, r0, r3
    363e:	009b      	lsls	r3, r3, #2
    3640:	601a      	str	r2, [r3, #0]

    /* Set pin direction */
    if (mode == OUTPUT)
    3642:	2901      	cmp	r1, #1
    3644:	d02e      	beq.n	36a4 <_Z7pinModei8pin_mode+0x84>
}

static inline uint32_t readl(uint32_t addr)
{
	return *(volatile uint32_t *)addr;
    3646:	4a23      	ldr	r2, [pc, #140]	; (36d4 <_Z7pinModei8pin_mode+0xb4>)
      writel(readl(GPIOB_PDDR) | (1 << PIN_NUMBER(pin)), GPIOB_PDDR);
    else
      writel(readl(GPIOB_PDDR) & ~(1 << PIN_NUMBER(pin)), GPIOB_PDDR);
    3648:	2101      	movs	r1, #1
    364a:	4081      	lsls	r1, r0
    364c:	6813      	ldr	r3, [r2, #0]
    364e:	438b      	bics	r3, r1
	return *(volatile uint16_t *)addr;
}

static inline void writel(uint32_t value, uint32_t addr)
{
	*((volatile uint32_t *)addr) = value;
    3650:	6013      	str	r3, [r2, #0]
    break;

  }
}
    3652:	4770      	bx	lr
  pin = pin_to_hwpin(pin);

  switch (BANK_NUMBER(pin)) {
  case 0: /* PTA */
    /* Set pin mux to GPIO, and set pull */
    if (mode == INPUT_PULLUP)
    3654:	2902      	cmp	r1, #2
    3656:	d030      	beq.n	36ba <_Z7pinModei8pin_mode+0x9a>
      writel(0x00000103, PORTA_PCR(PIN_NUMBER(pin)));
    else if (mode == INPUT_PULLDOWN)
    3658:	2903      	cmp	r1, #3
    365a:	d010      	beq.n	367e <_Z7pinModei8pin_mode+0x5e>
      writel(0x00000102, PORTA_PCR(PIN_NUMBER(pin)));
    else
      writel(0x00000100, PORTA_PCR(PIN_NUMBER(pin)));
    365c:	231f      	movs	r3, #31
    365e:	2280      	movs	r2, #128	; 0x80
    3660:	4018      	ands	r0, r3
    3662:	4b1d      	ldr	r3, [pc, #116]	; (36d8 <_Z7pinModei8pin_mode+0xb8>)
    3664:	0052      	lsls	r2, r2, #1
    3666:	18c3      	adds	r3, r0, r3
    3668:	009b      	lsls	r3, r3, #2
    366a:	601a      	str	r2, [r3, #0]

    /* Set pin direction */
    if (mode == OUTPUT)
    366c:	2901      	cmp	r1, #1
    366e:	d10e      	bne.n	368e <_Z7pinModei8pin_mode+0x6e>
}

static inline uint32_t readl(uint32_t addr)
{
	return *(volatile uint32_t *)addr;
    3670:	4a1a      	ldr	r2, [pc, #104]	; (36dc <_Z7pinModei8pin_mode+0xbc>)
    else
      writel(0x00000100, PORTB_PCR(PIN_NUMBER(pin)));

    /* Set pin direction */
    if (mode == OUTPUT)
      writel(readl(GPIOB_PDDR) | (1 << PIN_NUMBER(pin)), GPIOB_PDDR);
    3672:	4081      	lsls	r1, r0
    3674:	1c08      	adds	r0, r1, #0
    3676:	6813      	ldr	r3, [r2, #0]
    3678:	4318      	orrs	r0, r3
	return *(volatile uint16_t *)addr;
}

static inline void writel(uint32_t value, uint32_t addr)
{
	*((volatile uint32_t *)addr) = value;
    367a:	6010      	str	r0, [r2, #0]
    367c:	e7e9      	b.n	3652 <_Z7pinModei8pin_mode+0x32>
  case 0: /* PTA */
    /* Set pin mux to GPIO, and set pull */
    if (mode == INPUT_PULLUP)
      writel(0x00000103, PORTA_PCR(PIN_NUMBER(pin)));
    else if (mode == INPUT_PULLDOWN)
      writel(0x00000102, PORTA_PCR(PIN_NUMBER(pin)));
    367e:	211f      	movs	r1, #31
    3680:	2281      	movs	r2, #129	; 0x81
    3682:	4b15      	ldr	r3, [pc, #84]	; (36d8 <_Z7pinModei8pin_mode+0xb8>)
    3684:	4008      	ands	r0, r1
    3686:	18c3      	adds	r3, r0, r3
    3688:	009b      	lsls	r3, r3, #2
    368a:	0052      	lsls	r2, r2, #1
    368c:	601a      	str	r2, [r3, #0]
}

static inline uint32_t readl(uint32_t addr)
{
	return *(volatile uint32_t *)addr;
    368e:	4a13      	ldr	r2, [pc, #76]	; (36dc <_Z7pinModei8pin_mode+0xbc>)
    3690:	e7da      	b.n	3648 <_Z7pinModei8pin_mode+0x28>
  case 1: /* PTB */
    /* Set pin mux to GPIO, and set pull */
    if (mode == INPUT_PULLUP)
      writel(0x00000103, PORTB_PCR(PIN_NUMBER(pin)));
    else if (mode == INPUT_PULLDOWN)
      writel(0x00000102, PORTB_PCR(PIN_NUMBER(pin)));
    3692:	211f      	movs	r1, #31
	return *(volatile uint16_t *)addr;
}

static inline void writel(uint32_t value, uint32_t addr)
{
	*((volatile uint32_t *)addr) = value;
    3694:	2281      	movs	r2, #129	; 0x81
    3696:	4b0e      	ldr	r3, [pc, #56]	; (36d0 <_Z7pinModei8pin_mode+0xb0>)
    3698:	4008      	ands	r0, r1
    369a:	18c3      	adds	r3, r0, r3
    369c:	009b      	lsls	r3, r3, #2
    369e:	0052      	lsls	r2, r2, #1
    36a0:	601a      	str	r2, [r3, #0]
    36a2:	e7d0      	b.n	3646 <_Z7pinModei8pin_mode+0x26>
}

static inline uint32_t readl(uint32_t addr)
{
	return *(volatile uint32_t *)addr;
    36a4:	4a0b      	ldr	r2, [pc, #44]	; (36d4 <_Z7pinModei8pin_mode+0xb4>)
    36a6:	e7e4      	b.n	3672 <_Z7pinModei8pin_mode+0x52>
    break;

  case 1: /* PTB */
    /* Set pin mux to GPIO, and set pull */
    if (mode == INPUT_PULLUP)
      writel(0x00000103, PORTB_PCR(PIN_NUMBER(pin)));
    36a8:	211f      	movs	r1, #31
	return *(volatile uint16_t *)addr;
}

static inline void writel(uint32_t value, uint32_t addr)
{
	*((volatile uint32_t *)addr) = value;
    36aa:	2204      	movs	r2, #4
    36ac:	4b08      	ldr	r3, [pc, #32]	; (36d0 <_Z7pinModei8pin_mode+0xb0>)
    36ae:	4008      	ands	r0, r1
    36b0:	18c3      	adds	r3, r0, r3
    36b2:	009b      	lsls	r3, r3, #2
    36b4:	32ff      	adds	r2, #255	; 0xff
    36b6:	601a      	str	r2, [r3, #0]
    36b8:	e7c5      	b.n	3646 <_Z7pinModei8pin_mode+0x26>

  switch (BANK_NUMBER(pin)) {
  case 0: /* PTA */
    /* Set pin mux to GPIO, and set pull */
    if (mode == INPUT_PULLUP)
      writel(0x00000103, PORTA_PCR(PIN_NUMBER(pin)));
    36ba:	211f      	movs	r1, #31
    36bc:	2204      	movs	r2, #4
    36be:	4b06      	ldr	r3, [pc, #24]	; (36d8 <_Z7pinModei8pin_mode+0xb8>)
    36c0:	4008      	ands	r0, r1
    36c2:	18c3      	adds	r3, r0, r3
    36c4:	32ff      	adds	r2, #255	; 0xff
    36c6:	009b      	lsls	r3, r3, #2
    36c8:	601a      	str	r2, [r3, #0]
}

static inline uint32_t readl(uint32_t addr)
{
	return *(volatile uint32_t *)addr;
    36ca:	4a04      	ldr	r2, [pc, #16]	; (36dc <_Z7pinModei8pin_mode+0xbc>)
    36cc:	e7bc      	b.n	3648 <_Z7pinModei8pin_mode+0x28>
    36ce:	46c0      	nop			; (mov r8, r8)
    36d0:	10012800 	.word	0x10012800
    36d4:	400ff054 	.word	0x400ff054
    36d8:	10012400 	.word	0x10012400
    36dc:	400ff014 	.word	0x400ff014

000036e0 <_Z12digitalWriteii>:
}

/* Digital IO */
void digitalWrite(int pin, int value) {
  pin = pin_to_hwpin(pin);
  switch (BANK_NUMBER(pin)) {
    36e0:	0603      	lsls	r3, r0, #24
    36e2:	0f5b      	lsrs	r3, r3, #29
    36e4:	d009      	beq.n	36fa <_Z12digitalWriteii+0x1a>
    36e6:	2b01      	cmp	r3, #1
    36e8:	d106      	bne.n	36f8 <_Z12digitalWriteii+0x18>
  case 0:
    writel(1 << PIN_NUMBER(pin), value ? FGPIOA_PSOR : FGPIOA_PCOR);
    break;

  case 1:
    writel(1 << PIN_NUMBER(pin), value ? FGPIOB_PSOR : FGPIOB_PCOR);
    36ea:	221f      	movs	r2, #31
    36ec:	4010      	ands	r0, r2
    36ee:	4083      	lsls	r3, r0
    36f0:	2900      	cmp	r1, #0
    36f2:	d00c      	beq.n	370e <_Z12digitalWriteii+0x2e>
    36f4:	4a09      	ldr	r2, [pc, #36]	; (371c <_Z12digitalWriteii+0x3c>)
	return *(volatile uint16_t *)addr;
}

static inline void writel(uint32_t value, uint32_t addr)
{
	*((volatile uint32_t *)addr) = value;
    36f6:	6013      	str	r3, [r2, #0]
    break;
  }
}
    36f8:	4770      	bx	lr
void digitalWrite(int pin, int value) {
  pin = pin_to_hwpin(pin);
  switch (BANK_NUMBER(pin)) {

  case 0:
    writel(1 << PIN_NUMBER(pin), value ? FGPIOA_PSOR : FGPIOA_PCOR);
    36fa:	231f      	movs	r3, #31
    36fc:	4018      	ands	r0, r3
    36fe:	2301      	movs	r3, #1
    3700:	4083      	lsls	r3, r0
    3702:	1c18      	adds	r0, r3, #0
    3704:	2900      	cmp	r1, #0
    3706:	d105      	bne.n	3714 <_Z12digitalWriteii+0x34>
    3708:	4b05      	ldr	r3, [pc, #20]	; (3720 <_Z12digitalWriteii+0x40>)
    370a:	6018      	str	r0, [r3, #0]
    370c:	e7f4      	b.n	36f8 <_Z12digitalWriteii+0x18>
    break;

  case 1:
    writel(1 << PIN_NUMBER(pin), value ? FGPIOB_PSOR : FGPIOB_PCOR);
    370e:	4a05      	ldr	r2, [pc, #20]	; (3724 <_Z12digitalWriteii+0x44>)
    3710:	6013      	str	r3, [r2, #0]
    3712:	e7f1      	b.n	36f8 <_Z12digitalWriteii+0x18>
    3714:	4b04      	ldr	r3, [pc, #16]	; (3728 <_Z12digitalWriteii+0x48>)
    3716:	6018      	str	r0, [r3, #0]
    3718:	e7ee      	b.n	36f8 <_Z12digitalWriteii+0x18>
    371a:	46c0      	nop			; (mov r8, r8)
    371c:	f8000044 	.word	0xf8000044
    3720:	f8000008 	.word	0xf8000008
    3724:	f8000048 	.word	0xf8000048
    3728:	f8000004 	.word	0xf8000004
    372c:	46c0      	nop			; (mov r8, r8)
    372e:	46c0      	nop			; (mov r8, r8)

00003730 <_Z11digitalReadi>:
  }
}

int digitalRead(int pin) {
  pin = pin_to_hwpin(pin);
  switch (BANK_NUMBER(pin)) {
    3730:	0603      	lsls	r3, r0, #24
    3732:	0f5b      	lsrs	r3, r3, #29
    3734:	d00d      	beq.n	3752 <_Z11digitalReadi+0x22>
    3736:	2b01      	cmp	r3, #1
    3738:	d001      	beq.n	373e <_Z11digitalReadi+0xe>
  case 0: return !!(readl(FGPIOA_PDIR) & (1 << PIN_NUMBER(pin)));
  case 1: return !!(readl(FGPIOB_PDIR) & (1 << PIN_NUMBER(pin)));
  }
  return 0;
    373a:	2000      	movs	r0, #0
}
    373c:	4770      	bx	lr
}

static inline uint32_t readl(uint32_t addr)
{
	return *(volatile uint32_t *)addr;
    373e:	4a0a      	ldr	r2, [pc, #40]	; (3768 <_Z11digitalReadi+0x38>)
    3740:	6811      	ldr	r1, [r2, #0]

int digitalRead(int pin) {
  pin = pin_to_hwpin(pin);
  switch (BANK_NUMBER(pin)) {
  case 0: return !!(readl(FGPIOA_PDIR) & (1 << PIN_NUMBER(pin)));
  case 1: return !!(readl(FGPIOB_PDIR) & (1 << PIN_NUMBER(pin)));
    3742:	221f      	movs	r2, #31
    3744:	4002      	ands	r2, r0
    3746:	4093      	lsls	r3, r2
    3748:	1c18      	adds	r0, r3, #0
    374a:	4008      	ands	r0, r1
    374c:	1e43      	subs	r3, r0, #1
    374e:	4198      	sbcs	r0, r3
    3750:	e7f4      	b.n	373c <_Z11digitalReadi+0xc>
    3752:	4b06      	ldr	r3, [pc, #24]	; (376c <_Z11digitalReadi+0x3c>)
}

int digitalRead(int pin) {
  pin = pin_to_hwpin(pin);
  switch (BANK_NUMBER(pin)) {
  case 0: return !!(readl(FGPIOA_PDIR) & (1 << PIN_NUMBER(pin)));
    3754:	2201      	movs	r2, #1
    3756:	6819      	ldr	r1, [r3, #0]
    3758:	231f      	movs	r3, #31
    375a:	4003      	ands	r3, r0
    375c:	409a      	lsls	r2, r3
    375e:	1c10      	adds	r0, r2, #0
    3760:	4008      	ands	r0, r1
    3762:	1e43      	subs	r3, r0, #1
    3764:	4198      	sbcs	r0, r3
    3766:	e7e9      	b.n	373c <_Z11digitalReadi+0xc>
    3768:	f8000050 	.word	0xf8000050
    376c:	f8000010 	.word	0xf8000010

00003770 <_Z11analogWriteii>:
}

/* Analog IO */
void analogWrite(int pin, int value) {
  return;
}
    3770:	4770      	bx	lr
    3772:	46c0      	nop			; (mov r8, r8)
    3774:	46c0      	nop			; (mov r8, r8)
    3776:	46c0      	nop			; (mov r8, r8)
    3778:	46c0      	nop			; (mov r8, r8)
    377a:	46c0      	nop			; (mov r8, r8)
    377c:	46c0      	nop			; (mov r8, r8)
    377e:	46c0      	nop			; (mov r8, r8)

00003780 <_Z15analogReference21analog_reference_type>:

void analogReference(enum analog_reference_type type) {
  return;
}
    3780:	4770      	bx	lr
    3782:	46c0      	nop			; (mov r8, r8)
    3784:	46c0      	nop			; (mov r8, r8)
    3786:	46c0      	nop			; (mov r8, r8)
    3788:	46c0      	nop			; (mov r8, r8)
    378a:	46c0      	nop			; (mov r8, r8)
    378c:	46c0      	nop			; (mov r8, r8)
    378e:	46c0      	nop			; (mov r8, r8)

00003790 <_Z10analogReadi>:

int analogRead(int pin) {
  return 0;
}
    3790:	2000      	movs	r0, #0
    3792:	4770      	bx	lr
    3794:	46c0      	nop			; (mov r8, r8)
    3796:	46c0      	nop			; (mov r8, r8)
    3798:	46c0      	nop			; (mov r8, r8)
    379a:	46c0      	nop			; (mov r8, r8)
    379c:	46c0      	nop			; (mov r8, r8)
    379e:	46c0      	nop			; (mov r8, r8)

000037a0 <_Z4toneijm>:


void tone(int pin, unsigned int frequency, unsigned long duration) {
  return;
}
    37a0:	4770      	bx	lr
    37a2:	46c0      	nop			; (mov r8, r8)
    37a4:	46c0      	nop			; (mov r8, r8)
    37a6:	46c0      	nop			; (mov r8, r8)
    37a8:	46c0      	nop			; (mov r8, r8)
    37aa:	46c0      	nop			; (mov r8, r8)
    37ac:	46c0      	nop			; (mov r8, r8)
    37ae:	46c0      	nop			; (mov r8, r8)

000037b0 <_Z6noTonei>:

void noTone(int pin) {
  return;
}
    37b0:	4770      	bx	lr
    37b2:	46c0      	nop			; (mov r8, r8)
    37b4:	46c0      	nop			; (mov r8, r8)
    37b6:	46c0      	nop			; (mov r8, r8)
    37b8:	46c0      	nop			; (mov r8, r8)
    37ba:	46c0      	nop			; (mov r8, r8)
    37bc:	46c0      	nop			; (mov r8, r8)
    37be:	46c0      	nop			; (mov r8, r8)

000037c0 <_Z8shiftOutiiih>:

/* Simple communication protocols */
void shiftOut(int dataPin, int clockPin, int bitOrder, uint8_t val) {
  return;
}
    37c0:	4770      	bx	lr
    37c2:	46c0      	nop			; (mov r8, r8)
    37c4:	46c0      	nop			; (mov r8, r8)
    37c6:	46c0      	nop			; (mov r8, r8)
    37c8:	46c0      	nop			; (mov r8, r8)
    37ca:	46c0      	nop			; (mov r8, r8)
    37cc:	46c0      	nop			; (mov r8, r8)
    37ce:	46c0      	nop			; (mov r8, r8)

000037d0 <_Z7shiftIniii>:

uint8_t shiftIn(int dataPin, int clockPin, int bitOrder) {
  return 0;
}
    37d0:	2000      	movs	r0, #0
    37d2:	4770      	bx	lr
    37d4:	46c0      	nop			; (mov r8, r8)
    37d6:	46c0      	nop			; (mov r8, r8)
    37d8:	46c0      	nop			; (mov r8, r8)
    37da:	46c0      	nop			; (mov r8, r8)
    37dc:	46c0      	nop			; (mov r8, r8)
    37de:	46c0      	nop			; (mov r8, r8)

000037e0 <_Z7pulseInihm>:

unsigned long pulseIn(int pin, uint8_t state, unsigned long timeout) {
  return 0;
}
    37e0:	2000      	movs	r0, #0
    37e2:	4770      	bx	lr
    37e4:	46c0      	nop			; (mov r8, r8)
    37e6:	46c0      	nop			; (mov r8, r8)
    37e8:	46c0      	nop			; (mov r8, r8)
    37ea:	46c0      	nop			; (mov r8, r8)
    37ec:	46c0      	nop			; (mov r8, r8)
    37ee:	46c0      	nop			; (mov r8, r8)

000037f0 <_Z11pulseInLongihm>:

unsigned long pulseInLong(int pin, uint8_t state, unsigned long timeout) {
  return 0;
}
    37f0:	2000      	movs	r0, #0
    37f2:	4770      	bx	lr
    37f4:	46c0      	nop			; (mov r8, r8)
    37f6:	46c0      	nop			; (mov r8, r8)
    37f8:	46c0      	nop			; (mov r8, r8)
    37fa:	46c0      	nop			; (mov r8, r8)
    37fc:	46c0      	nop			; (mov r8, r8)
    37fe:	46c0      	nop			; (mov r8, r8)

00003800 <_Z3maplllll>:
#include "Arduino.h"

long map(long value, long fromLow, long fromHigh, long toLow, long toHigh) {
  return 0;
}
    3800:	2000      	movs	r0, #0
    3802:	4770      	bx	lr
    3804:	46c0      	nop			; (mov r8, r8)
    3806:	46c0      	nop			; (mov r8, r8)
    3808:	46c0      	nop			; (mov r8, r8)
    380a:	46c0      	nop			; (mov r8, r8)
    380c:	46c0      	nop			; (mov r8, r8)
    380e:	46c0      	nop			; (mov r8, r8)

00003810 <_Z6randomll>:

long random(long min, long max) {
  return 4;
}
    3810:	2004      	movs	r0, #4
    3812:	4770      	bx	lr
    3814:	46c0      	nop			; (mov r8, r8)
    3816:	46c0      	nop			; (mov r8, r8)
    3818:	46c0      	nop			; (mov r8, r8)
    381a:	46c0      	nop			; (mov r8, r8)
    381c:	46c0      	nop			; (mov r8, r8)
    381e:	46c0      	nop			; (mov r8, r8)

00003820 <_Z10randomSeedm>:

long randomSeed(unsigned long seed) {
  return 0;
}
    3820:	2000      	movs	r0, #0
    3822:	4770      	bx	lr
    3824:	46c0      	nop			; (mov r8, r8)
    3826:	46c0      	nop			; (mov r8, r8)
    3828:	46c0      	nop			; (mov r8, r8)
    382a:	46c0      	nop			; (mov r8, r8)
    382c:	46c0      	nop			; (mov r8, r8)
    382e:	46c0      	nop			; (mov r8, r8)

00003830 <memcmp>:
    3830:	b530      	push	{r4, r5, lr}
    3832:	2400      	movs	r4, #0
    3834:	4294      	cmp	r4, r2
    3836:	d008      	beq.n	384a <memcmp+0x1a>
    3838:	5d03      	ldrb	r3, [r0, r4]
    383a:	1c65      	adds	r5, r4, #1
    383c:	5d0c      	ldrb	r4, [r1, r4]
    383e:	42a3      	cmp	r3, r4
    3840:	d001      	beq.n	3846 <memcmp+0x16>
    3842:	1b18      	subs	r0, r3, r4
    3844:	e002      	b.n	384c <memcmp+0x1c>
    3846:	1c2c      	adds	r4, r5, #0
    3848:	e7f4      	b.n	3834 <memcmp+0x4>
    384a:	2000      	movs	r0, #0
    384c:	bd30      	pop	{r4, r5, pc}
	...

00003850 <memcpy>:
    3850:	2300      	movs	r3, #0
    3852:	b510      	push	{r4, lr}
    3854:	4293      	cmp	r3, r2
    3856:	d003      	beq.n	3860 <memcpy+0x10>
    3858:	5ccc      	ldrb	r4, [r1, r3]
    385a:	54c4      	strb	r4, [r0, r3]
    385c:	3301      	adds	r3, #1
    385e:	e7f9      	b.n	3854 <memcpy+0x4>
    3860:	bd10      	pop	{r4, pc}
	...

00003870 <memmove>:
    3870:	b510      	push	{r4, lr}
    3872:	4281      	cmp	r1, r0
    3874:	d208      	bcs.n	3888 <memmove+0x18>
    3876:	188b      	adds	r3, r1, r2
    3878:	4298      	cmp	r0, r3
    387a:	d205      	bcs.n	3888 <memmove+0x18>
    387c:	1a9b      	subs	r3, r3, r2
    387e:	3a01      	subs	r2, #1
    3880:	d309      	bcc.n	3896 <memmove+0x26>
    3882:	5c99      	ldrb	r1, [r3, r2]
    3884:	5481      	strb	r1, [r0, r2]
    3886:	e7fa      	b.n	387e <memmove+0xe>
    3888:	2300      	movs	r3, #0
    388a:	4293      	cmp	r3, r2
    388c:	d003      	beq.n	3896 <memmove+0x26>
    388e:	5ccc      	ldrb	r4, [r1, r3]
    3890:	54c4      	strb	r4, [r0, r3]
    3892:	3301      	adds	r3, #1
    3894:	e7f9      	b.n	388a <memmove+0x1a>
    3896:	bd10      	pop	{r4, pc}
	...

000038a0 <memset>:
    38a0:	1c03      	adds	r3, r0, #0
    38a2:	1882      	adds	r2, r0, r2
    38a4:	4293      	cmp	r3, r2
    38a6:	d002      	beq.n	38ae <memset+0xe>
    38a8:	7019      	strb	r1, [r3, #0]
    38aa:	3301      	adds	r3, #1
    38ac:	e7fa      	b.n	38a4 <memset+0x4>
    38ae:	4770      	bx	lr

000038b0 <__popcount_tab>:
    38b0:	0100 0201 0201 0302 0201 0302 0302 0403     ................
    38c0:	0201 0302 0302 0403 0302 0403 0403 0504     ................
    38d0:	0201 0302 0302 0403 0302 0403 0403 0504     ................
    38e0:	0302 0403 0403 0504 0403 0504 0504 0605     ................
    38f0:	0201 0302 0302 0403 0302 0403 0403 0504     ................
    3900:	0302 0403 0403 0504 0403 0504 0504 0605     ................
    3910:	0302 0403 0403 0504 0403 0504 0504 0605     ................
    3920:	0403 0504 0504 0605 0504 0605 0605 0706     ................
    3930:	0201 0302 0302 0403 0302 0403 0403 0504     ................
    3940:	0302 0403 0403 0504 0403 0504 0504 0605     ................
    3950:	0302 0403 0403 0504 0403 0504 0504 0605     ................
    3960:	0403 0504 0504 0605 0504 0605 0605 0706     ................
    3970:	0302 0403 0403 0504 0403 0504 0504 0605     ................
    3980:	0403 0504 0504 0605 0504 0605 0605 0706     ................
    3990:	0403 0504 0504 0605 0504 0605 0605 0706     ................
    39a0:	0504 0605 0605 0706 0605 0706 0706 0807     ................

000039b0 <adccfg1>:
    39b0:	0001 0000 0000 0000 0000 0000 0000 0000     ................

000039c0 <nil_thd_configs>:
    39c0:	fea0 1fff 0108 2000 3a44 0000 1261 0000     ....... D:..a...
    39d0:	0000 0000 fc80 1fff fd80 1fff 3a4c 0000     ............L:..
	...
    39f0:	0a0d 0a0d 724f 6863 7261 2064 7561 6964     ....Orchard audi
    3a00:	206f 6f62 746f 6f6c 6461 7265 202e 4220     o bootloader.  B
    3a10:	7361 6465 6f20 206e 7562 6c69 2064 7325     ased on build %s
    3a20:	0a0d 0000 6f63 6572 6620 6572 2065 656d     ....core free me
    3a30:	6f6d 7972 3a20 2520 2064 7962 6574 0d73     mory : %d bytes.
    3a40:	000a 0000 6564 6f6d 0064 0000 6469 656c     ....demod...idle
	...

00003a60 <serialConfig>:
    3a60:	c200 0001 0000 0000 0000 0000 0000 0000     ................
    3a70:	6530 3564 3232 3731 3434 3334 3266 6132     0ed522174443f22a
    3a80:	3335 3234 6137 6364 6638 3963 3665 3935     53427adc8fc9e659
    3a90:	6235 6465 3034 6538 0000 0000 0000 0000     5bed408e........

00003aa0 <adcgrpmic>:
    3aa0:	0001 0001 13f1 0000 0000 0000 0001 0000     ................
    3ab0:	0025 0000 000c 0000 0000 0000 0000 0000     %...............
    3ac0:	0d0a 5220 6165 6863 6465 6220 6f6f 2074     .. Reached boot 
    3ad0:	6f74 7520 6573 2072 7061 2170 2121 0d0a     to user app!!!..
    3ae0:	0000 0000 2553 2064 0000 0000 0d0a 5020     ....S%d ...... P
    3af0:	6425 6220 6425 0000 6420 6425 0000 0000     %d b%d.. d%d....
    3b00:	5f20 6425 0000 0000 0d0a 5420 6172 736e      _%d...... Trans
    3b10:	6566 2072 6f63 706d 656c 6574 6220 7475     fer complete but
    3b20:	6320 726f 7572 7470 6465 202e 7245 7361      corrupted. Eras
    3b30:	2065 2026 6572 7274 2e79 0d0a 0000 0000     e & retry.......
    3b40:	0d0a 5320 756f 6372 2065 6168 6873 203a     .. Source hash: 
    3b50:	3025 7838 6c20 636f 6c61 6820 7361 3a68     %08x local hash:
    3b60:	2520 3830 0a78 000d 0000 0000 0000 0000      %08x...........
    3b70:	7355 7265 7320 6365 6f74 7372 7320 6174     User sectors sta
    3b80:	7472 6120 2074 6425 202c 6261 726f 6974     rt at %d, aborti
    3b90:	676e 0a2e 000d 0000 6f54 206f 616d 796e     ng......Too many
    3ba0:	7320 6365 6f74 7372 7220 7165 6575 7473      sectors request
    3bb0:	6465 202c 6e65 2064 7461 2520 2064 7562     ed, end at %d bu
    3bc0:	2074 6577 6f20 6c6e 2079 6168 6576 2520     t we only have %
    3bd0:	2064 6573 7463 726f 2e73 0d0a 0000 0000     d sectors.......
    3be0:	5345 6425 252d 0a64 000d 0000 7245 7361     ES%d-%d.....Eras
    3bf0:	2065 6576 6972 7966 6620 6961 656c 2064     e verify failed 
    3c00:	2528 2964 202c 616d 6772 6e69 7220 6165     (%d), margin rea
    3c10:	2064 656c 6576 3a6c 2520 0a64 000d 0000     d level: %d.....
    3c20:	6520 6425 0020 0000 6c46 7361 2068 6e69      e%d ...Flash in
    3c30:	7469 6620 6961 656c 0a64 000d 6146 6c69     it failed...Fail
    3c40:	6465 7020 6f72 7267 6d61 696d 676e 7620     ed programming v
    3c50:	7265 6669 6369 7461 6f69 206e 7461 5520     erification at U
    3c60:	4553 2052 616d 6772 6e69 6c20 7665 6c65     SER margin level
    3c70:	3a73 7720 726f 7972 6120 6c20 7469 6c74     s: worry a littl
    3c80:	2065 6962 2e74 4620 6961 756c 6572 6120     e bit. Failure a
    3c90:	6464 6572 7373 203a 3025 7838 0d0a 0000     ddress: %08x....
    3ca0:	7473 6361 206b 766f 7265 6c66 776f 0000     stack overflow..

00003cb0 <vmt>:
    3cb0:	2481 0000 2461 0000 24c1 0000 24a1 0000     .$..a$...$...$..
    3cc0:	24b1 0000 2491 0000 2471 0000 2451 0000     .$...$..q$..Q$..
    3cd0:	2710 0000 2736 0000 2710 0000 2746 0000     .'..6'...'..F'..
    3ce0:	272c 0000 2736 0000 2710 0000 2714 0000     ,'..6'...'...'..
    3cf0:	2714 0000 2714 0000 2714 0000 2714 0000     .'...'...'...'..
    3d00:	2714 0000 2714 0000 2714 0000 2714 0000     .'...'...'...'..
    3d10:	2710 0000 2774 0000 276a 0000 2760 0000     .'..t'..j'..`'..
    3d20:	2758 0000 2750 0000 273e 0000 0000 0000     X'..P'..>'......

00003d30 <default_config>:
    3d30:	9600 0000 0000 0000 0000 0000 0000 0000     ................

00003d40 <pal_default_config>:
    3d40:	f000 400f 1212 0112 0101 0101 0101 0103     ...@............
    3d50:	0105 0101 0101 0101 0101 0101 0101 0101     ................
    3d60:	0101 0101 f040 400f 1201 1112 0311 0606     ....@..@........
    3d70:	0101 0106 0101 0101 0101 0101 0101 0101     ................
    3d80:	0101 0101 0101 0101                         ........
